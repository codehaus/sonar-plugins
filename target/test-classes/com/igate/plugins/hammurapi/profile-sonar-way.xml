<ruleset type="biz.hammurapi.config.ElementNameDomConfigurableContainer">

    <name>Java inspectors</name>
    <description>Hammurapi inspectors for Java language</description>

    <!-- <knowledge-compactor type="biz.hammurapi.rules.MaximizingKnowledgeCompactor"/> -->

    <handle-manager type="biz.hammurapi.rules.KnowledgeMaximizingHandleManager"/>

    <collection-manager type="biz.hammurapi.rules.PojoCollectionManager">
        <collectionType>biz.hammurapi.rules.KnowledgeMaximizingSet</collectionType>
    </collection-manager>

    <rules type="biz.hammurapi.review.ReviewRulesContainer">
		<rule type="biz.hammurapi.inspectors.java.JavaLangImportInspector">
			<name>Java Inspector 000</name>
			<description>No need to import classes from java.lang</description>
			<severity>3</severity><!--BI-000-->
		</rule>

		<rule type="biz.hammurapi.inspectors.java.AlphabeticalImportInspector">
			<name>Java Inspector 001</name>
			<description>Imports should be ordered according to the
				groups import order ${importOrder} and further for each group, imports should be
				arranged alphabetically </description>
			<severity>3</severity><!--BI-001-->
			<importOrder type="java.util.ArrayList">
				<element>java</element>
				<element>javax</element>
				<element>org</element>
				<element>com</element>
			</importOrder>
		</rule>

		<rule type="biz.hammurapi.inspectors.java.EmptyCatchBlockInspector">
			<name>Java Inspector 002</name>
			<description>Empty catch block.</description>
			<severity>1</severity><!--BI-002-->
			<exempt>java.lang.NumberFormatException</exempt>
		</rule>
		<rule type="biz.hammurapi.inspectors.java.BraceInspector">
			<name>Java Inspector 003</name>
			<description>do, while, if, and for statements need a brace enclosed
				block</description>
			<severity>3</severity><!--BI-003-->
		</rule>
		<rule type="biz.hammurapi.inspectors.java.NoPublicFieldsInspector">
			<name>Java Inspector 004</name>
			<description>A class should have no public fields except 'final' or 'static
				final'</description>
			<staticFinalAllowed>true</staticFinalAllowed>
			<finalAllowed>true</finalAllowed>
			<severity>2</severity><!--BI-004-->
		</rule>
		<rule type="biz.hammurapi.inspectors.java.NamingStandardInspector">
			<name>Java Inspector 005</name>
			<description>Classes, interfaces, methods, and variables should be named
				according to Sun's naming conventions.</description>
			<severity>3</severity><!--BI-005-->
		</rule>
		<rule type="biz.hammurapi.inspectors.java.SwitchDefaultInspector">
			<name>Java Inspector 006</name>
			<description>Missing default case for switch statement</description>
			<severity>1</severity><!--BI-006-->
		</rule>
		<rule type="biz.hammurapi.inspectors.java.UpperLInspector">
			<name>Java Inspector 007</name>
			<description>Use upper case 'L' rather that lower case 'l' to qualify long
				literals</description>
			<severity>3</severity><!--BI-007-->
		</rule>
		<rule type="biz.hammurapi.inspectors.java.ForIteratorInspector">
			<name>Java Inspector 008</name>
			<description>For statement requires update clause</description>
			<severity>2</severity><!--BI-008-->
		</rule>
		<rule type="biz.hammurapi.inspectors.java.AssignmentInsideConditionalInspector">
			<name>Java Inspector 009</name>
			<description>Assignment inside conditional</description>
			<severity>2</severity><!--BI-009-->
		</rule>
		<rule type="biz.hammurapi.inspectors.java.TooManyParametersInspector">
			<name>Java Inspector 010</name>
			<description>Too many parameters (more than ${maxParameters}.</description>
			<maxParameters>7</maxParameters>
			<severity>2</severity><!--BI-010-->
		</rule>
		<rule type="biz.hammurapi.inspectors.java.ForInitInspector">
			<name>Java Inspector 011</name>
			<description>For statement requires initialization clause (1st
				argument)</description>
			<severity>2</severity><!--BI-011-->
		</rule>
		<rule type="biz.hammurapi.inspectors.java.ForConditionInspector">
			<name>Java Inspector 012</name>
			<description>For statement requires condition clause (2nd
				argument)"</description>
			<severity>2</severity><!--BI-012-->
		</rule>
		<rule type="biz.hammurapi.inspectors.java.DuplicateImportInspector">
			<name>Java Inspector 013</name>
			<description>Duplicate import declaration</description>
			<severity>3</severity><!--BI-013-->
		</rule>
		<rule type="biz.hammurapi.inspectors.java.MissingPackageDeclarationInspector">
			<name>Java Inspector 014</name>
			<description>Missing package declaration - encourage structuring and avoid
				namespace conflicts by using packages</description>
			<severity>2</severity><!--BI-014-->
		</rule>
		<rule type="biz.hammurapi.inspectors.java.FinalParametersInspector">
			<name>Java Inspector 015</name>
			<description>Do not change parameter value. For comprehensibility,
				formal parameters should be	final</description>
			<severity>2</severity><!--BI-015-->
		</rule>
		<rule type="biz.hammurapi.inspectors.java.ModifiersOrderInspector">
			<name>Java Inspector 016</name>
			<description>Sun coding standards - class modifiers should be in order (public
				protected private abstract static final strictfp)</description>
			<severity>3</severity><!--BI-016-->
		</rule>
		<rule type="biz.hammurapi.inspectors.java.ReturnFromFinallyInspector">
			<name>Java Inspector 017</name>
			<description>Avoid 'return' in finally block - meaning of this is not always obvious
				to the maintainer</description>
			<severity>1</severity><!--BI-017-->
		</rule>
		<rule type="biz.hammurapi.inspectors.java.EmptyTryOrFinallyBlockInspector">
			<name>Java Inspector 018</name>
			<description>Avoid empty try block or finally block.</description>
			<severity>2</severity><!--BI-018-->
		</rule>
		<rule type="biz.hammurapi.inspectors.java.OneTypePerFileInspector">
			<name>Java Inspector 019</name>
			<description>One class/interface per file.</description>
			<severity>2</severity><!--BI-019-->
		</rule>
		<rule type="biz.hammurapi.inspectors.java.NoStarImportsInspector">
			<name>Java Inspector 020</name>
			<description>No * imports.</description>
			<severity>3</severity><!--BI-020-->
		</rule>
		<rule type="biz.hammurapi.inspectors.java.RootPackageInspector">
			<name>Java Inspector 021</name>
			<description>Packages should begin with project or organization package prefix ${rootPackages}</description>
			<severity>3</severity><!--BI-021-->
			<rootPackages type="java.util.HashSet">
				<element>com.igate</element>
			</rootPackages>
		</rule>
		<rule type="biz.hammurapi.inspectors.java.DirectoryStructureInspector">
			<name>Java Inspector 022</name>
			<description>Directory structure should match package structure</description>
			<severity>1</severity><!--BI-022-->
		</rule>
		<rule type="biz.hammurapi.inspectors.java.ConditionalExpressionInspector">
			<name>Java Inspector 023</name>
			<description>Avoid expressions like &lt;expression&gt; ? true :
				false</description>
			<severity>2</severity><!--BI-023-->
		</rule>
		<rule type="biz.hammurapi.inspectors.java.HardcodedCharacterLiteralsInspector">
			<name>Java Inspector 024</name>
			<description>Avoid hardwired character literals</description>
			<severity>3</severity><!--BI-024-->
		</rule>
		<rule type="biz.hammurapi.inspectors.java.HardcodedNumericLiteralsInspector">
			<name>Java Inspector 025</name>
			<description>Avoid hardwired numeric literals. Allowed literals: ${allowedLiterals}</description>
			<allowedLiterals type="java.util.HashSet">
				<element type="java.math.BigDecimal">0</element>
				<element type="java.math.BigDecimal">1</element>
				<element type="java.math.BigDecimal">-1</element>
			</allowedLiterals>
			<severity>3</severity><!--BI-025-->
		</rule>
		<rule type="biz.hammurapi.inspectors.java.HardcodedStringLiteralsInspector">
			<name>Java Inspector 026</name>
			<description>Avoid hardwired string literals. Allowed literals: ${allowedLiterals}</description>
			<severity>3</severity><!--BI-026-->
			<!-- <allowedLiterals>Some literal</allowedLiterals> -->
		</rule>
		<rule type="biz.hammurapi.inspectors.java.OneStatementPerLineInspector">
			<name>Java Inspector 027</name>
			<description>More than one statement per line</description>
			<severity>3</severity><!--BI-027-->
		</rule>
		<rule type="biz.hammurapi.inspectors.java.ArrayDeclarationInspector">
			<name>Java Inspector 028</name>
			<description>Array declarators should be placed next to the type, not the variable
				name</description>
			<severity>3</severity><!--BI-028-->
		</rule>
		<rule type="biz.hammurapi.inspectors.java.MaxLinesInFileInspector">
			<name>Java Inspector 029</name>
			<description>Source file is longer than ${maxLength} lines.</description>
			<maxLength>2000</maxLength>
			<severity>2</severity><!--BI-029-->
		</rule>
		<rule type="biz.hammurapi.inspectors.java.VariablesInspector">
			<name>Java Inspector 030</name>
			<description>Variables should be declared in individual
				statements.</description>
			<severity>3</severity><!--BI-030-->
		</rule>
		<rule type="biz.hammurapi.inspectors.java.SwitchCaseBreakInspector">
			<name>Java Inspector 031</name>
			<description>Switch statement case without 'break'</description>
			<severity>1</severity><!--BI-031-->
		</rule>
		<rule type="biz.hammurapi.inspectors.java.LineLengthInspector">
			<name>Java Inspector 032</name>
			<description>Line is longer than ${maxLength} columns.</description>
			<maxLength>80</maxLength>
			<severity>3</severity><!--BI-032-->
		</rule>
		<!--
		<rule type="biz.hammurapi.inspectors.java.ContinueInspector">
			<name>Java Inspector 033</name>
			<description>Non-sequential logic - 'continue' statement</description>
			<severity>2</severity>
			<category>Java</category>
			<category>Coding guidelines</category>
		</rule>
		-->
		<rule type="biz.hammurapi.inspectors.java.BooleanEqualityInspector">
			<name>Java Inspector 034</name>
			<description>Avoid equality operations on 'true' and 'false' boolean
				literals.</description>
			<severity>2</severity><!--BI-034-->
		</rule>
		<rule type="biz.hammurapi.inspectors.java.CodeTooLongInspector">
			<name>Java Inspector 035</name>
			<description>Method is too long</description>
			<maxLength>200</maxLength>
			<severity>2</severity><!--BI-035-->
		</rule>
		<rule
			type="biz.hammurapi.inspectors.java.UseBigDecimalInsteadOfFloatAndDoubleInspector">
			<name>Java Inspector 036</name>
			<description>Use BigDecimal instead of Float or Double for monetary	values</description>
			<severity>1</severity><!--BI-036-->
		</rule>
		<rule type="biz.hammurapi.inspectors.java.PublicStaticArrayFieldsInspector">
			<name>Java Inspector 037</name>
			<description>Avoid using "public static final" array fields</description>
			<severity>2</severity><!--BI-037-->
		</rule>
		<rule type="biz.hammurapi.inspectors.java.InnerClassNestingInspector">
			<name>Java Inspector 038</name>
			<description>Avoid more than ${maxNesting} levels of nested inner classes</description>
			<maxNesting>2</maxNesting>
			<severity>2</severity><!--BI-038-->
		</rule>
		<rule type="biz.hammurapi.inspectors.java.EmptyBodiesInspector">
			<name>Java Inspector 039</name>
			<description>Avoid "for", "do", "while", "if" and "if ... else" statements with
				empty bodies</description>
			<severity>1</severity><!--BI-039-->
		</rule>
		<rule type="biz.hammurapi.inspectors.java.OperationParameterNamesInspector">
			<name>Java Inspector 040</name>
			<description>Avoid using method parameter names that conflict with class member
				names</description>
			<severity>3</severity><!--BI-040-->
		</rule>
		<rule type="biz.hammurapi.inspectors.java.MethodNameSameAsConstructorInspector">
			<name>Java Inspector 041</name>
			<description>Avoid giving non-constructor methods the same name as the
				class</description>
			<severity>3</severity><!--BI-041-->
		</rule>
		<rule type="biz.hammurapi.inspectors.java.NotifyInspector">
			<name>Java Inspector 042</name>
			<description>Do not use 'notify ()'; use 'notifyAll ()' instead</description>
			<severity>3</severity><!--BI-042-->
		</rule>
		<rule type="biz.hammurapi.inspectors.java.WaitInLoopInspector">
			<name>Java Inspector 043</name>
			<description>Call 'wait ()' only inside a "while" loop</description>
			<severity>2</severity><!--BI-043-->
		</rule>
		<rule type="biz.hammurapi.inspectors.java.WaitAndNotifyInsteadOfPollingInspector">
			<name>Java Inspector 044</name>
			<description>Use 'wait ()' and 'notifyAll ()' instead of polling
				loops</description>
			<severity>2</severity><!--BI-044-->
		</rule>
		<rule type="biz.hammurapi.inspectors.java.TooManyThrowsInspector">
			<name>Java Inspector 045</name>
			<description>Too many exceptions (more than ${maxThrows}) listed in throws clause</description>
			<maxThrows>3</maxThrows>
			<severity>2</severity><!--BI-045-->
		</rule>
		<rule type="biz.hammurapi.inspectors.java.EmptyStatementsInspector">
			<name>Java Inspector 046</name>
			<description>Empty statements</description>
			<severity>3</severity><!--BI-046-->
		</rule>
		<rule type="biz.hammurapi.inspectors.java.InterfaceMethodModifiersInspector">
			<name>Java Inspector 047</name>
			<description>No need to provide (public, abstract, ) modifiers for interface
				methods</description>
			<severity>3</severity><!--BI-047-->
		</rule>
		<rule type="biz.hammurapi.inspectors.java.FileHeaderInspector">
			<name>Java Inspector 048</name>
			<description>Copyrights information should be present in each
				file.</description>
			<copyrights type="java.util.HashSet">
				<element>Copyright (C) 200? My Company</element>
			</copyrights>
			<severity>3</severity><!--BI-048-->
		</rule>
		<rule type="biz.hammurapi.inspectors.java.UseCollectionsInsteadOfArraysInspector">
			<name>Java Inspector 049</name>
			<description>Use a Collection instead of arrays Object[]</description>
			<severity>2</severity><!--BI-049-->
		</rule>
		<rule
			type="biz.hammurapi.inspectors.java.VariablesAndMethodsNameClashingInspector">
			<name>Java Inspector 050</name>
			<description>Instance variables and method names shouldn't have same
				name</description>
			<severity>3</severity><!--BI-050-->
		</rule>
		<rule type="biz.hammurapi.inspectors.java.ConstructorWithoutSuperInspector">
			<name>Java Inspector 051</name>
			<description>It is good practice to call in any case super() in a constructor.</description>
			<severity>3</severity><!--BI-051-->
		</rule>
		<rule type="biz.hammurapi.inspectors.java.EmptySourceUnitInspector">
			<name>Java Inspector 052</name>
			<description>File doesn't contain classes or interfaces</description>
			<severity>2</severity><!--BI-052-->
		</rule>
		<rule
			type="biz.hammurapi.inspectors.java.VariableNameClashesWithTypeNameInspector">
			<name>Java Inspector 053</name>
			<description>Instance variables and the declaring type shouldn't have same
				name</description>
			<severity>3</severity><!--BI-053-->
		</rule>
		<rule type="biz.hammurapi.inspectors.java.MinimalInstanceVariableLengthInspector">
			<name>Java Inspector 054</name>
			<description>Discourage usage of instance variables like a, j by enforcing minimal
				variable name length (${minLength}).</description>
			<minLength>3</minLength>
			<severity>3</severity><!--BI-054-->
		</rule>
		<rule type="biz.hammurapi.inspectors.java.UseEqualsInsteadOfCompareToInspector">
			<name>Java Inspector 055</name>
			<description>Use object.equals(anotherObject) instead of
				object.compareTo(anotherObject)==0</description>
			<severity>3</severity><!--BI-055-->
		</rule>
		<rule type="biz.hammurapi.inspectors.java.WaitAndNotifyInspector">
			<name>Java Inspector 056</name>
			<description>Use wait(), notify() and notifyAll() in synchronized method or
				block.</description>
			<severity>3</severity><!--BI-056-->
		</rule>
		<rule type="biz.hammurapi.inspectors.java.VendorNameInspector">
			<name>Java Inspector 057</name>
			<description>In outsourcing scenario developing organization typically shall
				not put its name into source files.</description>
			<severity>3</severity><!--BI-057-->

			<vendorName>Some vendor name</vendorName>
		</rule>
		<rule type="biz.hammurapi.inspectors.java.InnerClassVisibilityInspector">
			<name>Java Inspector 058</name>
			<description>Make inner classes "private"</description>
			<severity>1</severity><!--BI-058-->
		</rule>
		<rule type="biz.hammurapi.inspectors.java.SynchronizedInspector">
			<name>Java Inspector 059</name>
			<description>Synchronize at the block level rather than the method
				level</description>
			<severity>2</severity><!--BI-059-->
		</rule>

		<!-- New 5.6.0 inspectors -->

		<rule type="biz.hammurapi.inspectors.java.AbstractMethodFromConstructorInspector">
			<name>Java Inspector 060</name>
			<description>Do not invoke abstract method from constructor.</description>
			<severity>2</severity>
		</rule>

		<rule type="biz.hammurapi.inspectors.java.AccessToStaticMembersInspector">
			<name>Java Inspector 061</name>
			<description>Access static members in a static way, using class name instead of instance.</description>
			<severity>2</severity>
		</rule>

		<rule type="biz.hammurapi.inspectors.java.UnnecessaryCastOrInstanceofInspector">
			<name>Java Inspector 062</name>
			<description>Unnecessary cast or instanceof.</description>
			<severity>2</severity>
		</rule>

		<rule type="biz.hammurapi.inspectors.java.CatchTooGeneralExceptionTypeInspector">
			<name>Java Inspector 063</name>
			<description>Avoid catching too general exception types ${tooGeneralExceptionTypes}.</description>
			<severity>2</severity>

			<tooGeneralExceptionType>java.lang.Exception</tooGeneralExceptionType>
			<tooGeneralExceptionType>java.lang.RuntimeException</tooGeneralExceptionType>
			<tooGeneralExceptionType>java.lang.Throwable</tooGeneralExceptionType>
			<tooGeneralExceptionType>java.lang.Error</tooGeneralExceptionType>
		</rule>

		<rule type="biz.hammurapi.inspectors.java.ThrowTooGeneralExceptionTypeInspector">
			<name>Java Inspector 064</name>
			<description>Do not throw too general exception types ${tooGeneralExceptionTypes}.
			Use module-specific or problem-specific exception types.</description>
			<severity>2</severity>

			<tooGeneralExceptionType>java.lang.Exception</tooGeneralExceptionType>
			<tooGeneralExceptionType>java.lang.RuntimeException</tooGeneralExceptionType>
			<tooGeneralExceptionType>java.lang.Throwable</tooGeneralExceptionType>
			<tooGeneralExceptionType>java.lang.Error</tooGeneralExceptionType>
		</rule>

		<rule type="biz.hammurapi.inspectors.java.ThrowsClauseInspector">
			<name>Java Inspector 065</name>
			<description>Wrap low-level exceptions. Declare only approved exception
			types ${allowedThrows} in the throws clause.</description>
			<severity>2</severity>
			<!-- Just an example -->
			<allowedExceptionType>java.sql.SQLException</allowedExceptionType>
		</rule>

		<rule type="biz.hammurapi.inspectors.java.ThreadYieldInspector">
			<name>Java Inspector 066</name>
			<description>Avoid invoking Thread.yield().</description>
			<severity>2</severity>
		</rule>

		<rule type="biz.hammurapi.inspectors.java.ThreadSubclassesInspector">
			<name>Java Inspector 067</name>
			<description>Give Thread subclasses run() method.</description>
			<severity>2</severity>
		</rule>

		<rule type="biz.hammurapi.inspectors.java.SystemPrintlnLoggingInspector">
			<name>Java Inspector 068</name>
			<description>Do not use System.out and System.err to output logging messages. Use loggers instead.</description>
			<severity>2</severity>
		</rule>

		<rule type="biz.hammurapi.inspectors.java.SystemGcMisuseInspector">
			<name>Java Inspector 069</name>
			<description>Avoid explicit invocation of System.gc().</description>
			<severity>2</severity>
		</rule>

		<rule type="biz.hammurapi.inspectors.java.CyclomaticComplexityInspector">
			<name>Java Inspector 070-A</name>
			<description>Keep code understandable. Cyclomatic complexity shall be below ${maxComplexity}.</description>
			<severity>2</severity>

			<maxComplexity>12</maxComplexity>
		</rule>

		<rule type="biz.hammurapi.inspectors.java.CyclomaticComplexityInspector">
			<name>Java Inspector 070-B</name>
			<description>Keep code understandable. Cyclomatic complexity shall be below ${maxComplexity}.</description>
			<severity>1</severity>

			<maxComplexity>20</maxComplexity>
			<collectMeasurements>false</collectMeasurements>
		</rule>

		<rule type="biz.hammurapi.inspectors.java.DoNotUseNewForStringsInspector">
			<name>Java Inspector 072</name>
			<description>Do not construct strings from strings.</description>
			<severity>2</severity>
		</rule>

		<rule type="biz.hammurapi.inspectors.java.DoNotUseTypeInspector">
			<name>Java Inspector 073 [java.util.Vector]</name>
			<description>Avoid using Vector, use other collection classes.</description>
			<severity>2</severity>

			<deprecatedType>java.util.Vector</deprecatedType>
		</rule>

		<rule type="biz.hammurapi.inspectors.java.DoNotUseTypeInspector">
			<name>Java Inspector 073 [java.lang.StringBuffer]</name>
			<description>
				In Java 5 use StringBuilder instead of StringBuffer if access is
				single-threaded, e.g. StringBuffer is used as a local variable .
			</description>
			<severity>2</severity>

			<deprecatedType>java.lang.StringBuffer</deprecatedType>
		</rule>

		<rule type="biz.hammurapi.inspectors.java.DotChainInspector">
			<name>Java Inspector 074</name>
			<description>Avoid long (>${maxChain}) dot chains.</description>
			<severity>2</severity>
			<maxChain>10</maxChain>
		</rule>

		<rule type="biz.hammurapi.inspectors.java.ForLoopControlVariablesInspector">
			<name>Java Inspector 075</name>
			<description>Do not change value of for loop variable.</description>
			<severity>2</severity>
		</rule>

		<rule type="biz.hammurapi.inspectors.java.SuperCloneInspector">
			<name>Java Inspector 076</name>
			<description>Always invoke super.clone() in clone() method.</description>
			<severity>2</severity>
		</rule>

		<rule type="biz.hammurapi.inspectors.java.StringLiteralEqualsInspector">
			<name>Java Inspector 077</name>
			<description>To reduce probability of NullPointerException, use "string literal".equals(variable) instead of variable.equals("string literal").</description>
			<severity>2</severity>
		</rule>

		<rule type="biz.hammurapi.inspectors.java.HidingInheritedFieldsInspector">
			<name>Java Inspector 078</name>
			<description>Do not hide inherited fields.</description>
			<severity>2</severity>
		</rule>

		<rule type="biz.hammurapi.inspectors.java.InvokeFinalizeInspector">
			<name>Java Inspector 079</name>
			<description>Do not invoke finalize() explicitly.</description>
			<severity>2</severity>
		</rule>

		<rule type="biz.hammurapi.inspectors.java.LogicalNestingInspector">
			<name>Java Inspector 080</name>
			<description>Logical nesting is too deep (>${maxNesting}).</description>
			<severity>2</severity>
			<maxNesting>5</maxNesting>
		</rule>

		<rule type="biz.hammurapi.inspectors.java.StaticCollectionsInspector">
			<name>Java Inspector 081</name>
			<description>Avoid static collections, they can grow in size over time.</description>
			<severity>2</severity>
		</rule>

		<rule type="biz.hammurapi.inspectors.java.RedundantParenthesisInspector">
			<name>Java Inspector 082</name>
			<description>Parenthesis are redundant.</description>
			<severity>2</severity>
		</rule>

		<rule type="biz.hammurapi.inspectors.java.PrintStackTraceInspector">
			<name>Java Inspector 083</name>
			<description>Do not use printStackTrace() for exception logging.</description>
			<severity>2</severity>
		</rule>

		<rule type="biz.hammurapi.inspectors.java.OperationWithTooGeneralExceptonTypeInThrowsInspector">
			<name>Java Inspector 084</name>
			<description>Do not declare too general exception type ${tooGeneralExceptionTypes} in throws clause.</description>
			<severity>2</severity>

			<tooGeneralExceptionType>java.lang.Exception</tooGeneralExceptionType>
			<tooGeneralExceptionType>java.lang.RuntimeException</tooGeneralExceptionType>
			<tooGeneralExceptionType>java.lang.Throwable</tooGeneralExceptionType>
			<tooGeneralExceptionType>java.lang.Error</tooGeneralExceptionType>
		</rule>

		<rule type="biz.hammurapi.inspectors.java.OperationWithRuntimeExceptionInThrowsInspector">
			<name>Java Inspector 085</name>
			<description>Do not declare runtime exceptions in the throws clause.</description>
			<severity>2</severity>
		</rule>

		<rule type="biz.hammurapi.inspectors.java.ObjectEqualsInspector">
			<name>Java Inspector 086</name>
			<description>Use equals() instead of == or != to compare objects.</description>
			<severity>1</severity>
		</rule>

		<rule type="biz.hammurapi.inspectors.java.ChainExceptionsInspector">
			<name>Java Inspector 087</name>
			<description>
				Chain exceptions. If exception is thrown from an exception
				handler (wrapping exceptions), pass the cause exception to
				the new exception constructor.
			</description>
			<severity>2</severity>
		</rule>

		<!-- 5.7.0 inspectors -->

		<rule type="biz.hammurapi.inspectors.java.JavaDocInspector">
			<name>Java Inspector 089</name>
			<description>Inspects correctness of Javadoc comments.</description>
			<severity>3</severity>
		</rule>

		<rule type="biz.hammurapi.inspectors.java.UnnecessaryElseInspector">
			<name>Java Inspector 090</name>
			<description>Unnecessary else part in if. The main part terminates control flow (return, break, throw, or continue).</description>
			<severity>3</severity>
		</rule>

		<rule type="biz.hammurapi.inspectors.java.UnconditionalIfInspector">
			<name>Java Inspector 091</name>
			<description>If condition is always true of false.</description>
			<severity>2</severity>
		</rule>

		<rule type="biz.hammurapi.inspectors.java.OverrideEqualsAndHashCodeInspector">
			<name>Java Inspector 092</name>
			<description>Override both equals() and hashCode(). Overriding of only one of these methods may cause unpredictable behavior of HashXXX collections.</description>
			<severity>2</severity>
		</rule>

		<rule type="biz.hammurapi.inspectors.java.DoNotUseNewForBooleanInspector">
			<name>Java Inspector 093</name>
			<description>Do not instantiate Boolean, use Boolean.TRUE and Boolean.FALSE.</description>
			<severity>2</severity>
		</rule>

		<rule type="biz.hammurapi.inspectors.java.DoNotConstructBigDecimalFromDecimalLiteralsInspector">
			<name>Java Inspector 094</name>
			<description>Do not construct BigDecimal from decimal literals (e.g. 0.1), use string literals (e.g. "0.1") to avoid rounding problems.</description>
			<severity>2</severity>
		</rule>

		<rule type="biz.hammurapi.inspectors.java.DoNotConstructPredefinedBigDecimalsInspector">
			<name>Java Inspector 095</name>
			<description>Do not construct predefined (BigDecimal.ZERO, BigDecimal.ONE, BigDecimal.ZERO) BigDecimals.</description>
			<severity>2</severity>
		</rule>

		<rule type="biz.hammurapi.inspectors.java.UselessOperationOnImmutableInspector">
			<name>Java Inspector 096</name>
			<description>Operations on immutables (String, BigDecimal, ...) do not change object state but create a new one. Ignoring the operation result is an error.</description>
			<severity>2</severity>

			<immutable>java.lang.Object</immutable>
			<immutable>java.lang.String</immutable>
			<immutable>java.math.BigDecimal</immutable>
			<immutable>java.math.BigInteger</immutable>
			<immutable>java.lang.Number</immutable>
			<immutable>java.lang.Byte</immutable>
			<immutable>java.lang.Double</immutable>
			<immutable>java.lang.Float</immutable>
			<immutable>java.lang.Integer</immutable>
			<immutable>java.lang.Long</immutable>
			<immutable>java.lang.Short</immutable>
			<immutable>java.lang.Boolean</immutable>
			<immutable>java.lang.Character</immutable>

			<!-- <immutable>java.lang.Class</immutable> Class is immutable, though forName() sometimes is invoked for side-effects -->
		</rule>

    </rules>
</ruleset>