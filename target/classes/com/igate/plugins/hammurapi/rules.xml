<rules>
	<!-- Hammurapi 5.7.0 -->
	<rule key="Java Inspector 000">
		<name><![CDATA[Java Inspector 000]]></name>
		<configKey>biz.hammurapi.inspectors.java.JavaLangImportInspector
		</configKey>
		<category name="Maintainability" />
		<description>No need to import classes from java.lang</description>
	</rule>

	<rule key="Java Inspector 001">
		<name><![CDATA[Java Inspector 001]]></name>
		<configKey>biz.hammurapi.inspectors.java.AlphabeticalImportInspector
		</configKey>
		<category name="Maintainability" />
		<description>Imports should be ordered according to the groups
			import order ${importOrder} and further for each group, imports
			should be arranged alphabetically </description>
		<param key="importOrder/java.util.ArrayList" type="s">
			<description>
        		<![CDATA[The order of import. Eg-Values: "&lt;element&gt;java&lt;/element&gt;&lt;element&gt;javax&lt;/element&gt;&lt;element&gt;org&lt;/element&gt;&lt;element&gt;com&lt;/element&gt;"]]>
			</description>
		</param>
	</rule>

	<rule key="Java Inspector 002">
		<name><![CDATA[Java Inspector 002]]></name>
		<configKey>biz.hammurapi.inspectors.java.EmptyCatchBlockInspector
		</configKey>
		<category name="Maintainability" />
		<description>Empty catch block.</description>
		<param key="exempt" type="s{}">
			<description>
        		<![CDATA[The list of exception type for which the empt catch block can be excempted. Eg-Values: java.lang.NumberFormatException]]>
			</description>
		</param>
	</rule>

	<rule key="Java Inspector 003">
		<name><![CDATA[Java Inspector 003]]></name>
		<configKey>biz.hammurapi.inspectors.java.BraceInspector
		</configKey>
		<category name="Maintainability" />
		<description>do, while, if, and for statements need a brace
			enclosed block</description>
	</rule>

	<rule key="Java Inspector 004">
		<name><![CDATA[Java Inspector 004]]></name>
		<configKey>biz.hammurapi.inspectors.java.NoPublicFieldsInspector
		</configKey>
		<category name="Maintainability" />
		<description>A class should have no public fields except 'final' or
			'static final'</description>
		<param key="staticFinalAllowed" type="b">
			<description>
        		<![CDATA[Set whether static final field ia allowed or not. Eg-Values: true or false ]]>
			</description>
		</param>
		<param key="finalAllowed" type="b">
			<description>
        		<![CDATA[Set whether final field ia allowed or not. Eg-Values: true or false ]]>
			</description>
		</param>
	</rule>

	<rule key="Java Inspector 005">
		<name><![CDATA[Java Inspector 005]]></name>
		<configKey>biz.hammurapi.inspectors.java.NamingStandardInspector
		</configKey>
		<category name="Maintainability" />
		<description>Classes, interfaces, methods, and variables
			should be named according to Sun's naming conventions.</description>
	</rule>

	<rule key="Java Inspector 006">
		<name><![CDATA[Java Inspector 006]]></name>
		<configKey>biz.hammurapi.inspectors.java.SwitchDefaultInspector
		</configKey>
		<category name="Reliability" />
		<description>Missing default case for switch statement
		</description>
	</rule>

	<rule key="Java Inspector 007">
		<name><![CDATA[Java Inspector 007]]></name>
		<configKey>biz.hammurapi.inspectors.java.UpperLInspector
		</configKey>
		<category name="Reliability" />
		<description>Use upper case 'L' rather that lower case 'l' to
			qualify long literals</description>
	</rule>

	<rule key="Java Inspector 008">
		<name><![CDATA[Java Inspector 008]]></name>
		<configKey>biz.hammurapi.inspectors.java.ForIteratorInspector
		</configKey>
		<category name="Maintainability" />
		<description>For statement requires update clause</description>
	</rule>

	<rule key="Java Inspector 009">
		<name><![CDATA[Java Inspector 009]]></name>
		<configKey>
			biz.hammurapi.inspectors.java.AssignmentInsideConditionalInspector
		</configKey>
		<category name="Reliability" />
		<description>Assignment inside conditional</description>
	</rule>

	<rule key="Java Inspector 010">
		<name><![CDATA[Java Inspector 010]]></name>
		<configKey>
			biz.hammurapi.inspectors.java.TooManyParametersInspector
		</configKey>
		<category name="Maintainability" />
		<description>Too many parameters (more than ${maxParameters}.
		</description>
		<param key="maxParameters" type="i">
			<description>
        		<![CDATA[The maximum number of parameters allowed. Eg-Values: 7]]>
			</description>
		</param>
	</rule>

	<rule key="Java Inspector 011">
		<name><![CDATA[Java Inspector 011]]></name>
		<configKey>biz.hammurapi.inspectors.java.ForInitInspector
		</configKey>
		<category name="Maintainability" />
		<description>For statement requires initialization clause (1st
			argument)</description>
	</rule>

	<rule key="Java Inspector 012">
		<name><![CDATA[Java Inspector 012]]></name>
		<configKey>biz.hammurapi.inspectors.java.ForConditionInspector
		</configKey>
		<category name="Maintainability" />
		<description>For statement requires condition clause (2nd argument)
		</description>
	</rule>

	<rule key="Java Inspector 013">
		<name><![CDATA[Java Inspector 013]]></name>
		<configKey>biz.hammurapi.inspectors.java.DuplicateImportInspector
		</configKey>
		<category name="Maintainability" />
		<description>Duplicate import declaration</description>
	</rule>

	<rule key="Java Inspector 014">
		<name><![CDATA[Java Inspector 014]]></name>
		<configKey>
			biz.hammurapi.inspectors.java.MissingPackageDeclarationInspector
		</configKey>
		<category name="Maintainability" />
		<description>Missing package declaration - encourage
			structuring and avoid namespace conflicts by using packages
		</description>
	</rule>

	<rule key="Java Inspector 015">
		<name><![CDATA[Java Inspector 015]]></name>
		<configKey>biz.hammurapi.inspectors.java.FinalParametersInspector
		</configKey>
		<category name="Reliability" />
		<description>Do not change parameter value. For comprehensibility,
			formal parameters should be final</description>
	</rule>

	<rule key="Java Inspector 016">
		<name><![CDATA[Java Inspector 016]]></name>
		<configKey>biz.hammurapi.inspectors.java.ModifiersOrderInspector
		</configKey>
		<category name="Maintainability" />
		<description>Sun coding standards - class modifiers should be in
			order (public protected private abstract static final strictfp)
		</description>
	</rule>

	<rule key="Java Inspector 017">
		<name><![CDATA[Java Inspector 017]]></name>
		<configKey>biz.hammurapi.inspectors.java.ReturnFromFinallyInspector
		</configKey>
		<category name="Maintainability" />
		<description>Avoid 'return' in finally block - meaning of this is
			not always obvious to the maintainer</description>
	</rule>

	<rule key="Java Inspector 018">
		<name><![CDATA[Java Inspector 018]]></name>
		<configKey>
			biz.hammurapi.inspectors.java.EmptyTryOrFinallyBlockInspector
		</configKey>
		<category name="Maintainability" />
		<description>Avoid empty try block or finally block</description>
	</rule>

	<rule key="Java Inspector 019">
		<name><![CDATA[Java Inspector 019]]></name>
		<configKey>biz.hammurapi.inspectors.java.OneTypePerFileInspector
		</configKey>
		<category name="Maintainability" />
		<description>One class/interface per file</description>
	</rule>

	<rule key="Java Inspector 020">
		<name><![CDATA[Java Inspector 020]]></name>
		<configKey>biz.hammurapi.inspectors.java.NoStarImportsInspector
		</configKey>
		<category name="Maintainability" />
		<description>No * imports</description>
	</rule>

	<rule key="Java Inspector 021">
		<name><![CDATA[Java Inspector 021]]></name>
		<configKey>
			biz.hammurapi.inspectors.java.RootPackageInspector
		</configKey>
		<category name="Maintainability" />
		<description>Packages should begin with project or
			organization package prefix ${rootPackages}</description>
		<param key="rootPackages/java.util.HashSet" type="s">
			<description>
        		<![CDATA[The organization prefix settings. Eg-Values: "&lt;element&gt;com.igate&lt;/element&gt;"]]>
			</description>
		</param>
	</rule>

	<rule key="Java Inspector 022">
		<name><![CDATA[Java Inspector 022]]></name>
		<configKey>biz.hammurapi.inspectors.java.DirectoryStructureInspector
		</configKey>
		<category name="Maintainability" />
		<description>Directory structure should match package
			structure</description>
	</rule>

	<rule key="Java Inspector 023">
		<name><![CDATA[Java Inspector 023]]></name>
		<configKey>
			biz.hammurapi.inspectors.java.ConditionalExpressionInspector
		</configKey>
		<category name="Maintainability" />
		<description>Avoid expressions like &lt;expression&gt; ? true : false</description>
	</rule>

	<rule key="Java Inspector 024">
		<name><![CDATA[Java Inspector 024]]></name>
		<configKey>biz.hammurapi.inspectors.java.HardcodedCharacterLiteralsInspector
		</configKey>
		<category name="Maintainability" />
		<description>Avoid hardwired character literals</description>
	</rule>

	<rule key="Java Inspector 025">
		<name><![CDATA[Java Inspector 025]]></name>
		<configKey>
			biz.hammurapi.inspectors.java.HardcodedNumericLiteralsInspector
		</configKey>
		<category name="Maintainability" />
		<description>Avoid hardwired numeric literals. Allowed literals:
			${allowedLiterals}</description>
		<param key="allowedLiterals/java.util.HashSet" type="s">
			<description>
        		<![CDATA[List of allowed literals. Eg-Values: "<element type="java.math.BigDecimal">0&lt;/element&gt;
				<element type="java.math.BigDecimal">1&lt;/element&gt;"]]>
			</description>
		</param>
	</rule>

	<rule key="Java Inspector 026">
		<name><![CDATA[Java Inspector 026]]></name>
		<configKey>
			biz.hammurapi.inspectors.java.HardcodedStringLiteralsInspector
		</configKey>
		<category name="Maintainability" />
		<description>Avoid hardwired string literals. Allowed literals: ${allowedLiterals}</description>
		<param key="allowedLiterals" type="s{}">
			<description>
        		<![CDATA[List of allowed literals. Eg-Values: "Some literal"]]>
			</description>
		</param>
	</rule>

	<rule key="Java Inspector 027">
		<name><![CDATA[Java Inspector 027]]></name>
		<configKey>biz.hammurapi.inspectors.java.OneStatementPerLineInspector
		</configKey>
		<category name="Maintainability" />
		<description>More than one statement per line</description>
	</rule>

	<rule key="Java Inspector 028">
		<name><![CDATA[Java Inspector 028]]></name>
		<configKey>biz.hammurapi.inspectors.java.ArrayDeclarationInspector
		</configKey>
		<category name="Maintainability" />
		<description>Array declarators should be placed next to the type, not the variable name</description>
	</rule>

	<rule key="Java Inspector 029">
		<name><![CDATA[Java Inspector 029]]></name>
		<configKey>biz.hammurapi.inspectors.java.MaxLinesInFileInspector
		</configKey>
		<category name="Maintainability" />
		<description>Source file is longer than ${maxLength} lines.</description>
		<param key="maxLength" type="i">
			<description>
        		<![CDATA[The maximum number of lines in a file. Eg-Values: 2000]]>
			</description>
		</param>
	</rule>

	<rule key="Java Inspector 030">
		<name><![CDATA[Java Inspector 030]]></name>
		<configKey>biz.hammurapi.inspectors.java.VariablesInspector
		</configKey>
		<category name="Maintainability" />
		<description>Variables should be declared in individual statements</description>
	</rule>

	<rule key="Java Inspector 031">
		<name><![CDATA[Java Inspector 031]]></name>
		<configKey>biz.hammurapi.inspectors.java.SwitchCaseBreakInspector
		</configKey>
		<category name="Reliability" />
		<description>Switch statement case without 'break'</description>
	</rule>

	<rule key="Java Inspector 032">
		<name><![CDATA[Java Inspector 032]]></name>
		<configKey>biz.hammurapi.inspectors.java.LineLengthInspector
		</configKey>
		<category name="Maintainability" />
		<description>Line is longer than ${maxLength} columns.</description>
		<param key="maxLength" type="i">
			<description>
        		<![CDATA[The maximum number of columns per line. Eg-Values: 80]]>
			</description>
		</param>
	</rule>

	<rule key="Java Inspector 034">
		<name><![CDATA[Java Inspector 034]]></name>
		<configKey>biz.hammurapi.inspectors.java.BooleanEqualityInspector
		</configKey>
		<category name="Maintainability" />
		<description>Avoid equality operations on 'true' and 'false' boolean literals</description>
	</rule>

	<rule key="Java Inspector 035">
		<name><![CDATA[Java Inspector 035]]></name>
		<configKey>biz.hammurapi.inspectors.java.CodeTooLongInspector
		</configKey>
		<category name="Maintainability" />
		<description>Method is too long.</description>
		<param key="maxLength" type="i">
			<description>
        		<![CDATA[The maximum number of columns per month. Eg-Values: 200]]>
			</description>
		</param>
	</rule>

	<rule key="Java Inspector 036">
		<name><![CDATA[Java Inspector 036]]></name>
		<configKey>biz.hammurapi.inspectors.java.UseBigDecimalInsteadOfFloatAndDoubleInspector
		</configKey>
		<category name="Reliability" />
		<description>Use BigDecimal instead of Float or Double for monetary	values</description>
	</rule>

	<rule key="Java Inspector 037">
		<name><![CDATA[Java Inspector 037]]></name>
		<configKey>biz.hammurapi.inspectors.java.PublicStaticArrayFieldsInspector
		</configKey>
		<category name="Maintainability" />
		<description>Avoid using "public static final" array fields</description>
	</rule>

	<rule key="Java Inspector 038">
		<name><![CDATA[Java Inspector 038]]></name>
		<configKey>biz.hammurapi.inspectors.java.InnerClassNestingInspector
		</configKey>
		<category name="Maintainability" />
		<description>Avoid more than ${maxNesting} levels of nested inner classes.</description>
		<param key="maxNesting" type="i">
			<description>
        		<![CDATA[The maximum depth for nesting. Eg-Values: 2]]>
			</description>
		</param>
	</rule>

	<rule key="Java Inspector 039">
		<name><![CDATA[Java Inspector 039]]></name>
		<configKey>biz.hammurapi.inspectors.java.EmptyBodiesInspector
		</configKey>
		<category name="Maintainability" />
		<description>Avoid "for", "do", "while", "if" and "if ... else" statements with empty bodies</description>
	</rule>

	<rule key="Java Inspector 040">
		<name><![CDATA[Java Inspector 040]]></name>
		<configKey>biz.hammurapi.inspectors.java.OperationParameterNamesInspector
		</configKey>
		<category name="Reliability" />
		<description>Avoid using method parameter names that conflict with class member names</description>
	</rule>

	<rule key="Java Inspector 041">
		<name><![CDATA[Java Inspector 041]]></name>
		<configKey>biz.hammurapi.inspectors.java.MethodNameSameAsConstructorInspector
		</configKey>
		<category name="Maintainability" />
		<description>Avoid giving non-constructor methods the same name as the class</description>
	</rule>

	<rule key="Java Inspector 042">
		<name><![CDATA[Java Inspector 042]]></name>
		<configKey>biz.hammurapi.inspectors.java.NotifyInspector
		</configKey>
		<category name="Efficiency" />
		<description>Do not use 'notify ()'; use 'notifyAll ()' instead</description>
	</rule>

	<rule key="Java Inspector 043">
		<name><![CDATA[Java Inspector 043]]></name>
		<configKey>biz.hammurapi.inspectors.java.WaitInLoopInspector
		</configKey>
		<category name="Efficiency" />
		<description>Call 'wait ()' only inside a "while" loop</description>
	</rule>

	<rule key="Java Inspector 044">
		<name><![CDATA[Java Inspector 044]]></name>
		<configKey>biz.hammurapi.inspectors.java.WaitAndNotifyInsteadOfPollingInspector
		</configKey>
		<category name="Efficiency" />
		<description>Use 'wait ()' and 'notifyAll ()' instead of polling loops</description>
	</rule>

	<rule key="Java Inspector 045">
		<name><![CDATA[Java Inspector 045]]></name>
		<configKey>biz.hammurapi.inspectors.java.TooManyThrowsInspector
		</configKey>
		<category name="Maintainability" />
		<description>Too many exceptions (more than ${maxThrows}) listed in throws clause</description>
		<param key="maxThrows" type="i">
			<description>
        		<![CDATA[The maximum number throws allowed in a throws clause. Eg-Values: 3]]>
			</description>
		</param>
	</rule>

	<rule key="Java Inspector 046">
		<name><![CDATA[Java Inspector 046]]></name>
		<configKey>biz.hammurapi.inspectors.java.EmptyStatementsInspector
		</configKey>
		<category name="Maintainability" />
		<description>Empty statements</description>
	</rule>

	<rule key="Java Inspector 047">
		<name><![CDATA[Java Inspector 047]]></name>
		<configKey>biz.hammurapi.inspectors.java.InterfaceMethodModifiersInspector
		</configKey>
		<category name="Maintainability" />
		<description>No need to provide (public, abstract, ) modifiers for interface methods</description>
	</rule>

	<rule key="Java Inspector 048">
		<name><![CDATA[Java Inspector 048]]></name>
		<configKey>biz.hammurapi.inspectors.java.FileHeaderInspector
		</configKey>
		<category name="Maintainability" />
		<description>Copyrights information should be present in each file.</description>
		<param key="copyrights/java.util.HashSet" type="s">
			<description>
        		<![CDATA[Copyright information. Eg-Values: "&lt;element&gt;Copyright (C) 200? My Company&lt;/element&gt;"]]>
			</description>
		</param>
	</rule>

	<rule key="Java Inspector 049">
		<name><![CDATA[Java Inspector 049]]></name>
		<configKey>biz.hammurapi.inspectors.java.UseCollectionsInsteadOfArraysInspector
		</configKey>
		<category name="Maintainability" />
		<description>Use a Collection instead of arrays Object[]</description>
	</rule>

	<rule key="Java Inspector 050">
		<name><![CDATA[Java Inspector 050]]></name>
		<configKey>biz.hammurapi.inspectors.java.VariablesAndMethodsNameClashingInspector
		</configKey>
		<category name="Reliability" />
		<description>Instance variables and method names shouldn't have same name</description>
	</rule>

	<rule key="Java Inspector 051">
		<name><![CDATA[Java Inspector 051]]></name>
		<configKey>biz.hammurapi.inspectors.java.ConstructorWithoutSuperInspector
		</configKey>
		<category name="Maintainability" />
		<description>It is good practice to call in any case super() in a constructor</description>
	</rule>

	<rule key="Java Inspector 052">
		<name><![CDATA[Java Inspector 052]]></name>
		<configKey>biz.hammurapi.inspectors.java.EmptySourceUnitInspector
		</configKey>
		<category name="Maintainability" />
		<description>File doesn't contain classes or interfaces</description>
	</rule>

	<rule key="Java Inspector 053">
		<name><![CDATA[Java Inspector 053]]></name>
		<configKey>biz.hammurapi.inspectors.java.VariableNameClashesWithTypeNameInspector
		</configKey>
		<category name="Reliability" />
		<description>Instance variables and the declaring type shouldn't have same name</description>
	</rule>

	<rule key="Java Inspector 054">
		<name><![CDATA[Java Inspector 054]]></name>
		<configKey>
			biz.hammurapi.inspectors.java.MinimalInstanceVariableLengthInspector
		</configKey>
		<category name="Maintainability" />
		<description>Discourage usage of instance variables like a, j by enforcing minimal variable name length (${minLength}).
		</description>
		<param key="minLength" type="i">
			<description>
        		<![CDATA[Minimum Lenghth of the instance variable. Eg-Values: 3]]>
			</description>
		</param>
	</rule>

	<rule key="Java Inspector 055">
		<name><![CDATA[Java Inspector 055]]></name>
		<configKey>biz.hammurapi.inspectors.java.UseEqualsInsteadOfCompareToInspector
		</configKey>
		<category name="Maintainability" />
		<description>Use object.equals(anotherObject) instead of object.compareTo(anotherObject)==0</description>
	</rule>

	<rule key="Java Inspector 056">
		<name><![CDATA[Java Inspector 056]]></name>
		<configKey>biz.hammurapi.inspectors.java.WaitAndNotifyInspector
		</configKey>
		<category name="Efficiency" />
		<description>Use wait(), notify() and notifyAll() in synchronized method or block</description>
	</rule>

	<rule key="Java Inspector 057">
		<name><![CDATA[Java Inspector 057]]></name>
		<configKey>
			biz.hammurapi.inspectors.java.VendorNameInspector
		</configKey>
		<category name="Maintainability" />
		<description>In outsourcing scenario developing organization typically shall not put its name into source files.</description>
		<param key="vendorName" type="s">
			<description>
        		<![CDATA[The name of the vendor. Eg-Values: Some vendor name]]>
			</description>
		</param>
	</rule>

	<rule key="Java Inspector 058">
		<name><![CDATA[Java Inspector 058]]></name>
		<configKey>biz.hammurapi.inspectors.java.InnerClassVisibilityInspector
		</configKey>
		<category name="Maintainability" />
		<description>Make inner classes "private"</description>
	</rule>

	<rule key="Java Inspector 059">
		<name><![CDATA[Java Inspector 059]]></name>
		<configKey>biz.hammurapi.inspectors.java.SynchronizedInspector
		</configKey>
		<category name="Efficiency" />
		<description>Synchronize at the block level rather than the method level</description>
	</rule>

	<!-- New 5.6.0 inspectors -->

	<rule key="Java Inspector 060">
		<name><![CDATA[Java Inspector 060]]></name>
		<configKey>biz.hammurapi.inspectors.java.AbstractMethodFromConstructorInspector
		</configKey>
		<category name="Maintainability" />
		<description>Do not invoke abstract method from constructor</description>
	</rule>

	<rule key="Java Inspector 061">
		<name><![CDATA[Java Inspector 061]]></name>
		<configKey>biz.hammurapi.inspectors.java.AccessToStaticMembersInspector
		</configKey>
		<category name="Maintainability" />
		<description>Access static members in a static way, using class name instead of instance</description>
	</rule>

	<rule key="Java Inspector 062">
		<name><![CDATA[Java Inspector 062]]></name>
		<configKey>biz.hammurapi.inspectors.java.UnnecessaryCastOrInstanceofInspector
		</configKey>
		<category name="Maintainability" />
		<description>Unnecessary cast or instanceof</description>
	</rule>

	<rule key="Java Inspector 063">
		<name><![CDATA[Java Inspector 063]]></name>
		<configKey>
			biz.hammurapi.inspectors.java.CatchTooGeneralExceptionTypeInspector
		</configKey>
		<category name="Maintainability" />
		<description>Avoid catching too general exception types ${tooGeneralExceptionTypes}.</description>
		<param key="tooGeneralExceptionType" type="s{}">
			<description>
        		<![CDATA[List of Exception types which should be avoided from catching. Eg-Values: java.lang.Exception,java.lang.RuntimeException,java.lang.Throwable,java.lang.Error]]>
			</description>
		</param>
	</rule>

	<rule key="Java Inspector 064">
		<name><![CDATA[Java Inspector 064]]></name>
		<configKey>
			biz.hammurapi.inspectors.java.ThrowTooGeneralExceptionTypeInspector
		</configKey>
		<category name="Maintainability" />
		<description>Do not throw too general exception types ${tooGeneralExceptionTypes}.
			Use module-specific or problem-specific exception types.</description>
		<param key="tooGeneralExceptionType" type="s{}">
			<description>
        		<![CDATA[List of Exception types which should be avoided from throwing. Eg-Values: java.lang.Exception,java.lang.RuntimeException,java.lang.Throwable,java.lang.Error]]>
			</description>
		</param>
	</rule>

	<rule key="Java Inspector 065">
		<name><![CDATA[Java Inspector 065]]></name>
		<configKey>
			biz.hammurapi.inspectors.java.ThrowsClauseInspector
		</configKey>
		<category name="Maintainability" />
		<description>Wrap low-level exceptions. Declare only approved exception
			types ${allowedThrows} in the throws clause.</description>
		<param key="allowedExceptionType" type="s{}">
			<description>
        		<![CDATA[List of allowed exception types. Eg-Values: java.sql.SQLException]]>
			</description>
		</param>
	</rule>

		<rule key="Java Inspector 066">
		<name><![CDATA[Java Inspector 066]]></name>
		<configKey>biz.hammurapi.inspectors.java.ThreadYieldInspector
		</configKey>
		<category name="Efficiency" />
		<description>Avoid invoking Thread.yield()</description>
	</rule>

	<rule key="Java Inspector 067">
		<name><![CDATA[Java Inspector 067]]></name>
		<configKey>biz.hammurapi.inspectors.java.ThreadSubclassesInspector
		</configKey>
		<category name="Efficiency" />
		<description>Give Thread subclasses run() method</description>
	</rule>

	<rule key="Java Inspector 068">
		<name><![CDATA[Java Inspector 068]]></name>
		<configKey>biz.hammurapi.inspectors.java.SystemPrintlnLoggingInspector
		</configKey>
		<category name="Maintainability" />
		<description>Do not use System.out and System.err to output logging messages. Use loggers instead</description>
	</rule>

	<rule key="Java Inspector 069">
		<name><![CDATA[Java Inspector 069]]></name>
		<configKey>biz.hammurapi.inspectors.java.SystemGcMisuseInspector
		</configKey>
		<category name="Reliability" />
		<description>Avoid explicit invocation of System.gc()</description>
	</rule>

	<rule key="Java Inspector 070-A">
		<name><![CDATA[Java Inspector 070-A]]></name>
		<configKey>
			biz.hammurapi.inspectors.java.CyclomaticComplexityInspector
		</configKey>
		<category name="Maintainability" />
		<description>Keep code understandable. Cyclomatic complexity shall be below ${maxComplexity}.</description>
		<param key="maxComplexity" type="i">
			<description>
        		<![CDATA[Maximum Complexity allowed. Eg-Values: 12]]>
			</description>
		</param>
	</rule>

	<rule key="Java Inspector 070-B">
		<name><![CDATA[Java Inspector 070-B]]></name>
		<configKey>
			biz.hammurapi.inspectors.java.CyclomaticComplexityInspector
		</configKey>
		<category name="Maintainability" />
		<description>Keep code understandable. Cyclomatic complexity shall be below ${maxComplexity}.</description>
		<param key="maxComplexity" type="i">
			<description>
        		<![CDATA[Maximum Complexity allowed. Eg-Values: 20]]>
			</description>
		</param>
		<param key="collectMeasurements" type="b">
			<description>
        		<![CDATA[Should the measurements be collected or not. Eg-Values: true or false]]>
			</description>
		</param>
	</rule>

	<rule key="Java Inspector 072">
		<name><![CDATA[Java Inspector 072]]></name>
		<configKey>biz.hammurapi.inspectors.java.DoNotUseNewForStringsInspector
		</configKey>
		<category name="Reliability" />
		<description>Do not construct strings from strings</description>
	</rule>

	<rule key="Java Inspector 073 [java.util.Vector]">
		<name><![CDATA[Java Inspector 073 [java.util.Vector]]]></name>
		<configKey>
			biz.hammurapi.inspectors.java.DoNotUseTypeInspector
		</configKey>
		<category name="Maintainability" />
		<description>Avoid using Vector, use other collection classes.</description>
		<param key="deprecatedType" type="s">
			<description>
        		<![CDATA[The deprecated type. Eg-Values: java.util.Vector]]>
			</description>
		</param>
	</rule>

	<rule key="Java Inspector 073 [java.lang.StringBuffer]">
		<name><![CDATA[Java Inspector 073 [java.lang.StringBuffer]]]></name>
		<configKey>
			biz.hammurapi.inspectors.java.DoNotUseTypeInspector
		</configKey>
		<category name="Maintainability" />
		<description>In Java 5 use StringBuilder instead of StringBuffer if access is single-threaded, e.g. StringBuffer is used as a local variable .</description>
		<param key="deprecatedType" type="s">
			<description>
        		<![CDATA[The deprecated type. Eg-Values: java.lang.StringBuffer]]>
			</description>
		</param>
	</rule>

	<rule key="Java Inspector 074">
		<name><![CDATA[Java Inspector 074]]></name>
		<configKey>
			biz.hammurapi.inspectors.java.DotChainInspector
		</configKey>
		<category name="Maintainability" />
		<description>Avoid long (>${maxChain}) dot chains.</description>
		<param key="maxChain" type="i">
			<description>
        		<![CDATA[The maximum number of dot chains allowed. Eg-Values: 10]]>
			</description>
		</param>
	</rule>

	<rule key="Java Inspector 075">
		<name><![CDATA[Java Inspector 075]]></name>
		<configKey>biz.hammurapi.inspectors.java.ForLoopControlVariablesInspector
		</configKey>
		<category name="Reliability" />
		<description>Do not change value of for loop variable</description>
	</rule>

	<rule key="Java Inspector 076">
		<name><![CDATA[Java Inspector 076]]></name>
		<configKey>biz.hammurapi.inspectors.java.SuperCloneInspector
		</configKey>
		<category name="Reliability" />
		<description>Always invoke super.clone() in clone() method</description>
	</rule>

	<rule key="Java Inspector 077">
		<name><![CDATA[Java Inspector 077]]></name>
		<configKey>biz.hammurapi.inspectors.java.StringLiteralEqualsInspector
		</configKey>
		<category name="Reliability" />
		<description>To reduce probability of NullPointerException, use "string literal".equals(variable) instead of variable.equals("string literal")</description>
	</rule>

	<rule key="Java Inspector 078">
		<name><![CDATA[Java Inspector 078]]></name>
		<configKey>biz.hammurapi.inspectors.java.HidingInheritedFieldsInspector
		</configKey>
		<category name="Reliability" />
		<description>Do not hide inherited fields</description>
	</rule>

	<rule key="Java Inspector 079">
		<name><![CDATA[Java Inspector 079]]></name>
		<configKey>biz.hammurapi.inspectors.java.InvokeFinalizeInspector
		</configKey>
		<category name="Maintainability" />
		<description>Do not invoke finalize() explicitly</description>
	</rule>

	<rule key="Java Inspector 080">
		<name><![CDATA[Java Inspector 080]]></name>
		<configKey>
			biz.hammurapi.inspectors.java.LogicalNestingInspector
		</configKey>
		<category name="Maintainability" />
		<description>Logical nesting is too deep (>${maxNesting}).</description>
		<param key="maxNesting" type="i">
			<description>
        		<![CDATA[The maximum depth for nesting. Eg-Values: 5]]>
			</description>
		</param>
	</rule>

	<rule key="Java Inspector 081">
		<name><![CDATA[Java Inspector 081]]></name>
		<configKey>biz.hammurapi.inspectors.java.StaticCollectionsInspector
		</configKey>
		<category name="Reliability" />
		<description>Avoid static collections, they can grow in size over time</description>
	</rule>

	<rule key="Java Inspector 082">
		<name><![CDATA[Java Inspector 082]]></name>
		<configKey>biz.hammurapi.inspectors.java.RedundantParenthesisInspector
		</configKey>
		<category name="Maintainability" />
		<description>Parenthesis are redundant</description>
	</rule>

	<rule key="Java Inspector 083">
		<name><![CDATA[Java Inspector 083]]></name>
		<configKey>biz.hammurapi.inspectors.java.PrintStackTraceInspector
		</configKey>
		<category name="Efficiency" />
		<description>Do not use printStackTrace() for exception logging</description>
	</rule>

	<rule key="Java Inspector 084">
		<name><![CDATA[Java Inspector 084]]></name>
		<configKey>
			biz.hammurapi.inspectors.java.OperationWithTooGeneralExceptonTypeInThrowsInspector
		</configKey>
		<category name="Maintainability" />
		<description>Do not declare too general exception type ${tooGeneralExceptionTypes} in throws clause.</description>
		<param key="tooGeneralExceptionType" type="s{}">
			<description>
        		<![CDATA[The list of exception types which should not be put in throws clause. Eg-Values: java.lang.Exception,java.lang.RuntimeException,java.lang.Throwable,java.lang.Error]]>
			</description>
		</param>
	</rule>

	<rule key="Java Inspector 085">
		<name><![CDATA[Java Inspector 085]]></name>
		<configKey>biz.hammurapi.inspectors.java.OperationWithRuntimeExceptionInThrowsInspector
		</configKey>
		<category name="Efficiency" />
		<description>Do not declare runtime exceptions in the throws clause</description>
	</rule>

	<rule key="Java Inspector 086">
		<name><![CDATA[Java Inspector 086]]></name>
		<configKey>biz.hammurapi.inspectors.java.ObjectEqualsInspector
		</configKey>
		<category name="Reliability" />
		<description>Use equals() instead of == or != to compare objects</description>
	</rule>

	<rule key="Java Inspector 087">
		<name><![CDATA[Java Inspector 087]]></name>
		<configKey>biz.hammurapi.inspectors.java.ChainExceptionsInspector
		</configKey>
		<category name="Efficiency" />
		<description>Chain exceptions. If exception is thrown from an exception handler (wrapping exceptions), pass the cause exception to the new exception constructor</description>
	</rule>

	<!-- 5.7.0 inspectors -->

	<rule key="Java Inspector 089">
		<name><![CDATA[Java Inspector 089]]></name>
		<configKey>biz.hammurapi.inspectors.java.JavaDocInspector
		</configKey>
		<category name="Maintainability" />
		<description>Inspects correctness of Javadoc comments</description>
	</rule>

	<rule key="Java Inspector 090">
		<name><![CDATA[Java Inspector 090]]></name>
		<configKey>biz.hammurapi.inspectors.java.UnnecessaryElseInspector
		</configKey>
		<category name="Maintainability" />
		<description>Unnecessary else part in if. The main part terminates control flow (return, break, throw, or continue)</description>
	</rule>

	<rule key="Java Inspector 091">
		<name><![CDATA[Java Inspector 091]]></name>
		<configKey>biz.hammurapi.inspectors.java.UnconditionalIfInspector
		</configKey>
		<category name="Maintainability" />
		<description>If condition is always true of false</description>
	</rule>

	<rule key="Java Inspector 092">
		<name><![CDATA[Java Inspector 092]]></name>
		<configKey>biz.hammurapi.inspectors.java.OverrideEqualsAndHashCodeInspector
		</configKey>
		<category name="Reliability" />
		<description>Override both equals() and hashCode(). Overriding of only one of these methods may cause unpredictable behavior of HashXXX collections</description>
	</rule>

	<rule key="Java Inspector 093">
		<name><![CDATA[Java Inspector 093]]></name>
		<configKey>biz.hammurapi.inspectors.java.DoNotUseNewForBooleanInspector
		</configKey>
		<category name="Reliability" />
		<description>Do not instantiate Boolean, use Boolean.TRUE and Boolean.FALSE</description>
	</rule>

	<rule key="Java Inspector 094">
		<name><![CDATA[Java Inspector 094]]></name>
		<configKey>biz.hammurapi.inspectors.java.DoNotConstructBigDecimalFromDecimalLiteralsInspector
		</configKey>
		<category name="Reliability" />
		<description>Do not construct BigDecimal from decimal literals (e.g. 0.1), use string literals (e.g. "0.1") to avoid rounding problems</description>
	</rule>

	<rule key="Java Inspector 095">
		<name><![CDATA[Java Inspector 095]]></name>
		<configKey>biz.hammurapi.inspectors.java.DoNotConstructPredefinedBigDecimalsInspector
		</configKey>
		<category name="Reliability" />
		<description>Do not construct predefined (BigDecimal.ZERO, BigDecimal.ONE, BigDecimal.ZERO) BigDecimals</description>
	</rule>

	<rule key="Java Inspector 096">
		<name><![CDATA[Java Inspector 096]]></name>
		<configKey>
			biz.hammurapi.inspectors.java.UselessOperationOnImmutableInspector
		</configKey>
		<category name="Maintainability" />
		<description>Operations on immutables (String, BigDecimal,
			...) do not change object state but create a new one. Ignoring the
			operation result is an error.</description>
		<param key="immutable" type="s{}">
			<description>
        		<![CDATA[List of Immutable Objects. Eg-Values: java.lang.Object,java.lang.String,java.math.BigDecimal]]>
			</description>
		</param>
	</rule>
</rules>