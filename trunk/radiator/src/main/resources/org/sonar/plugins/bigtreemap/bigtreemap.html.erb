<%
# The 1.1.3 jit script need to be modified with the following code
# line 8138 makes tree map anchors work :
# var from = e.target || e.srcElement;
# if (from instanceof HTMLAnchorElement) {
# 	// event originated form an anchor link, returning
# 	return;
# }
#
# line 7606 (replace jit tip css class name on tip elements by sonar tooltip css class name) :
# tip.className = 'tooltip';
%>
<%= javascript_include_tag 'jit-yc' %>
<style type="text/css">
#bigtreemap {
    position: relative;
    height:600px;
}
#bigtreemap div {
    position:absolute;
    overflow:hidden;
    padding-top: 4px;
    padding-left: 4px;
}
#bigtreemap .content {
    background-color:white;
}
#bigtreemap .head {
    color:white;
    background-color:#444;
}
#bigtreemap .head.in-path {
    background-color:#655;
}
#bigtreemap .body {
    background-color:white;
}
#bigtreemap .leaf {
    color:white;
    display:table-cell;
    vertical-align:middle;
}
#bigtreemap .over-leaf {
    border:1px solid #9FD4FF; 
}
#bigtreemap .over-content {
    background-color: #9FD4FF;
}
#bigtreemap .over-head { /* boy i'm funny! */
    background-color:#A4D9FF;
    color:red;
}
</style>
<%= render :partial => '/project/snapshot_title' %>
<form name="tm_controls" style="padding-top:10px; padding-left:6px;">
	<table>
		<tr>
		    <td>
		      <span class="comments">Size:</span>
		      <%= select_tag 'size_metric', options_from_collection_for_select(
		        Sonar::TreemapBuilder.size_metrics, :key, :short_name, Sonar::TreemapBuilder.default_size_metric.key),
		        :id => 'select_size_metric', :class => 'small',:onchange => "load_treemap(current_resource_key);" %>
		    </td>
		    <td>
		      <span class="comments">Color:</span>
		      <%= select_tag 'color_metric', options_from_collection_for_select(
		          Sonar::TreemapBuilder.color_metrics, :key, :short_name, Sonar::TreemapBuilder.default_color_metric.key),
		          :id => 'select_color_metric', :class => 'small', :onchange => "load_treemap(current_resource_key);" %>
		    </td>
		    <td>
		     	<% layout = (params[:layout].nil? || params[:layout] == 'true') ? false : true
		     	if (!layout) %>
		    	<span style="padding-left:10px"><%= link_to(image_tag('expand_collapse.jpg', :alt => 'Expand'), {:layout => layout.to_s, :page => params[:page]}, :target => '_new') %></span>
		    	<% end %>
		    </td>
		    <td>
				<span style="padding-left:10px"><%= image_tag('loading.gif', {:id => "tm_loading"}) %></span>
			</td>
		</tr>
	</table>
</form>
<div style="padding-top:10px; padding-left:8px;"><span id="breadcrumb" class="nav"></div>
<div id="bigtreemap"></div>
<div id="nodata" style="display:none; vertical-align:top">
<h3>No projects have been analysed.</h3>
<p>If Maven and Sonar are installed with default parameters on the same box, 
	just launch the command <code>mvn sonar:sonar</code> to analyse your first project. In any other case, please refer to the <a href="http://sonar.codehaus.org/documentation">documentation</a>.</p>
</div>

<script language="javascript">

	var treemap = null;
	var all_projects_radiator = <%= @project.nil? ? 'true' : 'false' %>;
	var current_resource_key = null;
	var parent_resource_key = <%= @project.nil? ? 'null' : "'#{@project.key}'" %>;
	var size_metric, color_metric = null;
	var breadcrumbs = [];
	
	var dimensions = $('content').getDimensions();
	$('bigtreemap').style.width=dimensions.width;
	$('bigtreemap').style.height=dimensions.height;
	
	TM.Squarified.implement({  
	       onLeftClick: function(elem) {
	          isFile = Element.readAttribute(elem, 'isFile');
	          if (isFile == 'false') {
	       	  	breadcrumbs[breadcrumbs.length] = Element.readAttribute(elem, 'name');
	          	load_treemap(elem.parentNode.id);
	          } else {
	          	open_resource_viewer(elem.parentNode.id);
	          }
	       },
	       onRightClick: function() {
			 load = (all_projects_radiator && parent_resource_key == null) || parent_resource_key != null;
			 if (load) {
			    breadcrumbs[breadcrumbs.length-1] = null;
			    breadcrumbs = breadcrumbs.compact();
	         	load_treemap(parent_resource_key);
	         }
	       },
	       leafBox: function(json, coord) {
				var config = this.config;
				var backgroundColor = config.Color.allow && this.setColor(json), 
				offst = config.offset,
				width = coord.width - offst,
				height = coord.height - offst;
				var c = {
				  'top':   (offst / 2)  + "px",
				  'height':height + "px",
				  'width': width + "px",
				  'left': (offst / 2) + "px",
				  'cursor': 'pointer'
				};
				if(backgroundColor) c['background-color'] = backgroundColor;
				div_content = "<div isFile=\"" + json.is_file + "\" name=\"" + json.name + "\" class=\"leaf\" style=\"" + this.toStyle(c) + "\">";
				div_content += json.is_file ? json.name : "<a href=\"" + dashboard_url(json.id) + "\">" + json.name + "</a>";
				return div_content + "</div>";
            },
            headBox: function(json, coord) {
            	return "<div></div>";
            },
            setColor: function(json) {
              return json.data.$color;
            }
		});
		
	function dashboard_url(resource_key) {
		return '<%=ApplicationController.root_context-%>/project/index/' + resource_key;
	}
	
	function open_resource_viewer(resource_key) {
	    href='<%=ApplicationController.root_context-%>/resource/index/' + resource_key;
	    window.open(href,'resource','height=800,width=900,scrollbars=1,resizable=1');
	}
 
	function instanciate_treemap(color_metric_direction) {
	
		return new TM.Squarified({  
		     rootId: 'bigtreemap',  
		     titleHeight: 1,
		     offset: 8,
		     addLeftClickHandler: true,  
		     addRightClickHandler: true,
		     selectPathOnHover: true,  
		               
		     Color: {  
		         allow: true
		     },  
		       
		     //Allow tips  
		     Tips: {  
		       allow: true,  
		       offsetX: 20,  
		       offsetY: 20,  
		       onShow: function(tip, node, isLeaf, domElement) {  
		           tip.innerHTML = "<div class=\"title\">" + node.name + "</div>" +   
		             "<div class=\"content\">" + this.makeHTMLFromData(node.data) + "</div>";   
		       },
		       makeHTMLFromData: function(data){  
		           var html = '<table><tr><td align=left>' + size_metric + '</td><td align=right><b>' + data.size_frmt + 
		           '</b></td></tr><tr><td align=left>' + color_metric + '</td><td align=right><b>' +data.color_frmt + '</b></td></tr></table>';
		           return html;  
		       }
		     },
		   
		     onDestroyElement: function(content, tree, isLeaf, leaf){  
		         if(leaf.clearAttributes) leaf.clearAttributes();  
		     },
		     
		     onLeftClick: function() {  
				alert('onleft');
             }  
	 	}); 
    }
    
    function display_breadcrumbs() {
      var output = "";
      breadcrumbs.each(function(bc) { output += "&nbsp;&#187;&nbsp;" + bc });
	  $('breadcrumb').innerHTML=output;
	}

	function load_treemap(resource_key) {
	    if (treemap != null) {
	    	treemap.empty();
	    	treemap = null;
	    }
	    $('tm_loading').show();

	    url = '<%=ApplicationController.root_context-%>/api/plugins/RubyBigTreemapWebService';
	    current_resource_key = resource_key;
	    url += resource_key != null ? '?resource=' + resource_key + '&' : '?';
		new Ajax.Request(url + 'size=' + $F('select_size_metric') + '&color=' + $F('select_color_metric') + '&callback=treemap_ajax_cb',
		  {
		    method: 'get',
		    requestHeaders: {Accept: 'application/json'},
		    onSuccess: function(transport) {
		      eval(transport.responseText);
		    },
		    onFailure: function(response){ error(response.responseText) }
		  });
	}
	
	function treemap_ajax_cb(json) {
		$('tm_loading').hide();
		if (current_resource_key==null &&json.children.length==0) {
			$('bigtreemap').hide();
			$('select_color_metric').disable();
			$('select_size_metric').disable();
			$('nodata').show();
		} else {
			render_treemap(json);
		}
	}
	
	function render_treemap(json) {
		treemap = instanciate_treemap(json['color_metric_direction']);
		parent_resource_key = json['parent'];
		size_metric = json['size_metric'];
		color_metric = json['color_metric'];
		display_breadcrumbs();
		treemap.loadJSON(json);
	}
	load_treemap(<%= @project.nil? ? 'null' : "'#{@project.key}'" %>);
</script>