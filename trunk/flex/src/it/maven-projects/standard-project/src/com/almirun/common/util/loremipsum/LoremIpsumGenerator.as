package com.almirun.common.util.loremipsum {
	import flash.events.Event;
	import flash.events.EventDispatcher;
	import flash.events.HTTPStatusEvent;
	import flash.events.IOErrorEvent;
	import flash.net.URLLoader;
	import flash.net.URLRequest;
	
	import com.almirun.common.events.LoremIpsumEvent;

	/**
	 * LoremIpsum generates Lorem Ipsum paragraphs. This class uses lorem ipsum
	 * REST interface in http://www.lipsum.com 
	 */
	public class LoremIpsumGenerator extends EventDispatcher {
		
		private static const LOREM_IPSUM_URL:String
			= "http://www.lipsum.com/feed/xml";

		/**
		 * Whether or not to start with "Lorem ipsum".
		 */
		private var _startWithLoremIpsum:Boolean = true;
		public function get startWithLoremIpsum():Boolean {
			return _startWithLoremIpsum;
		}
		public function set startWithLoremIpsum(value:Boolean):void {
			_startWithLoremIpsum = value;
		}
		
		private var _generatedParagraphs:int;
		/**
		 * Number of paragraphs generated in the last call to getParagraphs(),
		 * getBytes() or getWords() method.
		 * 
		 * @return Number of generated paragraphs.
		 */
		public function get generatedParagraphs():int {
			return _generatedParagraphs;
		}
		
		private var _generatedWords:int;
		/**
		 * Return number of words generated in the last call to getParagraphs(),
		 * getBytes() or getWords() method.
		 * 
		 * @return Number of generated words.
		 */
		public function get generatedWords():int {
			return _generatedWords;
		}
		
		private var _generatedBytes:int;
		/**
		 * Number of bytes generated in the last call to getParagraphs(),
		 * getBytes() or getWords() method.
		 * 
		 * @return Number of generated bytes.
		 */
		public function get generatedBytes():int {
			return _generatedBytes;
		}
		
		private var cache:Array;
		
		public function LoremIpsumGenerator() {
			cache = [];
		}
		
		/**
		 * Get Lorem Ipsum paragraphs.
		 * 
		 * @param howMany	Number of lorem ipsum paragraphs.
		 * @return Array of lorem ipsum paragraphs.
		*/
		public function getParagraphs(howMany:int):Array {
			return getLoremIpsum("paras", howMany);
		}

		/**
		 * Get Lorem Ipsum words.
		 * 
		 * @param howMany	Number of lorem ipsum words.
		 * @return Array of lorem ipsum words.
		*/
		public function getWords(howMany:int):Array {
			return getLoremIpsum("words", howMany);
		}
		
		/**
		 * Get Lorem Ipsum bytes.
		 * 
		 * @param numberOfBytes
		 *          Number of lorem ipsum bytes.
 		 * @return Array of lorem ipsum paragraphs that contain lorem ipsum words.
		*/
		public function getBytes(howMany:int):Array {
			return getLoremIpsum("bytes", howMany);
		}
		
		private function getCached(type:String, howMany:int):Array {
			return cache[type + howMany];
		}
		
		private function putCached(data:Array, type:String, howMany:int):void {
			cache[type + howMany] = data;
		}

		private function getLoremIpsum(type:String, howMany:int):Array {
			var chunks:Array;
			
			// retrieve from cache
			chunks = getCached(type, howMany);
			
			if (null == chunks) {
				loadLoremIpsumString(type, howMany);
			}
			
			return chunks;
		}

		private function getUrl(type:String, howMany:int):String {
			var start:String = startWithLoremIpsum ? "yes" : "no";
			var sb:String = LOREM_IPSUM_URL;
			sb += "?amount=" + howMany;
			sb += "&what=" + type;
			sb += "&start=" + start;
			return sb;
		}
		
		private function getParagraphsFromFragment(fragment:String):Array {
			return fragment.split("\n");
		}
  		
  		private function loadLoremIpsumString(type:String, howMany:int):void {
  			var url:String = getUrl(type, howMany);
  			var req:URLRequest = new URLRequest(url);
  			var loader:URLLoader = new LoremIpsumUrlLoader(req, type, howMany);
  			loader.addEventListener(Event.COMPLETE, handleLoaderCompleteEvent);
  			loader.addEventListener(IOErrorEvent.IO_ERROR,
  				handleLoaderIOErrorEvent);
  			loader.addEventListener(HTTPStatusEvent.HTTP_STATUS,
  				handleLoaderHttpStatusEvent);
		}
		
		private function handleLoaderHttpStatusEvent(
				event:HTTPStatusEvent):void {
			// check HTTP status code
		}

		private function handleLoaderIOErrorEvent(event:IOErrorEvent) : void {
			// spaz out
		}

		private function handleLoaderCompleteEvent(event:Event):void {
			var loader:LoremIpsumUrlLoader =
				event.target as LoremIpsumUrlLoader;
  			var doc:XML = XML(loader.data);
  			var fragment:String = doc.lipsum;
			var paragraphs:Array = getParagraphsFromFragment(fragment);
			putCached(paragraphs, loader.loremType, loader.loremQty);
  			var generated:Array = doc.generated.split(" ");
  			var k:int = 0;
  			var value:int;
  			
  			for (var i:int = 0; i < generated.length; i++) {
  				value = parseInt(generated[i]);
  				
  				if (!isNaN(value)) {
  					switch(k) {
  					case 0:
  						_generatedParagraphs = value;
  						k++;
  						break;
  					
  					case 1:
  						_generatedWords = value;
  						k++;
  						break;
  					
  					case 2:
  						_generatedBytes = value;
  						k++;
  						break;
  					}
  				}
  			}
  			
  			var eventType:String;
  			
  			switch (loader.loremType) {
  			case "paras":
  				eventType = LoremIpsumEvent.PARAGRAPHS_LOADED;
  				break;
  			
  			case "words":
  				eventType = LoremIpsumEvent.WORDS_LOADED;
  				break;
  			
  			case "bytes":
  				eventType = LoremIpsumEvent.BYTES_LOADED;
  				break;
  			}
  			
  			dispatchEvent(new LoremIpsumEvent(eventType,
  				paragraphs, loader.loremQty));
  		}
	}
}
