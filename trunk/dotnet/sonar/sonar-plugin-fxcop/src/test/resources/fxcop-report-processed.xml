<?xml version="1.0" encoding="UTF-8"?><issues>
<issue>
<key>AvoidNamespacesWithFewTypes</key>
<message>Consider merging the types defined in 'Example.Core.Model' with another namespace.</message>
<level>Warning</level>
<assembly-name/>
<path/>
<name/>
<line/>
</issue>
<issue>
<key>AssembliesShouldHaveValidStrongNames</key>
<message>Sign 'Example.Application.exe' with a strong name key.</message>
<level>CriticalError</level>
<assembly-name>example.application.exe</assembly-name>
<path/>
<name/>
<line/>
</issue>
<issue>
<key>AssembliesShouldHaveValidStrongNames</key>
<message>Sign 'Example.Core.dll' with a strong name key.</message>
<level>CriticalError</level>
<assembly-name>example.core.dll</assembly-name>
<path/>
<name/>
<line/>
</issue>
<issue>
<key>CompoundWordsShouldBeCasedCorrectly</key>
<message>The compound word 'MoneyBag' in member name 'GoodMoney.AddMoneyBag(MoneyBag)' exists as a discrete term. If your usage is intended to be single word, case it as 'Moneybag' or strip the first token entirely if it represents any sort of Hungarian notation.</message>
<level>Error</level>
<assembly-name>example.core.dll</assembly-name>
<path>target/test-classes/solution/Example/Example.Core</path>
<name>Money.cs</name>
<line>301</line>
</issue>
<issue>
<key>DoNotCastUnnecessarily</key>
<message>'anObject', a parameter, is cast to type 'IMoney' multiple times in method 'GoodMoney.Equals(object)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.</message>
<level>Warning</level>
<assembly-name>example.core.dll</assembly-name>
<path>target/test-classes/solution/Example/Example.Core</path>
<name>Money.cs</name>
<line>321</line>
</issue>
<issue>
<key>DoNotCastUnnecessarily</key>
<message>'anObject', a parameter, is cast to type 'Money' multiple times in method 'GoodMoney.Equals(object)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.</message>
<level>Warning</level>
<assembly-name>example.core.dll</assembly-name>
<path>target/test-classes/solution/Example/Example.Core</path>
<name>Money.cs</name>
<line>324</line>
</issue>
<issue>
<key>CompoundWordsShouldBeCasedCorrectly</key>
<message>The compound word 'MoneyBag' in member name 'IMoney.AddMoneyBag(MoneyBag)' exists as a discrete term. If your usage is intended to be single word, case it as 'Moneybag' or strip the first token entirely if it represents any sort of Hungarian notation.</message>
<level>Error</level>
<assembly-name>example.core.dll</assembly-name>
<path/>
<name/>
<line/>
</issue>
<issue>
<key>DoNotCastUnnecessarily</key>
<message>'anObject', a parameter, is cast to type 'IMoney' multiple times in method 'Money.AltEquals(object)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.</message>
<level>Warning</level>
<assembly-name>example.core.dll</assembly-name>
<path>target/test-classes/solution/Example/Example.Core</path>
<name>Money.cs</name>
<line>151</line>
</issue>
<issue>
<key>DoNotCastUnnecessarily</key>
<message>'anObject', a parameter, is cast to type 'Money' multiple times in method 'Money.AltEquals(object)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.</message>
<level>Warning</level>
<assembly-name>example.core.dll</assembly-name>
<path>target/test-classes/solution/Example/Example.Core</path>
<name>Money.cs</name>
<line>154</line>
</issue>
<issue>
<key>IdentifiersShouldNotContainTypeNames</key>
<message>In member 'Money.AltEquals(object)', consider replacing the data type identifier 'Object' in parameter name 'anObject' with a more generic term, such as 'value'.</message>
<level>Error</level>
<assembly-name>example.core.dll</assembly-name>
<path>target/test-classes/solution/Example/Example.Core</path>
<name>Money.cs</name>
<line>146</line>
</issue>
<issue>
<key>DoNotCastUnnecessarily</key>
<message>'anObject', a parameter, is cast to type 'IMoney' multiple times in method 'Money.Equals(object)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.</message>
<level>Warning</level>
<assembly-name>example.core.dll</assembly-name>
<path>target/test-classes/solution/Example/Example.Core</path>
<name>Money.cs</name>
<line>84</line>
</issue>
<issue>
<key>DoNotCastUnnecessarily</key>
<message>'anObject', a parameter, is cast to type 'Money' multiple times in method 'Money.Equals(object)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.</message>
<level>Warning</level>
<assembly-name>example.core.dll</assembly-name>
<path>target/test-classes/solution/Example/Example.Core</path>
<name>Money.cs</name>
<line>87</line>
</issue>
<issue>
<key>ParameterNamesShouldMatchBaseDeclaration</key>
<message>In member 'Money.Equals(object)', change parameter name 'anObject' to 'obj' in order to match the identifier as it has been declared in 'object.Equals(object)'.</message>
<level>Error</level>
<assembly-name>example.core.dll</assembly-name>
<path>target/test-classes/solution/Example/Example.Core</path>
<name>Money.cs</name>
<line>79</line>
</issue>
<issue>
<key>DoNotCastUnnecessarily</key>
<message>'anObject', a parameter, is cast to type 'IMoney' multiple times in method 'Money.TataEquals(object)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.</message>
<level>Warning</level>
<assembly-name>example.core.dll</assembly-name>
<path>target/test-classes/solution/Example/Example.Core</path>
<name>Money.cs</name>
<line>119</line>
</issue>
<issue>
<key>DoNotCastUnnecessarily</key>
<message>'anObject', a parameter, is cast to type 'Money' multiple times in method 'Money.TataEquals(object)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.</message>
<level>Warning</level>
<assembly-name>example.core.dll</assembly-name>
<path>target/test-classes/solution/Example/Example.Core</path>
<name>Money.cs</name>
<line>122</line>
</issue>
<issue>
<key>IdentifiersShouldNotContainTypeNames</key>
<message>In member 'Money.TataEquals(object)', consider replacing the data type identifier 'Object' in parameter name 'anObject' with a more generic term, such as 'value'.</message>
<level>Error</level>
<assembly-name>example.core.dll</assembly-name>
<path>target/test-classes/solution/Example/Example.Core</path>
<name>Money.cs</name>
<line>114</line>
</issue>
<issue>
<key>DoNotCastUnnecessarily</key>
<message>'anObject', a parameter, is cast to type 'IMoney' multiple times in method 'Money.TotoEquals(object)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.</message>
<level>Warning</level>
<assembly-name>example.core.dll</assembly-name>
<path>target/test-classes/solution/Example/Example.Core</path>
<name>Money.cs</name>
<line>103</line>
</issue>
<issue>
<key>DoNotCastUnnecessarily</key>
<message>'anObject', a parameter, is cast to type 'Money' multiple times in method 'Money.TotoEquals(object)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.</message>
<level>Warning</level>
<assembly-name>example.core.dll</assembly-name>
<path>target/test-classes/solution/Example/Example.Core</path>
<name>Money.cs</name>
<line>106</line>
</issue>
<issue>
<key>IdentifiersShouldNotContainTypeNames</key>
<message>In member 'Money.TotoEquals(object)', consider replacing the data type identifier 'Object' in parameter name 'anObject' with a more generic term, such as 'value'.</message>
<level>Error</level>
<assembly-name>example.core.dll</assembly-name>
<path>target/test-classes/solution/Example/Example.Core</path>
<name>Money.cs</name>
<line>95</line>
</issue>
<issue>
<key>DoNotCastUnnecessarily</key>
<message>'anObject', a parameter, is cast to type 'IMoney' multiple times in method 'Money.TutuEquals(object)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.</message>
<level>Warning</level>
<assembly-name>example.core.dll</assembly-name>
<path>target/test-classes/solution/Example/Example.Core</path>
<name>Money.cs</name>
<line>135</line>
</issue>
<issue>
<key>DoNotCastUnnecessarily</key>
<message>'anObject', a parameter, is cast to type 'Money' multiple times in method 'Money.TutuEquals(object)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.</message>
<level>Warning</level>
<assembly-name>example.core.dll</assembly-name>
<path>target/test-classes/solution/Example/Example.Core</path>
<name>Money.cs</name>
<line>138</line>
</issue>
<issue>
<key>IdentifiersShouldNotContainTypeNames</key>
<message>In member 'Money.TutuEquals(object)', consider replacing the data type identifier 'Object' in parameter name 'anObject' with a more generic term, such as 'value'.</message>
<level>Error</level>
<assembly-name>example.core.dll</assembly-name>
<path>target/test-classes/solution/Example/Example.Core</path>
<name>Money.cs</name>
<line>130</line>
</issue>
<issue>
<key>CompoundWordsShouldBeCasedCorrectly</key>
<message>The compound word 'MoneyBag' in type name 'MoneyBag' exists as a discrete term. If your usage is intended to be single word, case it as 'Moneybag'.</message>
<level>Error</level>
<assembly-name>example.core.dll</assembly-name>
<path/>
<name/>
<line/>
</issue>
<issue>
<key>DoNotCastUnnecessarily</key>
<message>'anObject', a parameter, is cast to type 'IMoney' multiple times in method 'MoneyBag.Equals(object)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.</message>
<level>Warning</level>
<assembly-name>example.core.dll</assembly-name>
<path>target/test-classes/solution/Example/Example.Core</path>
<name>MoneyBag.cs</name>
<line>116</line>
</issue>
<issue>
<key>DoNotCastUnnecessarily</key>
<message>'anObject', a parameter, is cast to type 'MoneyBag' multiple times in method 'MoneyBag.Equals(object)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.</message>
<level>Warning</level>
<assembly-name>example.core.dll</assembly-name>
<path>target/test-classes/solution/Example/Example.Core</path>
<name>MoneyBag.cs</name>
<line>120</line>
</issue>
<issue>
<key>ParameterNamesShouldMatchBaseDeclaration</key>
<message>In member 'MoneyBag.Equals(object)', change parameter name 'anObject' to 'obj' in order to match the identifier as it has been declared in 'object.Equals(object)'.</message>
<level>Error</level>
<assembly-name>example.core.dll</assembly-name>
<path>target/test-classes/solution/Example/Example.Core</path>
<name>MoneyBag.cs</name>
<line>113</line>
</issue>
<issue>
<key>CompoundWordsShouldBeCasedCorrectly</key>
<message>The compound word 'SubType' in type name 'SubType' exists as a discrete term. If your usage is intended to be single word, case it as 'Subtype'.</message>
<level>Error</level>
<assembly-name>example.core.dll</assembly-name>
<path/>
<name/>
<line/>
</issue>
</issues>
