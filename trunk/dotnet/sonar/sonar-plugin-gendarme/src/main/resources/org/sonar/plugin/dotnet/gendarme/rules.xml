<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<!--

    Maven and Sonar plugin for .Net
    Copyright (C) 2010 Jose Chillan and Alexandre Victoor
    mailto: jose.chillan@codehaus.org or alexvictoor@codehaus.org

    Sonar is free software; you can redistribute it and/or
    modify it under the terms of the GNU Lesser General Public
    License as published by the Free Software Foundation; either
    version 3 of the License, or (at your option) any later version.

    Sonar is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public
    License along with Sonar; if not, write to the Free Software
    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02

-->

<rules>
    
    <rule key="AvoidCodeDuplicatedInSameClassRule">
        <name>AvoidCodeDuplicatedInSameClassRule</name>
        <configKey>AvoidCodeDuplicatedInSameClassRule@Gendarme.Rules.Smells.dll</configKey>
        <category name="Maintainability"/>
        <description>AvoidCodeDuplicatedInSameClassRule</description>
    </rule>
    
    <rule key="AvoidCodeDuplicatedInSiblingClassesRule">
        <name>AvoidCodeDuplicatedInSiblingClassesRule</name>
        <configKey>AvoidCodeDuplicatedInSiblingClassesRule@Gendarme.Rules.Smells.dll</configKey>
        <category name="Maintainability"/>
        <description>AvoidCodeDuplicatedInSiblingClassesRule</description>
    </rule>
    
    <rule key="AvoidLargeClassesRule">
        <name>AvoidLargeClassesRule</name>
        <configKey>AvoidLargeClassesRule@Gendarme.Rules.Smells.dll</configKey>
        <category name="Maintainability"/>
        <description>AvoidLargeClassesRule</description>
    </rule>
    
    <rule key="AvoidLongMethodsRule">
        <name>AvoidLongMethodsRule</name>
        <configKey>AvoidLongMethodsRule@Gendarme.Rules.Smells.dll</configKey>
        <category name="Maintainability"/>
        <description>AvoidLongMethodsRule</description>
    </rule>
    
    <rule key="AvoidLongParameterListsRule">
        <name>AvoidLongParameterListsRule</name>
        <configKey>AvoidLongParameterListsRule@Gendarme.Rules.Smells.dll</configKey>
        <category name="Maintainability"/>
        <description>AvoidLongParameterListsRule</description>
    </rule>
    
    
    <rule key="AttributeStringLiteralsShouldParseCorrectlyRule">
        <name>AttributeStringLiteralsShouldParseCorrectlyRule</name>
        <configKey>AttributeStringLiteralsShouldParseCorrectlyRule@Gendarme.Rules.Correctness.dll</configKey>
        <category name="Maintainability"/>
        <description>As attributes are used at compile time, only constants can be passed to constructors. This can lead to runtime errors for things like malformed URI strings.</description>
    </rule>
    
    <rule key="AvoidConstructorsInStaticTypesRule">
        <name>AvoidConstructorsInStaticTypesRule</name>
        <configKey>AvoidConstructorsInStaticTypesRule@Gendarme.Rules.Correctness.dll</configKey>
        <category name="Maintainability"/>
        <description>This rule checks for types that contain only static members and fires if the type contains a visible instance constructor. This was a common mistake in the 1.x framework because C# adds a default, public, constructor if no other constructors are provided. Code using the framework 2.0 (and later) should change this type, if possible, into a static type.</description>
    </rule>
    
    <rule key="AvoidFloatingPointEqualityRule">
        <name>AvoidFloatingPointEqualityRule</name>
        <configKey>AvoidFloatingPointEqualityRule@Gendarme.Rules.Correctness.dll</configKey>
        <category name="Maintainability"/>
        <description>In general floating point numbers cannot be usefully compared using the equality and inequality operators. This is because floating point numbers are inexact and most floating point operations introduce errors which can accumulate if multiple operations are performed. This rule will fire if [in]equality comparisons are used with Single or Double types. In general such comparisons should be done with some sort of epsilon test instead of a simple compare</description>
    </rule>
    
    
</rules>