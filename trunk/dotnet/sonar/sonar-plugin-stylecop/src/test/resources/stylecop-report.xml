<?xml version="1.0" standalone="yes"?>
<!--

    Maven and Sonar plugin for .Net
    Copyright (C) 2010 Jose Chillan and Alexandre Victoor
    mailto: jose.chillan@codehaus.org or alexvictoor@codehaus.org

    Sonar is free software; you can redistribute it and/or
    modify it under the terms of the GNU Lesser General Public
    License as published by the Free Software Foundation; either
    version 3 of the License, or (at your option) any later version.

    Sonar is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public
    License along with Sonar; if not, write to the Free Software
    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02

-->

<StyleCopReport xmlns="http://stylecopcmd.sourceforge.net/StyleCopReport.xsd">
  <Solutions>
    <ID>0</ID>
    <Location>C:\Work\CodeQuality\Temp\Example\Example.sln</Location>
    <Name>Example</Name>
    <Projects>
      <ID>0</ID>
      <Location>C:\Work\CodeQuality\Temp\Example\Example.Application\Example.Application.csproj</Location>
      <Name>Example.Application</Name>
      <SolutionID>0</SolutionID>
      <SourceCodeFiles>
        <ID>0</ID>
        <Path>C:\Work\CodeQuality\Temp\Example\Example.Application\Program.cs</Path>
        <TimeStamp>2009-04-30T10:11:52.5261461+02:00</TimeStamp>
        <Type>CS</Type>
        <Name>Program.cs</Name>
        <CodeProjectID>0</CodeProjectID>
        <Violations>
          <ID>1</ID>
          <Line>9</Line>
          <Message>The class must have a documentation header.</Message>
          <SourceCodeFileID>0</SourceCodeFileID>
          <SourceCodeLine>  class Program</SourceCodeLine>
          <Rules>
            <CheckId>SA1600</CheckId>
            <Description>Validates that an element contains a properly formatted documentation header.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ElementsMustBeDocumented</Name>
            <Namespace>Microsoft.StyleCop.CSharp.DocumentationRules</Namespace>
            <RuleGroup>Element Documentation</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>1</ViolationID>
            <ID>1</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>2</ID>
          <Line>11</Line>
          <Message>The method must have a documentation header.</Message>
          <SourceCodeFileID>0</SourceCodeFileID>
          <SourceCodeLine>    static void Main(string[] args)</SourceCodeLine>
          <Rules>
            <CheckId>SA1600</CheckId>
            <Description>Validates that an element contains a properly formatted documentation header.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ElementsMustBeDocumented</Name>
            <Namespace>Microsoft.StyleCop.CSharp.DocumentationRules</Namespace>
            <RuleGroup>Element Documentation</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>2</ViolationID>
            <ID>2</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>3</ID>
          <Line>1</Line>
          <Message>The file has no header, the header Xml is invalid, or the header is not located at the top of the file.</Message>
          <SourceCodeFileID>0</SourceCodeFileID>
          <SourceCodeLine>using System;</SourceCodeLine>
          <Rules>
            <CheckId>SA1633</CheckId>
            <Description>Validates that a file contains a properly formatted file header.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>FileMustHaveHeader</Name>
            <Namespace>Microsoft.StyleCop.CSharp.DocumentationRules</Namespace>
            <RuleGroup>File Headers</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>3</ViolationID>
            <ID>3</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>4</ID>
          <Line>9</Line>
          <Message>The class must have an access modifier.</Message>
          <SourceCodeFileID>0</SourceCodeFileID>
          <SourceCodeLine>  class Program</SourceCodeLine>
          <Rules>
            <CheckId>SA1400</CheckId>
            <Description>Validates that an access modifier is declared for an element.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>AccessModifierMustBeDeclared</Name>
            <Namespace>Microsoft.StyleCop.CSharp.MaintainabilityRules</Namespace>
            <RuleGroup>Access Modifiers</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>4</ViolationID>
            <ID>4</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>5</ID>
          <Line>11</Line>
          <Message>The method must have an access modifier.</Message>
          <SourceCodeFileID>0</SourceCodeFileID>
          <SourceCodeLine>    static void Main(string[] args)</SourceCodeLine>
          <Rules>
            <CheckId>SA1400</CheckId>
            <Description>Validates that an access modifier is declared for an element.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>AccessModifierMustBeDeclared</Name>
            <Namespace>Microsoft.StyleCop.CSharp.MaintainabilityRules</Namespace>
            <RuleGroup>Access Modifiers</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>5</ViolationID>
            <ID>5</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>6</ID>
          <Line>1</Line>
          <Message>All using directives must be placed inside of the namespace.</Message>
          <SourceCodeFileID>0</SourceCodeFileID>
          <SourceCodeLine>using System;</SourceCodeLine>
          <Rules>
            <CheckId>SA1200</CheckId>
            <Description>Validates that all using directives are placed within a namespace, if a namespace exists in the file.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>UsingDirectivesMustBePlacedWithinNamespace</Name>
            <Namespace>Microsoft.StyleCop.CSharp.OrderingRules</Namespace>
            <RuleGroup>Element Order</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>6</ViolationID>
            <ID>6</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>7</ID>
          <Line>2</Line>
          <Message>All using directives must be placed inside of the namespace.</Message>
          <SourceCodeFileID>0</SourceCodeFileID>
          <SourceCodeLine>using System.Collections.Generic;</SourceCodeLine>
          <Rules>
            <CheckId>SA1200</CheckId>
            <Description>Validates that all using directives are placed within a namespace, if a namespace exists in the file.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>UsingDirectivesMustBePlacedWithinNamespace</Name>
            <Namespace>Microsoft.StyleCop.CSharp.OrderingRules</Namespace>
            <RuleGroup>Element Order</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>7</ViolationID>
            <ID>7</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>8</ID>
          <Line>3</Line>
          <Message>All using directives must be placed inside of the namespace.</Message>
          <SourceCodeFileID>0</SourceCodeFileID>
          <SourceCodeLine>using System.Linq;</SourceCodeLine>
          <Rules>
            <CheckId>SA1200</CheckId>
            <Description>Validates that all using directives are placed within a namespace, if a namespace exists in the file.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>UsingDirectivesMustBePlacedWithinNamespace</Name>
            <Namespace>Microsoft.StyleCop.CSharp.OrderingRules</Namespace>
            <RuleGroup>Element Order</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>8</ViolationID>
            <ID>8</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>9</ID>
          <Line>4</Line>
          <Message>All using directives must be placed inside of the namespace.</Message>
          <SourceCodeFileID>0</SourceCodeFileID>
          <SourceCodeLine>using System.Text;</SourceCodeLine>
          <Rules>
            <CheckId>SA1200</CheckId>
            <Description>Validates that all using directives are placed within a namespace, if a namespace exists in the file.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>UsingDirectivesMustBePlacedWithinNamespace</Name>
            <Namespace>Microsoft.StyleCop.CSharp.OrderingRules</Namespace>
            <RuleGroup>Element Order</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>9</ViolationID>
            <ID>9</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>10</ID>
          <Line>5</Line>
          <Message>All using directives must be placed inside of the namespace.</Message>
          <SourceCodeFileID>0</SourceCodeFileID>
          <SourceCodeLine>using Example.Core;</SourceCodeLine>
          <Rules>
            <CheckId>SA1200</CheckId>
            <Description>Validates that all using directives are placed within a namespace, if a namespace exists in the file.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>UsingDirectivesMustBePlacedWithinNamespace</Name>
            <Namespace>Microsoft.StyleCop.CSharp.OrderingRules</Namespace>
            <RuleGroup>Element Order</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>10</ViolationID>
            <ID>10</ID>
          </Rules>
        </Violations>
      </SourceCodeFiles>
      <SourceCodeFiles>
        <ID>1</ID>
        <Path>C:\Work\CodeQuality\Temp\Example\Example.Application\Properties\AssemblyInfo.cs</Path>
        <TimeStamp>2009-04-30T09:53:00.7951893+02:00</TimeStamp>
        <Type>CS</Type>
        <Name>AssemblyInfo.cs</Name>
        <CodeProjectID>0</CodeProjectID>
        <Violations>
          <ID>0</ID>
          <Line>1</Line>
          <Message>The file has no header, the header Xml is invalid, or the header is not located at the top of the file.</Message>
          <SourceCodeFileID>1</SourceCodeFileID>
          <SourceCodeLine>using System.Reflection;</SourceCodeLine>
          <Rules>
            <CheckId>SA1633</CheckId>
            <Description>Validates that a file contains a properly formatted file header.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>FileMustHaveHeader</Name>
            <Namespace>Microsoft.StyleCop.CSharp.DocumentationRules</Namespace>
            <RuleGroup>File Headers</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>0</ViolationID>
            <ID>0</ID>
          </Rules>
        </Violations>
      </SourceCodeFiles>
    </Projects>
    <Projects>
      <ID>1</ID>
      <Location>C:\Work\CodeQuality\Temp\Example\Example.Core\Example.Core.csproj</Location>
      <Name>Example.Core</Name>
      <SolutionID>0</SolutionID>
      <SourceCodeFiles>
        <ID>2</ID>
        <Path>C:\Work\CodeQuality\Temp\Example\Example.Core\IMoney.cs</Path>
        <TimeStamp>2009-04-30T09:47:26.1104629+02:00</TimeStamp>
        <Type>CS</Type>
        <Name>IMoney.cs</Name>
        <CodeProjectID>1</CodeProjectID>
        <Violations>
          <ID>11</ID>
          <Line>8</Line>
          <Message>The interface must have a documentation header.</Message>
          <SourceCodeFileID>2</SourceCodeFileID>
          <SourceCodeLine>  public interface IMoney</SourceCodeLine>
          <Rules>
            <CheckId>SA1600</CheckId>
            <Description>Validates that an element contains a properly formatted documentation header.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ElementsMustBeDocumented</Name>
            <Namespace>Microsoft.StyleCop.CSharp.DocumentationRules</Namespace>
            <RuleGroup>Element Documentation</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>11</ViolationID>
            <ID>11</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>20</ID>
          <Line>12</Line>
          <Message>The documentation header must contain param tags matching the element's parameter list.</Message>
          <SourceCodeFileID>2</SourceCodeFileID>
          <SourceCodeLine>		IMoney Add(IMoney m);</SourceCodeLine>
          <Rules>
            <CheckId>SA1611</CheckId>
            <Description>Validates that an element's documentation header contains a param tag for each item in the element's parameter list.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ElementParametersMustBeDocumented</Name>
            <Namespace>Microsoft.StyleCop.CSharp.DocumentationRules</Namespace>
            <RuleGroup>Element Documentation</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>20</ViolationID>
            <ID>20</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>21</ID>
          <Line>12</Line>
          <Message>The documentation header must contain a returns tag since the element has a return value.</Message>
          <SourceCodeFileID>2</SourceCodeFileID>
          <SourceCodeLine>		IMoney Add(IMoney m);</SourceCodeLine>
          <Rules>
            <CheckId>SA1615</CheckId>
            <Description>Validates that an element's documentation header contains a returns tag if the element has a return value.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ElementReturnValueMustBeDocumented</Name>
            <Namespace>Microsoft.StyleCop.CSharp.DocumentationRules</Namespace>
            <RuleGroup>Element Documentation</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>21</ViolationID>
            <ID>21</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>22</ID>
          <Line>16</Line>
          <Message>The documentation header must contain param tags matching the element's parameter list.</Message>
          <SourceCodeFileID>2</SourceCodeFileID>
          <SourceCodeLine>		IMoney AddMoney(Money m);</SourceCodeLine>
          <Rules>
            <CheckId>SA1611</CheckId>
            <Description>Validates that an element's documentation header contains a param tag for each item in the element's parameter list.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ElementParametersMustBeDocumented</Name>
            <Namespace>Microsoft.StyleCop.CSharp.DocumentationRules</Namespace>
            <RuleGroup>Element Documentation</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>22</ViolationID>
            <ID>22</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>23</ID>
          <Line>16</Line>
          <Message>The documentation header must contain a returns tag since the element has a return value.</Message>
          <SourceCodeFileID>2</SourceCodeFileID>
          <SourceCodeLine>		IMoney AddMoney(Money m);</SourceCodeLine>
          <Rules>
            <CheckId>SA1615</CheckId>
            <Description>Validates that an element's documentation header contains a returns tag if the element has a return value.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ElementReturnValueMustBeDocumented</Name>
            <Namespace>Microsoft.StyleCop.CSharp.DocumentationRules</Namespace>
            <RuleGroup>Element Documentation</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>23</ViolationID>
            <ID>23</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>24</ID>
          <Line>20</Line>
          <Message>The documentation header must contain param tags matching the element's parameter list.</Message>
          <SourceCodeFileID>2</SourceCodeFileID>
          <SourceCodeLine>		IMoney AddMoneyBag(MoneyBag s);</SourceCodeLine>
          <Rules>
            <CheckId>SA1611</CheckId>
            <Description>Validates that an element's documentation header contains a param tag for each item in the element's parameter list.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ElementParametersMustBeDocumented</Name>
            <Namespace>Microsoft.StyleCop.CSharp.DocumentationRules</Namespace>
            <RuleGroup>Element Documentation</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>24</ViolationID>
            <ID>24</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>25</ID>
          <Line>20</Line>
          <Message>The documentation header must contain a returns tag since the element has a return value.</Message>
          <SourceCodeFileID>2</SourceCodeFileID>
          <SourceCodeLine>		IMoney AddMoneyBag(MoneyBag s);</SourceCodeLine>
          <Rules>
            <CheckId>SA1615</CheckId>
            <Description>Validates that an element's documentation header contains a returns tag if the element has a return value.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ElementReturnValueMustBeDocumented</Name>
            <Namespace>Microsoft.StyleCop.CSharp.DocumentationRules</Namespace>
            <RuleGroup>Element Documentation</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>25</ViolationID>
            <ID>25</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>26</ID>
          <Line>23</Line>
          <Message>The documentation header must have a summary tag.</Message>
          <SourceCodeFileID>2</SourceCodeFileID>
          <SourceCodeLine>		bool IsZero { get; }</SourceCodeLine>
          <Rules>
            <CheckId>SA1604</CheckId>
            <Description>Validates that a documentation header contains a properly formatted summary tag.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ElementDocumentationMustHaveSummary</Name>
            <Namespace>Microsoft.StyleCop.CSharp.DocumentationRules</Namespace>
            <RuleGroup>Element Documentation</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>26</ViolationID>
            <ID>26</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>27</ID>
          <Line>26</Line>
          <Message>The documentation header must contain param tags matching the element's parameter list.</Message>
          <SourceCodeFileID>2</SourceCodeFileID>
          <SourceCodeLine>		IMoney Multiply(int factor);</SourceCodeLine>
          <Rules>
            <CheckId>SA1611</CheckId>
            <Description>Validates that an element's documentation header contains a param tag for each item in the element's parameter list.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ElementParametersMustBeDocumented</Name>
            <Namespace>Microsoft.StyleCop.CSharp.DocumentationRules</Namespace>
            <RuleGroup>Element Documentation</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>27</ViolationID>
            <ID>27</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>28</ID>
          <Line>26</Line>
          <Message>The documentation header must contain a returns tag since the element has a return value.</Message>
          <SourceCodeFileID>2</SourceCodeFileID>
          <SourceCodeLine>		IMoney Multiply(int factor);</SourceCodeLine>
          <Rules>
            <CheckId>SA1615</CheckId>
            <Description>Validates that an element's documentation header contains a returns tag if the element has a return value.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ElementReturnValueMustBeDocumented</Name>
            <Namespace>Microsoft.StyleCop.CSharp.DocumentationRules</Namespace>
            <RuleGroup>Element Documentation</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>28</ViolationID>
            <ID>28</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>29</ID>
          <Line>29</Line>
          <Message>The documentation header must contain a returns tag since the element has a return value.</Message>
          <SourceCodeFileID>2</SourceCodeFileID>
          <SourceCodeLine>		IMoney Negate();</SourceCodeLine>
          <Rules>
            <CheckId>SA1615</CheckId>
            <Description>Validates that an element's documentation header contains a returns tag if the element has a return value.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ElementReturnValueMustBeDocumented</Name>
            <Namespace>Microsoft.StyleCop.CSharp.DocumentationRules</Namespace>
            <RuleGroup>Element Documentation</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>29</ViolationID>
            <ID>29</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>30</ID>
          <Line>32</Line>
          <Message>The documentation header must contain param tags matching the element's parameter list.</Message>
          <SourceCodeFileID>2</SourceCodeFileID>
          <SourceCodeLine>		IMoney Subtract(IMoney m);</SourceCodeLine>
          <Rules>
            <CheckId>SA1611</CheckId>
            <Description>Validates that an element's documentation header contains a param tag for each item in the element's parameter list.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ElementParametersMustBeDocumented</Name>
            <Namespace>Microsoft.StyleCop.CSharp.DocumentationRules</Namespace>
            <RuleGroup>Element Documentation</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>30</ViolationID>
            <ID>30</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>31</ID>
          <Line>32</Line>
          <Message>The documentation header must contain a returns tag since the element has a return value.</Message>
          <SourceCodeFileID>2</SourceCodeFileID>
          <SourceCodeLine>		IMoney Subtract(IMoney m);</SourceCodeLine>
          <Rules>
            <CheckId>SA1615</CheckId>
            <Description>Validates that an element's documentation header contains a returns tag if the element has a return value.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ElementReturnValueMustBeDocumented</Name>
            <Namespace>Microsoft.StyleCop.CSharp.DocumentationRules</Namespace>
            <RuleGroup>Element Documentation</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>31</ViolationID>
            <ID>31</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>32</ID>
          <Line>1</Line>
          <Message>The file has no header, the header Xml is invalid, or the header is not located at the top of the file.</Message>
          <SourceCodeFileID>2</SourceCodeFileID>
          <SourceCodeLine>using System;</SourceCodeLine>
          <Rules>
            <CheckId>SA1633</CheckId>
            <Description>Validates that a file contains a properly formatted file header.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>FileMustHaveHeader</Name>
            <Namespace>Microsoft.StyleCop.CSharp.DocumentationRules</Namespace>
            <RuleGroup>File Headers</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>32</ViolationID>
            <ID>32</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>33</ID>
          <Line>9</Line>
          <Message>An opening curly bracket must not be followed by a blank line.</Message>
          <SourceCodeFileID>2</SourceCodeFileID>
          <SourceCodeLine>  {</SourceCodeLine>
          <Rules>
            <CheckId>SA1505</CheckId>
            <Description>Validates that an opening curly bracket in a bracketed statement or element is not followed by a blank line.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>OpeningCurlyBracketsMustNotBeFollowedByBlankLine</Name>
            <Namespace>Microsoft.StyleCop.CSharp.LayoutRules</Namespace>
            <RuleGroup>Line Spacing</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>33</ViolationID>
            <ID>33</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>34</ID>
          <Line>1</Line>
          <Message>All using directives must be placed inside of the namespace.</Message>
          <SourceCodeFileID>2</SourceCodeFileID>
          <SourceCodeLine>using System;</SourceCodeLine>
          <Rules>
            <CheckId>SA1200</CheckId>
            <Description>Validates that all using directives are placed within a namespace, if a namespace exists in the file.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>UsingDirectivesMustBePlacedWithinNamespace</Name>
            <Namespace>Microsoft.StyleCop.CSharp.OrderingRules</Namespace>
            <RuleGroup>Element Order</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>34</ViolationID>
            <ID>34</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>35</ID>
          <Line>2</Line>
          <Message>All using directives must be placed inside of the namespace.</Message>
          <SourceCodeFileID>2</SourceCodeFileID>
          <SourceCodeLine>using System.Collections.Generic;</SourceCodeLine>
          <Rules>
            <CheckId>SA1200</CheckId>
            <Description>Validates that all using directives are placed within a namespace, if a namespace exists in the file.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>UsingDirectivesMustBePlacedWithinNamespace</Name>
            <Namespace>Microsoft.StyleCop.CSharp.OrderingRules</Namespace>
            <RuleGroup>Element Order</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>35</ViolationID>
            <ID>35</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>36</ID>
          <Line>3</Line>
          <Message>All using directives must be placed inside of the namespace.</Message>
          <SourceCodeFileID>2</SourceCodeFileID>
          <SourceCodeLine>using System.Linq;</SourceCodeLine>
          <Rules>
            <CheckId>SA1200</CheckId>
            <Description>Validates that all using directives are placed within a namespace, if a namespace exists in the file.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>UsingDirectivesMustBePlacedWithinNamespace</Name>
            <Namespace>Microsoft.StyleCop.CSharp.OrderingRules</Namespace>
            <RuleGroup>Element Order</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>36</ViolationID>
            <ID>36</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>37</ID>
          <Line>4</Line>
          <Message>All using directives must be placed inside of the namespace.</Message>
          <SourceCodeFileID>2</SourceCodeFileID>
          <SourceCodeLine>using System.Text;</SourceCodeLine>
          <Rules>
            <CheckId>SA1200</CheckId>
            <Description>Validates that all using directives are placed within a namespace, if a namespace exists in the file.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>UsingDirectivesMustBePlacedWithinNamespace</Name>
            <Namespace>Microsoft.StyleCop.CSharp.OrderingRules</Namespace>
            <RuleGroup>Element Order</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>37</ViolationID>
            <ID>37</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>38</ID>
          <Line>23</Line>
          <Message>All methods must be placed after all properties.</Message>
          <SourceCodeFileID>2</SourceCodeFileID>
          <SourceCodeLine>		bool IsZero { get; }</SourceCodeLine>
          <Rules>
            <CheckId>SA1201</CheckId>
            <Description>Validates that elements are placed in the correct order.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ElementsMustAppearInTheCorrectOrder</Name>
            <Namespace>Microsoft.StyleCop.CSharp.OrderingRules</Namespace>
            <RuleGroup>Element Order</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>38</ViolationID>
            <ID>38</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>39</ID>
          <Line>11</Line>
          <Message>Tabs are not allowed. Use spaces instead.</Message>
          <SourceCodeFileID>2</SourceCodeFileID>
          <SourceCodeLine>		/// &lt;summary&gt;Adds a money to this money.&lt;/summary&gt;</SourceCodeLine>
          <Rules>
            <CheckId>SA1027</CheckId>
            <Description>Verifies that the code does not contain tabs.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>TabsMustNotBeUsed</Name>
            <Namespace>Microsoft.StyleCop.CSharp.SpacingRules</Namespace>
            <Warning>false</Warning>
            <ViolationID>39</ViolationID>
            <ID>39</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>40</ID>
          <Line>12</Line>
          <Message>Tabs are not allowed. Use spaces instead.</Message>
          <SourceCodeFileID>2</SourceCodeFileID>
          <SourceCodeLine>		IMoney Add(IMoney m);</SourceCodeLine>
          <Rules>
            <CheckId>SA1027</CheckId>
            <Description>Verifies that the code does not contain tabs.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>TabsMustNotBeUsed</Name>
            <Namespace>Microsoft.StyleCop.CSharp.SpacingRules</Namespace>
            <Warning>false</Warning>
            <ViolationID>40</ViolationID>
            <ID>40</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>41</ID>
          <Line>14</Line>
          <Message>Tabs are not allowed. Use spaces instead.</Message>
          <SourceCodeFileID>2</SourceCodeFileID>
          <SourceCodeLine>		/// &lt;summary&gt;Adds a simple Money to this money. This is a helper method for</SourceCodeLine>
          <Rules>
            <CheckId>SA1027</CheckId>
            <Description>Verifies that the code does not contain tabs.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>TabsMustNotBeUsed</Name>
            <Namespace>Microsoft.StyleCop.CSharp.SpacingRules</Namespace>
            <Warning>false</Warning>
            <ViolationID>41</ViolationID>
            <ID>41</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>42</ID>
          <Line>15</Line>
          <Message>Tabs are not allowed. Use spaces instead.</Message>
          <SourceCodeFileID>2</SourceCodeFileID>
          <SourceCodeLine>		/// implementing double dispatch.&lt;/summary&gt;</SourceCodeLine>
          <Rules>
            <CheckId>SA1027</CheckId>
            <Description>Verifies that the code does not contain tabs.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>TabsMustNotBeUsed</Name>
            <Namespace>Microsoft.StyleCop.CSharp.SpacingRules</Namespace>
            <Warning>false</Warning>
            <ViolationID>42</ViolationID>
            <ID>42</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>43</ID>
          <Line>16</Line>
          <Message>Tabs are not allowed. Use spaces instead.</Message>
          <SourceCodeFileID>2</SourceCodeFileID>
          <SourceCodeLine>		IMoney AddMoney(Money m);</SourceCodeLine>
          <Rules>
            <CheckId>SA1027</CheckId>
            <Description>Verifies that the code does not contain tabs.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>TabsMustNotBeUsed</Name>
            <Namespace>Microsoft.StyleCop.CSharp.SpacingRules</Namespace>
            <Warning>false</Warning>
            <ViolationID>43</ViolationID>
            <ID>43</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>44</ID>
          <Line>18</Line>
          <Message>Tabs are not allowed. Use spaces instead.</Message>
          <SourceCodeFileID>2</SourceCodeFileID>
          <SourceCodeLine>		/// &lt;summary&gt;Adds a MoneyBag to this money. This is a helper method for</SourceCodeLine>
          <Rules>
            <CheckId>SA1027</CheckId>
            <Description>Verifies that the code does not contain tabs.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>TabsMustNotBeUsed</Name>
            <Namespace>Microsoft.StyleCop.CSharp.SpacingRules</Namespace>
            <Warning>false</Warning>
            <ViolationID>44</ViolationID>
            <ID>44</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>45</ID>
          <Line>19</Line>
          <Message>Tabs are not allowed. Use spaces instead.</Message>
          <SourceCodeFileID>2</SourceCodeFileID>
          <SourceCodeLine>		/// implementing double dispatch.&lt;/summary&gt;</SourceCodeLine>
          <Rules>
            <CheckId>SA1027</CheckId>
            <Description>Verifies that the code does not contain tabs.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>TabsMustNotBeUsed</Name>
            <Namespace>Microsoft.StyleCop.CSharp.SpacingRules</Namespace>
            <Warning>false</Warning>
            <ViolationID>45</ViolationID>
            <ID>45</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>46</ID>
          <Line>20</Line>
          <Message>Tabs are not allowed. Use spaces instead.</Message>
          <SourceCodeFileID>2</SourceCodeFileID>
          <SourceCodeLine>		IMoney AddMoneyBag(MoneyBag s);</SourceCodeLine>
          <Rules>
            <CheckId>SA1027</CheckId>
            <Description>Verifies that the code does not contain tabs.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>TabsMustNotBeUsed</Name>
            <Namespace>Microsoft.StyleCop.CSharp.SpacingRules</Namespace>
            <Warning>false</Warning>
            <ViolationID>46</ViolationID>
            <ID>46</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>47</ID>
          <Line>22</Line>
          <Message>Tabs are not allowed. Use spaces instead.</Message>
          <SourceCodeFileID>2</SourceCodeFileID>
          <SourceCodeLine>		/// &lt;value&gt;True if this money is zero.&lt;/value&gt;</SourceCodeLine>
          <Rules>
            <CheckId>SA1027</CheckId>
            <Description>Verifies that the code does not contain tabs.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>TabsMustNotBeUsed</Name>
            <Namespace>Microsoft.StyleCop.CSharp.SpacingRules</Namespace>
            <Warning>false</Warning>
            <ViolationID>47</ViolationID>
            <ID>47</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>48</ID>
          <Line>23</Line>
          <Message>Tabs are not allowed. Use spaces instead.</Message>
          <SourceCodeFileID>2</SourceCodeFileID>
          <SourceCodeLine>		bool IsZero { get; }</SourceCodeLine>
          <Rules>
            <CheckId>SA1027</CheckId>
            <Description>Verifies that the code does not contain tabs.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>TabsMustNotBeUsed</Name>
            <Namespace>Microsoft.StyleCop.CSharp.SpacingRules</Namespace>
            <Warning>false</Warning>
            <ViolationID>48</ViolationID>
            <ID>48</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>49</ID>
          <Line>25</Line>
          <Message>Tabs are not allowed. Use spaces instead.</Message>
          <SourceCodeFileID>2</SourceCodeFileID>
          <SourceCodeLine>		/// &lt;summary&gt;Multiplies a money by the given factor.&lt;/summary&gt;</SourceCodeLine>
          <Rules>
            <CheckId>SA1027</CheckId>
            <Description>Verifies that the code does not contain tabs.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>TabsMustNotBeUsed</Name>
            <Namespace>Microsoft.StyleCop.CSharp.SpacingRules</Namespace>
            <Warning>false</Warning>
            <ViolationID>49</ViolationID>
            <ID>49</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>50</ID>
          <Line>26</Line>
          <Message>Tabs are not allowed. Use spaces instead.</Message>
          <SourceCodeFileID>2</SourceCodeFileID>
          <SourceCodeLine>		IMoney Multiply(int factor);</SourceCodeLine>
          <Rules>
            <CheckId>SA1027</CheckId>
            <Description>Verifies that the code does not contain tabs.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>TabsMustNotBeUsed</Name>
            <Namespace>Microsoft.StyleCop.CSharp.SpacingRules</Namespace>
            <Warning>false</Warning>
            <ViolationID>50</ViolationID>
            <ID>50</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>51</ID>
          <Line>28</Line>
          <Message>Tabs are not allowed. Use spaces instead.</Message>
          <SourceCodeFileID>2</SourceCodeFileID>
          <SourceCodeLine>		/// &lt;summary&gt;Negates this money.&lt;/summary&gt;</SourceCodeLine>
          <Rules>
            <CheckId>SA1027</CheckId>
            <Description>Verifies that the code does not contain tabs.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>TabsMustNotBeUsed</Name>
            <Namespace>Microsoft.StyleCop.CSharp.SpacingRules</Namespace>
            <Warning>false</Warning>
            <ViolationID>51</ViolationID>
            <ID>51</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>52</ID>
          <Line>29</Line>
          <Message>Tabs are not allowed. Use spaces instead.</Message>
          <SourceCodeFileID>2</SourceCodeFileID>
          <SourceCodeLine>		IMoney Negate();</SourceCodeLine>
          <Rules>
            <CheckId>SA1027</CheckId>
            <Description>Verifies that the code does not contain tabs.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>TabsMustNotBeUsed</Name>
            <Namespace>Microsoft.StyleCop.CSharp.SpacingRules</Namespace>
            <Warning>false</Warning>
            <ViolationID>52</ViolationID>
            <ID>52</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>53</ID>
          <Line>31</Line>
          <Message>Tabs are not allowed. Use spaces instead.</Message>
          <SourceCodeFileID>2</SourceCodeFileID>
          <SourceCodeLine>		/// &lt;summary&gt;Subtracts a money from this money.&lt;/summary&gt;</SourceCodeLine>
          <Rules>
            <CheckId>SA1027</CheckId>
            <Description>Verifies that the code does not contain tabs.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>TabsMustNotBeUsed</Name>
            <Namespace>Microsoft.StyleCop.CSharp.SpacingRules</Namespace>
            <Warning>false</Warning>
            <ViolationID>53</ViolationID>
            <ID>53</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>54</ID>
          <Line>32</Line>
          <Message>Tabs are not allowed. Use spaces instead.</Message>
          <SourceCodeFileID>2</SourceCodeFileID>
          <SourceCodeLine>		IMoney Subtract(IMoney m);</SourceCodeLine>
          <Rules>
            <CheckId>SA1027</CheckId>
            <Description>Verifies that the code does not contain tabs.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>TabsMustNotBeUsed</Name>
            <Namespace>Microsoft.StyleCop.CSharp.SpacingRules</Namespace>
            <Warning>false</Warning>
            <ViolationID>54</ViolationID>
            <ID>54</ID>
          </Rules>
        </Violations>
      </SourceCodeFiles>
      <SourceCodeFiles>
        <ID>3</ID>
        <Path>C:\Work\CodeQuality\Temp\Example\Example.Core\Model\SubType.cs</Path>
        <TimeStamp>2009-05-05T10:54:20.1564294+02:00</TimeStamp>
        <Type>CS</Type>
        <Name>SubType.cs</Name>
        <CodeProjectID>1</CodeProjectID>
        <Violations>
          <ID>12</ID>
          <Line>8</Line>
          <Message>The class must have a documentation header.</Message>
          <SourceCodeFileID>3</SourceCodeFileID>
          <SourceCodeLine>  public class SubType</SourceCodeLine>
          <Rules>
            <CheckId>SA1600</CheckId>
            <Description>Validates that an element contains a properly formatted documentation header.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ElementsMustBeDocumented</Name>
            <Namespace>Microsoft.StyleCop.CSharp.DocumentationRules</Namespace>
            <RuleGroup>Element Documentation</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>12</ViolationID>
            <ID>12</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>13</ID>
          <Line>10</Line>
          <Message>The property must have a documentation header.</Message>
          <SourceCodeFileID>3</SourceCodeFileID>
          <SourceCodeLine>    public String Name { get; set; }</SourceCodeLine>
          <Rules>
            <CheckId>SA1600</CheckId>
            <Description>Validates that an element contains a properly formatted documentation header.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ElementsMustBeDocumented</Name>
            <Namespace>Microsoft.StyleCop.CSharp.DocumentationRules</Namespace>
            <RuleGroup>Element Documentation</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>13</ViolationID>
            <ID>13</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>14</ID>
          <Line>1</Line>
          <Message>The file has no header, the header Xml is invalid, or the header is not located at the top of the file.</Message>
          <SourceCodeFileID>3</SourceCodeFileID>
          <SourceCodeLine>using System;</SourceCodeLine>
          <Rules>
            <CheckId>SA1633</CheckId>
            <Description>Validates that a file contains a properly formatted file header.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>FileMustHaveHeader</Name>
            <Namespace>Microsoft.StyleCop.CSharp.DocumentationRules</Namespace>
            <RuleGroup>File Headers</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>14</ViolationID>
            <ID>14</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>15</ID>
          <Line>1</Line>
          <Message>All using directives must be placed inside of the namespace.</Message>
          <SourceCodeFileID>3</SourceCodeFileID>
          <SourceCodeLine>using System;</SourceCodeLine>
          <Rules>
            <CheckId>SA1200</CheckId>
            <Description>Validates that all using directives are placed within a namespace, if a namespace exists in the file.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>UsingDirectivesMustBePlacedWithinNamespace</Name>
            <Namespace>Microsoft.StyleCop.CSharp.OrderingRules</Namespace>
            <RuleGroup>Element Order</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>15</ViolationID>
            <ID>15</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>16</ID>
          <Line>2</Line>
          <Message>All using directives must be placed inside of the namespace.</Message>
          <SourceCodeFileID>3</SourceCodeFileID>
          <SourceCodeLine>using System.Collections.Generic;</SourceCodeLine>
          <Rules>
            <CheckId>SA1200</CheckId>
            <Description>Validates that all using directives are placed within a namespace, if a namespace exists in the file.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>UsingDirectivesMustBePlacedWithinNamespace</Name>
            <Namespace>Microsoft.StyleCop.CSharp.OrderingRules</Namespace>
            <RuleGroup>Element Order</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>16</ViolationID>
            <ID>16</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>17</ID>
          <Line>3</Line>
          <Message>All using directives must be placed inside of the namespace.</Message>
          <SourceCodeFileID>3</SourceCodeFileID>
          <SourceCodeLine>using System.Linq;</SourceCodeLine>
          <Rules>
            <CheckId>SA1200</CheckId>
            <Description>Validates that all using directives are placed within a namespace, if a namespace exists in the file.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>UsingDirectivesMustBePlacedWithinNamespace</Name>
            <Namespace>Microsoft.StyleCop.CSharp.OrderingRules</Namespace>
            <RuleGroup>Element Order</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>17</ViolationID>
            <ID>17</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>18</ID>
          <Line>4</Line>
          <Message>All using directives must be placed inside of the namespace.</Message>
          <SourceCodeFileID>3</SourceCodeFileID>
          <SourceCodeLine>using System.Text;</SourceCodeLine>
          <Rules>
            <CheckId>SA1200</CheckId>
            <Description>Validates that all using directives are placed within a namespace, if a namespace exists in the file.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>UsingDirectivesMustBePlacedWithinNamespace</Name>
            <Namespace>Microsoft.StyleCop.CSharp.OrderingRules</Namespace>
            <RuleGroup>Element Order</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>18</ViolationID>
            <ID>18</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>19</ID>
          <Line>10</Line>
          <Message>Use the built-in type alias 'string' rather than String or System.String.</Message>
          <SourceCodeFileID>3</SourceCodeFileID>
          <SourceCodeLine>    public String Name { get; set; }</SourceCodeLine>
          <Rules>
            <CheckId>SA1121</CheckId>
            <Description>Enforces the use of the built-in types rather than the actual types that they represent.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>UseBuiltInTypeAlias</Name>
            <Namespace>Microsoft.StyleCop.CSharp.ReadabilityRules</Namespace>
            <RuleGroup>Types</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>19</ViolationID>
            <ID>19</ID>
          </Rules>
        </Violations>
      </SourceCodeFiles>
      <SourceCodeFiles>
        <ID>4</ID>
        <Path>C:\Work\CodeQuality\Temp\Example\Example.Core\Money.cs</Path>
        <TimeStamp>2009-05-05T09:59:23.4533044+02:00</TimeStamp>
        <Type>CS</Type>
        <Name>Money.cs</Name>
        <CodeProjectID>1</CodeProjectID>
        <Violations>
          <ID>55</ID>
          <Line>17</Line>
          <Message>The field must have a documentation header.</Message>
          <SourceCodeFileID>4</SourceCodeFileID>
          <SourceCodeLine>    private int fAmount;</SourceCodeLine>
          <Rules>
            <CheckId>SA1600</CheckId>
            <Description>Validates that an element contains a properly formatted documentation header.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ElementsMustBeDocumented</Name>
            <Namespace>Microsoft.StyleCop.CSharp.DocumentationRules</Namespace>
            <RuleGroup>Element Documentation</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>55</ViolationID>
            <ID>55</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>56</ID>
          <Line>18</Line>
          <Message>The field must have a documentation header.</Message>
          <SourceCodeFileID>4</SourceCodeFileID>
          <SourceCodeLine>    private String fCurrency;</SourceCodeLine>
          <Rules>
            <CheckId>SA1600</CheckId>
            <Description>Validates that an element contains a properly formatted documentation header.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ElementsMustBeDocumented</Name>
            <Namespace>Microsoft.StyleCop.CSharp.DocumentationRules</Namespace>
            <RuleGroup>Element Documentation</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>56</ViolationID>
            <ID>56</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>57</ID>
          <Line>22</Line>
          <Message>The documentation header must contain param tags matching the element's parameter list.</Message>
          <SourceCodeFileID>4</SourceCodeFileID>
          <SourceCodeLine>    public Money(int amount, String currency)</SourceCodeLine>
          <Rules>
            <CheckId>SA1611</CheckId>
            <Description>Validates that an element's documentation header contains a param tag for each item in the element's parameter list.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ElementParametersMustBeDocumented</Name>
            <Namespace>Microsoft.StyleCop.CSharp.DocumentationRules</Namespace>
            <RuleGroup>Element Documentation</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>57</ViolationID>
            <ID>57</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>63</ID>
          <Line>22</Line>
          <Message>The documentation text within the constructor's summary tag must begin with the text: Initializes a new instance of the {Type name} class.</Message>
          <SourceCodeFileID>4</SourceCodeFileID>
          <SourceCodeLine>    public Money(int amount, String currency)</SourceCodeLine>
          <Rules>
            <CheckId>SA1642</CheckId>
            <Description>Verifies that a constructor's summary text begins with the appropriate wording.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ConstructorSummaryDocumentationMustBeginWithStandardText</Name>
            <Namespace>Microsoft.StyleCop.CSharp.DocumentationRules</Namespace>
            <RuleGroup>Element Documentation</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>63</ViolationID>
            <ID>63</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>65</ID>
          <Line>31</Line>
          <Message>The documentation header must contain param tags matching the element's parameter list.</Message>
          <SourceCodeFileID>4</SourceCodeFileID>
          <SourceCodeLine>    public IMoney Add(IMoney m)</SourceCodeLine>
          <Rules>
            <CheckId>SA1611</CheckId>
            <Description>Validates that an element's documentation header contains a param tag for each item in the element's parameter list.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ElementParametersMustBeDocumented</Name>
            <Namespace>Microsoft.StyleCop.CSharp.DocumentationRules</Namespace>
            <RuleGroup>Element Documentation</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>65</ViolationID>
            <ID>65</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>67</ID>
          <Line>31</Line>
          <Message>The documentation header must contain a returns tag since the element has a return value.</Message>
          <SourceCodeFileID>4</SourceCodeFileID>
          <SourceCodeLine>    public IMoney Add(IMoney m)</SourceCodeLine>
          <Rules>
            <CheckId>SA1615</CheckId>
            <Description>Validates that an element's documentation header contains a returns tag if the element has a return value.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ElementReturnValueMustBeDocumented</Name>
            <Namespace>Microsoft.StyleCop.CSharp.DocumentationRules</Namespace>
            <RuleGroup>Element Documentation</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>67</ViolationID>
            <ID>67</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>69</ID>
          <Line>36</Line>
          <Message>The method must have a documentation header.</Message>
          <SourceCodeFileID>4</SourceCodeFileID>
          <SourceCodeLine>    public IMoney AddMoney(Money m)</SourceCodeLine>
          <Rules>
            <CheckId>SA1600</CheckId>
            <Description>Validates that an element contains a properly formatted documentation header.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ElementsMustBeDocumented</Name>
            <Namespace>Microsoft.StyleCop.CSharp.DocumentationRules</Namespace>
            <RuleGroup>Element Documentation</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>69</ViolationID>
            <ID>69</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>71</ID>
          <Line>43</Line>
          <Message>The method must have a documentation header.</Message>
          <SourceCodeFileID>4</SourceCodeFileID>
          <SourceCodeLine>    public IMoney AddMoneyBag(MoneyBag s)</SourceCodeLine>
          <Rules>
            <CheckId>SA1600</CheckId>
            <Description>Validates that an element contains a properly formatted documentation header.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ElementsMustBeDocumented</Name>
            <Namespace>Microsoft.StyleCop.CSharp.DocumentationRules</Namespace>
            <RuleGroup>Element Documentation</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>71</ViolationID>
            <ID>71</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>73</ID>
          <Line>48</Line>
          <Message>The property must have a documentation header.</Message>
          <SourceCodeFileID>4</SourceCodeFileID>
          <SourceCodeLine>    public int Amount</SourceCodeLine>
          <Rules>
            <CheckId>SA1600</CheckId>
            <Description>Validates that an element contains a properly formatted documentation header.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ElementsMustBeDocumented</Name>
            <Namespace>Microsoft.StyleCop.CSharp.DocumentationRules</Namespace>
            <RuleGroup>Element Documentation</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>73</ViolationID>
            <ID>73</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>74</ID>
          <Line>53</Line>
          <Message>The property must have a documentation header.</Message>
          <SourceCodeFileID>4</SourceCodeFileID>
          <SourceCodeLine>    public String Currency</SourceCodeLine>
          <Rules>
            <CheckId>SA1600</CheckId>
            <Description>Validates that an element contains a properly formatted documentation header.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ElementsMustBeDocumented</Name>
            <Namespace>Microsoft.StyleCop.CSharp.DocumentationRules</Namespace>
            <RuleGroup>Element Documentation</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>74</ViolationID>
            <ID>74</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>75</ID>
          <Line>58</Line>
          <Message>The method must have a documentation header.</Message>
          <SourceCodeFileID>4</SourceCodeFileID>
          <SourceCodeLine>    public override bool Equals(Object anObject)</SourceCodeLine>
          <Rules>
            <CheckId>SA1600</CheckId>
            <Description>Validates that an element contains a properly formatted documentation header.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ElementsMustBeDocumented</Name>
            <Namespace>Microsoft.StyleCop.CSharp.DocumentationRules</Namespace>
            <RuleGroup>Element Documentation</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>75</ViolationID>
            <ID>75</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>77</ID>
          <Line>74</Line>
          <Message>The method must have a documentation header.</Message>
          <SourceCodeFileID>4</SourceCodeFileID>
          <SourceCodeLine>    public override int GetHashCode()</SourceCodeLine>
          <Rules>
            <CheckId>SA1600</CheckId>
            <Description>Validates that an element contains a properly formatted documentation header.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ElementsMustBeDocumented</Name>
            <Namespace>Microsoft.StyleCop.CSharp.DocumentationRules</Namespace>
            <RuleGroup>Element Documentation</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>77</ViolationID>
            <ID>77</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>79</ID>
          <Line>79</Line>
          <Message>The property must have a documentation header.</Message>
          <SourceCodeFileID>4</SourceCodeFileID>
          <SourceCodeLine>    public bool IsZero</SourceCodeLine>
          <Rules>
            <CheckId>SA1600</CheckId>
            <Description>Validates that an element contains a properly formatted documentation header.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ElementsMustBeDocumented</Name>
            <Namespace>Microsoft.StyleCop.CSharp.DocumentationRules</Namespace>
            <RuleGroup>Element Documentation</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>79</ViolationID>
            <ID>79</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>81</ID>
          <Line>84</Line>
          <Message>The method must have a documentation header.</Message>
          <SourceCodeFileID>4</SourceCodeFileID>
          <SourceCodeLine>    public IMoney Multiply(int factor)</SourceCodeLine>
          <Rules>
            <CheckId>SA1600</CheckId>
            <Description>Validates that an element contains a properly formatted documentation header.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ElementsMustBeDocumented</Name>
            <Namespace>Microsoft.StyleCop.CSharp.DocumentationRules</Namespace>
            <RuleGroup>Element Documentation</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>81</ViolationID>
            <ID>81</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>83</ID>
          <Line>90</Line>
          <Message>The method must have a documentation header.</Message>
          <SourceCodeFileID>4</SourceCodeFileID>
          <SourceCodeLine>    public IMoney Negate()</SourceCodeLine>
          <Rules>
            <CheckId>SA1600</CheckId>
            <Description>Validates that an element contains a properly formatted documentation header.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ElementsMustBeDocumented</Name>
            <Namespace>Microsoft.StyleCop.CSharp.DocumentationRules</Namespace>
            <RuleGroup>Element Documentation</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>83</ViolationID>
            <ID>83</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>84</ID>
          <Line>96</Line>
          <Message>The method must have a documentation header.</Message>
          <SourceCodeFileID>4</SourceCodeFileID>
          <SourceCodeLine>    public IMoney Subtract(IMoney m)</SourceCodeLine>
          <Rules>
            <CheckId>SA1600</CheckId>
            <Description>Validates that an element contains a properly formatted documentation header.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ElementsMustBeDocumented</Name>
            <Namespace>Microsoft.StyleCop.CSharp.DocumentationRules</Namespace>
            <RuleGroup>Element Documentation</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>84</ViolationID>
            <ID>84</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>87</ID>
          <Line>101</Line>
          <Message>The method must have a documentation header.</Message>
          <SourceCodeFileID>4</SourceCodeFileID>
          <SourceCodeLine>    public override String ToString()</SourceCodeLine>
          <Rules>
            <CheckId>SA1600</CheckId>
            <Description>Validates that an element contains a properly formatted documentation header.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ElementsMustBeDocumented</Name>
            <Namespace>Microsoft.StyleCop.CSharp.DocumentationRules</Namespace>
            <RuleGroup>Element Documentation</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>87</ViolationID>
            <ID>87</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>89</ID>
          <Line>1</Line>
          <Message>The file header must contain a copyright tag.</Message>
          <SourceCodeFileID>4</SourceCodeFileID>
          <SourceCodeLine>//</SourceCodeLine>
          <Rules>
            <CheckId>SA1634</CheckId>
            <Description>Validates that a file header contains a copyright tag.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>FileHeaderMustShowCopyright</Name>
            <Namespace>Microsoft.StyleCop.CSharp.DocumentationRules</Namespace>
            <RuleGroup>File Headers</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>89</ViolationID>
            <ID>89</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>93</ID>
          <Line>39</Line>
          <Message>The body of the if statement must be wrapped in opening and closing curly brackets.</Message>
          <SourceCodeFileID>4</SourceCodeFileID>
          <SourceCodeLine>        return new Money(Amount + m.Amount, Currency);</SourceCodeLine>
          <Rules>
            <CheckId>SA1503</CheckId>
            <Description>Validates that opening and closing curly brackets are always included, even if the statement type allows them to be omitted.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>CurlyBracketsMustNotBeOmitted</Name>
            <Namespace>Microsoft.StyleCop.CSharp.LayoutRules</Namespace>
            <RuleGroup>Curly Brackets</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>93</ViolationID>
            <ID>93</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>103</ID>
          <Line>63</Line>
          <Message>The body of the if statement must be wrapped in opening and closing curly brackets.</Message>
          <SourceCodeFileID>4</SourceCodeFileID>
          <SourceCodeLine>        if (anObject is IMoney)</SourceCodeLine>
          <Rules>
            <CheckId>SA1503</CheckId>
            <Description>Validates that opening and closing curly brackets are always included, even if the statement type allows them to be omitted.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>CurlyBracketsMustNotBeOmitted</Name>
            <Namespace>Microsoft.StyleCop.CSharp.LayoutRules</Namespace>
            <RuleGroup>Curly Brackets</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>103</ViolationID>
            <ID>103</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>107</ID>
          <Line>64</Line>
          <Message>The body of the if statement must be wrapped in opening and closing curly brackets.</Message>
          <SourceCodeFileID>4</SourceCodeFileID>
          <SourceCodeLine>          return ((IMoney)anObject).IsZero;</SourceCodeLine>
          <Rules>
            <CheckId>SA1503</CheckId>
            <Description>Validates that opening and closing curly brackets are always included, even if the statement type allows them to be omitted.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>CurlyBracketsMustNotBeOmitted</Name>
            <Namespace>Microsoft.StyleCop.CSharp.LayoutRules</Namespace>
            <RuleGroup>Curly Brackets</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>107</ViolationID>
            <ID>107</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>112</ID>
          <Line>15</Line>
          <Message>An opening curly bracket must not be followed by a blank line.</Message>
          <SourceCodeFileID>4</SourceCodeFileID>
          <SourceCodeLine>  {</SourceCodeLine>
          <Rules>
            <CheckId>SA1505</CheckId>
            <Description>Validates that an opening curly bracket in a bracketed statement or element is not followed by a blank line.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>OpeningCurlyBracketsMustNotBeFollowedByBlankLine</Name>
            <Namespace>Microsoft.StyleCop.CSharp.LayoutRules</Namespace>
            <RuleGroup>Line Spacing</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>112</ViolationID>
            <ID>112</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>113</ID>
          <Line>28</Line>
          <Message>The code must not contain multiple blank lines in a row.</Message>
          <SourceCodeFileID>4</SourceCodeFileID>
          <SourceCodeLine />
          <Rules>
            <CheckId>SA1507</CheckId>
            <Description>Validates that the code does not contain multiple blank lines in a row.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>CodeMustNotContainMultipleBlankLinesInARow</Name>
            <Namespace>Microsoft.StyleCop.CSharp.LayoutRules</Namespace>
            <RuleGroup>Line Spacing</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>113</ViolationID>
            <ID>113</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>114</ID>
          <Line>70</Line>
          <Message>Statements or elements wrapped in curly brackets must be followed by a blank line.</Message>
          <SourceCodeFileID>4</SourceCodeFileID>
          <SourceCodeLine>      }</SourceCodeLine>
          <Rules>
            <CheckId>SA1513</CheckId>
            <Description>Validates that a bracketed statement or element is followed by a blank line.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ClosingCurlyBracketMustBeFollowedByBlankLine</Name>
            <Namespace>Microsoft.StyleCop.CSharp.LayoutRules</Namespace>
            <RuleGroup>Line Spacing</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>114</ViolationID>
            <ID>114</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>117</ID>
          <Line>105</Line>
          <Message>A single-line comment must be preceded by a blank line or another single-line comment, or must be the first item in its scope. To ignore this error when commenting out a line of code, begin the comment with '////' rather than '//'.</Message>
          <SourceCodeFileID>4</SourceCodeFileID>
          <SourceCodeLine>      // We build the string representation</SourceCodeLine>
          <Rules>
            <CheckId>SA1515</CheckId>
            <Description>Validates that a comment is preceded by a blank line, or is the first item in its scope.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>SingleLineCommentMustBePrecededByBlankLine</Name>
            <Namespace>Microsoft.StyleCop.CSharp.LayoutRules</Namespace>
            <RuleGroup>Line Spacing</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>117</ViolationID>
            <ID>117</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>144</ID>
          <Line>17</Line>
          <Message>The variable name 'fAmount' begins with a prefix that looks like Hungarian notation. Remove the prefix or add it to the list of allowed prefixes.</Message>
          <SourceCodeFileID>4</SourceCodeFileID>
          <SourceCodeLine>    private int fAmount;</SourceCodeLine>
          <Rules>
            <CheckId>SA1305</CheckId>
            <Description>Validates that a variable name is not prepended with lower-case characters matching the signature of Hungarian notation.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>FieldNamesMustNotUseHungarianNotation</Name>
            <Namespace>Microsoft.StyleCop.CSharp.NamingRules</Namespace>
            <Warning>false</Warning>
            <ViolationID>144</ViolationID>
            <ID>144</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>146</ID>
          <Line>18</Line>
          <Message>The variable name 'fCurrency' begins with a prefix that looks like Hungarian notation. Remove the prefix or add it to the list of allowed prefixes.</Message>
          <SourceCodeFileID>4</SourceCodeFileID>
          <SourceCodeLine>    private String fCurrency;</SourceCodeLine>
          <Rules>
            <CheckId>SA1305</CheckId>
            <Description>Validates that a variable name is not prepended with lower-case characters matching the signature of Hungarian notation.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>FieldNamesMustNotUseHungarianNotation</Name>
            <Namespace>Microsoft.StyleCop.CSharp.NamingRules</Namespace>
            <Warning>false</Warning>
            <ViolationID>146</ViolationID>
            <ID>146</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>149</ID>
          <Line>58</Line>
          <Message>The variable name 'anObject' begins with a prefix that looks like Hungarian notation. Remove the prefix or add it to the list of allowed prefixes.</Message>
          <SourceCodeFileID>4</SourceCodeFileID>
          <SourceCodeLine>    public override bool Equals(Object anObject)</SourceCodeLine>
          <Rules>
            <CheckId>SA1305</CheckId>
            <Description>Validates that a variable name is not prepended with lower-case characters matching the signature of Hungarian notation.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>FieldNamesMustNotUseHungarianNotation</Name>
            <Namespace>Microsoft.StyleCop.CSharp.NamingRules</Namespace>
            <Warning>false</Warning>
            <ViolationID>149</ViolationID>
            <ID>149</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>151</ID>
          <Line>67</Line>
          <Message>The variable name 'aMoney' begins with a prefix that looks like Hungarian notation. Remove the prefix or add it to the list of allowed prefixes.</Message>
          <SourceCodeFileID>4</SourceCodeFileID>
          <SourceCodeLine>        Money aMoney = (Money)anObject;</SourceCodeLine>
          <Rules>
            <CheckId>SA1305</CheckId>
            <Description>Validates that a variable name is not prepended with lower-case characters matching the signature of Hungarian notation.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>FieldNamesMustNotUseHungarianNotation</Name>
            <Namespace>Microsoft.StyleCop.CSharp.NamingRules</Namespace>
            <Warning>false</Warning>
            <ViolationID>151</ViolationID>
            <ID>151</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>154</ID>
          <Line>6</Line>
          <Message>All using directives must be placed inside of the namespace.</Message>
          <SourceCodeFileID>4</SourceCodeFileID>
          <SourceCodeLine>using System;</SourceCodeLine>
          <Rules>
            <CheckId>SA1200</CheckId>
            <Description>Validates that all using directives are placed within a namespace, if a namespace exists in the file.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>UsingDirectivesMustBePlacedWithinNamespace</Name>
            <Namespace>Microsoft.StyleCop.CSharp.OrderingRules</Namespace>
            <RuleGroup>Element Order</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>154</ViolationID>
            <ID>154</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>155</ID>
          <Line>7</Line>
          <Message>All using directives must be placed inside of the namespace.</Message>
          <SourceCodeFileID>4</SourceCodeFileID>
          <SourceCodeLine>using System.Collections.Generic;</SourceCodeLine>
          <Rules>
            <CheckId>SA1200</CheckId>
            <Description>Validates that all using directives are placed within a namespace, if a namespace exists in the file.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>UsingDirectivesMustBePlacedWithinNamespace</Name>
            <Namespace>Microsoft.StyleCop.CSharp.OrderingRules</Namespace>
            <RuleGroup>Element Order</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>155</ViolationID>
            <ID>155</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>157</ID>
          <Line>8</Line>
          <Message>All using directives must be placed inside of the namespace.</Message>
          <SourceCodeFileID>4</SourceCodeFileID>
          <SourceCodeLine>using System.Linq;</SourceCodeLine>
          <Rules>
            <CheckId>SA1200</CheckId>
            <Description>Validates that all using directives are placed within a namespace, if a namespace exists in the file.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>UsingDirectivesMustBePlacedWithinNamespace</Name>
            <Namespace>Microsoft.StyleCop.CSharp.OrderingRules</Namespace>
            <RuleGroup>Element Order</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>157</ViolationID>
            <ID>157</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>159</ID>
          <Line>9</Line>
          <Message>All using directives must be placed inside of the namespace.</Message>
          <SourceCodeFileID>4</SourceCodeFileID>
          <SourceCodeLine>using System.Text;</SourceCodeLine>
          <Rules>
            <CheckId>SA1200</CheckId>
            <Description>Validates that all using directives are placed within a namespace, if a namespace exists in the file.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>UsingDirectivesMustBePlacedWithinNamespace</Name>
            <Namespace>Microsoft.StyleCop.CSharp.OrderingRules</Namespace>
            <RuleGroup>Element Order</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>159</ViolationID>
            <ID>159</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>161</ID>
          <Line>48</Line>
          <Message>All methods must be placed after all properties.</Message>
          <SourceCodeFileID>4</SourceCodeFileID>
          <SourceCodeLine>    public int Amount</SourceCodeLine>
          <Rules>
            <CheckId>SA1201</CheckId>
            <Description>Validates that elements are placed in the correct order.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ElementsMustAppearInTheCorrectOrder</Name>
            <Namespace>Microsoft.StyleCop.CSharp.OrderingRules</Namespace>
            <RuleGroup>Element Order</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>161</ViolationID>
            <ID>161</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>163</ID>
          <Line>53</Line>
          <Message>All methods must be placed after all properties.</Message>
          <SourceCodeFileID>4</SourceCodeFileID>
          <SourceCodeLine>    public String Currency</SourceCodeLine>
          <Rules>
            <CheckId>SA1201</CheckId>
            <Description>Validates that elements are placed in the correct order.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ElementsMustAppearInTheCorrectOrder</Name>
            <Namespace>Microsoft.StyleCop.CSharp.OrderingRules</Namespace>
            <RuleGroup>Element Order</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>163</ViolationID>
            <ID>163</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>165</ID>
          <Line>79</Line>
          <Message>All methods must be placed after all properties.</Message>
          <SourceCodeFileID>4</SourceCodeFileID>
          <SourceCodeLine>    public bool IsZero</SourceCodeLine>
          <Rules>
            <CheckId>SA1201</CheckId>
            <Description>Validates that elements are placed in the correct order.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ElementsMustAppearInTheCorrectOrder</Name>
            <Namespace>Microsoft.StyleCop.CSharp.OrderingRules</Namespace>
            <RuleGroup>Element Order</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>165</ViolationID>
            <ID>165</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>173</ID>
          <Line>24</Line>
          <Message>The call to fAmount must begin with the 'this.' prefix to indicate that the item is a member of the class.</Message>
          <SourceCodeFileID>4</SourceCodeFileID>
          <SourceCodeLine>      fAmount = amount;</SourceCodeLine>
          <Rules>
            <CheckId>SA1101</CheckId>
            <Description>Verifies that calls to local members are prefixed with the 'this.' notation.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>PrefixLocalCallsWithThis</Name>
            <Namespace>Microsoft.StyleCop.CSharp.ReadabilityRules</Namespace>
            <RuleGroup>Member Access</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>173</ViolationID>
            <ID>173</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>175</ID>
          <Line>25</Line>
          <Message>The call to fCurrency must begin with the 'this.' prefix to indicate that the item is a member of the class.</Message>
          <SourceCodeFileID>4</SourceCodeFileID>
          <SourceCodeLine>      fCurrency = currency;</SourceCodeLine>
          <Rules>
            <CheckId>SA1101</CheckId>
            <Description>Verifies that calls to local members are prefixed with the 'this.' notation.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>PrefixLocalCallsWithThis</Name>
            <Namespace>Microsoft.StyleCop.CSharp.ReadabilityRules</Namespace>
            <RuleGroup>Member Access</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>175</ViolationID>
            <ID>175</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>176</ID>
          <Line>39</Line>
          <Message>The call to Amount must begin with the 'this.' prefix to indicate that the item is a member of the class.</Message>
          <SourceCodeFileID>4</SourceCodeFileID>
          <SourceCodeLine>        return new Money(Amount + m.Amount, Currency);</SourceCodeLine>
          <Rules>
            <CheckId>SA1101</CheckId>
            <Description>Verifies that calls to local members are prefixed with the 'this.' notation.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>PrefixLocalCallsWithThis</Name>
            <Namespace>Microsoft.StyleCop.CSharp.ReadabilityRules</Namespace>
            <RuleGroup>Member Access</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>176</ViolationID>
            <ID>176</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>178</ID>
          <Line>38</Line>
          <Message>The call to Currency must begin with the 'this.' prefix to indicate that the item is a member of the class.</Message>
          <SourceCodeFileID>4</SourceCodeFileID>
          <SourceCodeLine>      if (m.Currency.Equals(Currency))</SourceCodeLine>
          <Rules>
            <CheckId>SA1101</CheckId>
            <Description>Verifies that calls to local members are prefixed with the 'this.' notation.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>PrefixLocalCallsWithThis</Name>
            <Namespace>Microsoft.StyleCop.CSharp.ReadabilityRules</Namespace>
            <RuleGroup>Member Access</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>178</ViolationID>
            <ID>178</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>180</ID>
          <Line>50</Line>
          <Message>The call to fAmount must begin with the 'this.' prefix to indicate that the item is a member of the class.</Message>
          <SourceCodeFileID>4</SourceCodeFileID>
          <SourceCodeLine>      get { return fAmount; }</SourceCodeLine>
          <Rules>
            <CheckId>SA1101</CheckId>
            <Description>Verifies that calls to local members are prefixed with the 'this.' notation.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>PrefixLocalCallsWithThis</Name>
            <Namespace>Microsoft.StyleCop.CSharp.ReadabilityRules</Namespace>
            <RuleGroup>Member Access</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>180</ViolationID>
            <ID>180</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>182</ID>
          <Line>55</Line>
          <Message>The call to fCurrency must begin with the 'this.' prefix to indicate that the item is a member of the class.</Message>
          <SourceCodeFileID>4</SourceCodeFileID>
          <SourceCodeLine>      get { return fCurrency; }</SourceCodeLine>
          <Rules>
            <CheckId>SA1101</CheckId>
            <Description>Verifies that calls to local members are prefixed with the 'this.' notation.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>PrefixLocalCallsWithThis</Name>
            <Namespace>Microsoft.StyleCop.CSharp.ReadabilityRules</Namespace>
            <RuleGroup>Member Access</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>182</ViolationID>
            <ID>182</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>184</ID>
          <Line>62</Line>
          <Message>The call to IsZero must begin with the 'this.' prefix to indicate that the item is a member of the class.</Message>
          <SourceCodeFileID>4</SourceCodeFileID>
          <SourceCodeLine>      if (IsZero)</SourceCodeLine>
          <Rules>
            <CheckId>SA1101</CheckId>
            <Description>Verifies that calls to local members are prefixed with the 'this.' notation.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>PrefixLocalCallsWithThis</Name>
            <Namespace>Microsoft.StyleCop.CSharp.ReadabilityRules</Namespace>
            <RuleGroup>Member Access</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>184</ViolationID>
            <ID>184</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>186</ID>
          <Line>68</Line>
          <Message>The call to Currency must begin with the 'this.' prefix to indicate that the item is a member of the class.</Message>
          <SourceCodeFileID>4</SourceCodeFileID>
          <SourceCodeLine>        return aMoney.Currency.Equals(Currency)</SourceCodeLine>
          <Rules>
            <CheckId>SA1101</CheckId>
            <Description>Verifies that calls to local members are prefixed with the 'this.' notation.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>PrefixLocalCallsWithThis</Name>
            <Namespace>Microsoft.StyleCop.CSharp.ReadabilityRules</Namespace>
            <RuleGroup>Member Access</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>186</ViolationID>
            <ID>186</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>188</ID>
          <Line>69</Line>
          <Message>The call to Amount must begin with the 'this.' prefix to indicate that the item is a member of the class.</Message>
          <SourceCodeFileID>4</SourceCodeFileID>
          <SourceCodeLine>          &amp;&amp; Amount == aMoney.Amount;</SourceCodeLine>
          <Rules>
            <CheckId>SA1101</CheckId>
            <Description>Verifies that calls to local members are prefixed with the 'this.' notation.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>PrefixLocalCallsWithThis</Name>
            <Namespace>Microsoft.StyleCop.CSharp.ReadabilityRules</Namespace>
            <RuleGroup>Member Access</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>188</ViolationID>
            <ID>188</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>191</ID>
          <Line>76</Line>
          <Message>The call to fCurrency must begin with the 'this.' prefix to indicate that the item is a member of the class.</Message>
          <SourceCodeFileID>4</SourceCodeFileID>
          <SourceCodeLine>      return fCurrency.GetHashCode() + fAmount;</SourceCodeLine>
          <Rules>
            <CheckId>SA1101</CheckId>
            <Description>Verifies that calls to local members are prefixed with the 'this.' notation.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>PrefixLocalCallsWithThis</Name>
            <Namespace>Microsoft.StyleCop.CSharp.ReadabilityRules</Namespace>
            <RuleGroup>Member Access</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>191</ViolationID>
            <ID>191</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>193</ID>
          <Line>81</Line>
          <Message>The call to Amount must begin with the 'this.' prefix to indicate that the item is a member of the class.</Message>
          <SourceCodeFileID>4</SourceCodeFileID>
          <SourceCodeLine>      get { return Amount == 0; }</SourceCodeLine>
          <Rules>
            <CheckId>SA1101</CheckId>
            <Description>Verifies that calls to local members are prefixed with the 'this.' notation.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>PrefixLocalCallsWithThis</Name>
            <Namespace>Microsoft.StyleCop.CSharp.ReadabilityRules</Namespace>
            <RuleGroup>Member Access</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>193</ViolationID>
            <ID>193</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>196</ID>
          <Line>87</Line>
          <Message>The call to Amount must begin with the 'this.' prefix to indicate that the item is a member of the class.</Message>
          <SourceCodeFileID>4</SourceCodeFileID>
          <SourceCodeLine>      return new Money(Amount * factor, Currency);</SourceCodeLine>
          <Rules>
            <CheckId>SA1101</CheckId>
            <Description>Verifies that calls to local members are prefixed with the 'this.' notation.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>PrefixLocalCallsWithThis</Name>
            <Namespace>Microsoft.StyleCop.CSharp.ReadabilityRules</Namespace>
            <RuleGroup>Member Access</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>196</ViolationID>
            <ID>196</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>198</ID>
          <Line>93</Line>
          <Message>The call to Amount must begin with the 'this.' prefix to indicate that the item is a member of the class.</Message>
          <SourceCodeFileID>4</SourceCodeFileID>
          <SourceCodeLine>      return new Money(-Amount, Currency);</SourceCodeLine>
          <Rules>
            <CheckId>SA1101</CheckId>
            <Description>Verifies that calls to local members are prefixed with the 'this.' notation.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>PrefixLocalCallsWithThis</Name>
            <Namespace>Microsoft.StyleCop.CSharp.ReadabilityRules</Namespace>
            <RuleGroup>Member Access</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>198</ViolationID>
            <ID>198</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>200</ID>
          <Line>98</Line>
          <Message>The call to Add must begin with the 'this.' prefix to indicate that the item is a member of the class.</Message>
          <SourceCodeFileID>4</SourceCodeFileID>
          <SourceCodeLine>      return Add(m.Negate());</SourceCodeLine>
          <Rules>
            <CheckId>SA1101</CheckId>
            <Description>Verifies that calls to local members are prefixed with the 'this.' notation.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>PrefixLocalCallsWithThis</Name>
            <Namespace>Microsoft.StyleCop.CSharp.ReadabilityRules</Namespace>
            <RuleGroup>Member Access</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>200</ViolationID>
            <ID>200</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>202</ID>
          <Line>106</Line>
          <Message>The call to Amount must begin with the 'this.' prefix to indicate that the item is a member of the class.</Message>
          <SourceCodeFileID>4</SourceCodeFileID>
          <SourceCodeLine>      buffer.Append("[" + Amount + " " + Currency + "]");</SourceCodeLine>
          <Rules>
            <CheckId>SA1101</CheckId>
            <Description>Verifies that calls to local members are prefixed with the 'this.' notation.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>PrefixLocalCallsWithThis</Name>
            <Namespace>Microsoft.StyleCop.CSharp.ReadabilityRules</Namespace>
            <RuleGroup>Member Access</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>202</ViolationID>
            <ID>202</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>204</ID>
          <Line>1</Line>
          <Message>The comment is empty. Add text to the comment or remove it.</Message>
          <SourceCodeFileID>4</SourceCodeFileID>
          <SourceCodeLine>//</SourceCodeLine>
          <Rules>
            <CheckId>SA1120</CheckId>
            <Description>Validates that a comment contains description text.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>CommentsMustContainText</Name>
            <Namespace>Microsoft.StyleCop.CSharp.ReadabilityRules</Namespace>
            <RuleGroup>Comments</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>204</ViolationID>
            <ID>204</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>206</ID>
          <Line>4</Line>
          <Message>The comment is empty. Add text to the comment or remove it.</Message>
          <SourceCodeFileID>4</SourceCodeFileID>
          <SourceCodeLine>//</SourceCodeLine>
          <Rules>
            <CheckId>SA1120</CheckId>
            <Description>Validates that a comment contains description text.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>CommentsMustContainText</Name>
            <Namespace>Microsoft.StyleCop.CSharp.ReadabilityRules</Namespace>
            <RuleGroup>Comments</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>206</ViolationID>
            <ID>206</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>208</ID>
          <Line>18</Line>
          <Message>Use the built-in type alias 'string' rather than String or System.String.</Message>
          <SourceCodeFileID>4</SourceCodeFileID>
          <SourceCodeLine>    private String fCurrency;</SourceCodeLine>
          <Rules>
            <CheckId>SA1121</CheckId>
            <Description>Enforces the use of the built-in types rather than the actual types that they represent.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>UseBuiltInTypeAlias</Name>
            <Namespace>Microsoft.StyleCop.CSharp.ReadabilityRules</Namespace>
            <RuleGroup>Types</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>208</ViolationID>
            <ID>208</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>210</ID>
          <Line>22</Line>
          <Message>Use the built-in type alias 'string' rather than String or System.String.</Message>
          <SourceCodeFileID>4</SourceCodeFileID>
          <SourceCodeLine>    public Money(int amount, String currency)</SourceCodeLine>
          <Rules>
            <CheckId>SA1121</CheckId>
            <Description>Enforces the use of the built-in types rather than the actual types that they represent.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>UseBuiltInTypeAlias</Name>
            <Namespace>Microsoft.StyleCop.CSharp.ReadabilityRules</Namespace>
            <RuleGroup>Types</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>210</ViolationID>
            <ID>210</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>212</ID>
          <Line>53</Line>
          <Message>Use the built-in type alias 'string' rather than String or System.String.</Message>
          <SourceCodeFileID>4</SourceCodeFileID>
          <SourceCodeLine>    public String Currency</SourceCodeLine>
          <Rules>
            <CheckId>SA1121</CheckId>
            <Description>Enforces the use of the built-in types rather than the actual types that they represent.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>UseBuiltInTypeAlias</Name>
            <Namespace>Microsoft.StyleCop.CSharp.ReadabilityRules</Namespace>
            <RuleGroup>Types</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>212</ViolationID>
            <ID>212</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>214</ID>
          <Line>58</Line>
          <Message>Use the built-in type alias 'object' rather than Object or System.Object.</Message>
          <SourceCodeFileID>4</SourceCodeFileID>
          <SourceCodeLine>    public override bool Equals(Object anObject)</SourceCodeLine>
          <Rules>
            <CheckId>SA1121</CheckId>
            <Description>Enforces the use of the built-in types rather than the actual types that they represent.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>UseBuiltInTypeAlias</Name>
            <Namespace>Microsoft.StyleCop.CSharp.ReadabilityRules</Namespace>
            <RuleGroup>Types</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>214</ViolationID>
            <ID>214</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>221</ID>
          <Line>101</Line>
          <Message>Use the built-in type alias 'string' rather than String or System.String.</Message>
          <SourceCodeFileID>4</SourceCodeFileID>
          <SourceCodeLine>    public override String ToString()</SourceCodeLine>
          <Rules>
            <CheckId>SA1121</CheckId>
            <Description>Enforces the use of the built-in types rather than the actual types that they represent.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>UseBuiltInTypeAlias</Name>
            <Namespace>Microsoft.StyleCop.CSharp.ReadabilityRules</Namespace>
            <RuleGroup>Types</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>221</ViolationID>
            <ID>221</ID>
          </Rules>
        </Violations>
      </SourceCodeFiles>
      <SourceCodeFiles>
        <ID>5</ID>
        <Path>C:\Work\CodeQuality\Temp\Example\Example.Core\MoneyBag.cs</Path>
        <TimeStamp>2009-04-30T10:09:26.6924213+02:00</TimeStamp>
        <Type>CS</Type>
        <Name>MoneyBag.cs</Name>
        <CodeProjectID>1</CodeProjectID>
        <Violations>
          <ID>58</ID>
          <Line>16</Line>
          <Message>The documentation header must not contain blank lines. Use the 'para' tag to insert line breaks within documentation text.</Message>
          <SourceCodeFileID>5</SourceCodeFileID>
          <SourceCodeLine>  ///</SourceCodeLine>
          <Rules>
            <CheckId>SA1644</CheckId>
            <Description>Verifies that a documentation header does not contain blank lines.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>DocumentationHeadersMustNotContainBlankLines</Name>
            <Namespace>Microsoft.StyleCop.CSharp.DocumentationRules</Namespace>
            <RuleGroup>Element Documentation</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>58</ViolationID>
            <ID>58</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>59</ID>
          <Line>21</Line>
          <Message>The field must have a documentation header.</Message>
          <SourceCodeFileID>5</SourceCodeFileID>
          <SourceCodeLine>    private ArrayList fMonies = new ArrayList(5);</SourceCodeLine>
          <Rules>
            <CheckId>SA1600</CheckId>
            <Description>Validates that an element contains a properly formatted documentation header.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ElementsMustBeDocumented</Name>
            <Namespace>Microsoft.StyleCop.CSharp.DocumentationRules</Namespace>
            <RuleGroup>Element Documentation</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>59</ViolationID>
            <ID>59</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>60</ID>
          <Line>23</Line>
          <Message>The constructor must have a documentation header.</Message>
          <SourceCodeFileID>5</SourceCodeFileID>
          <SourceCodeLine>    public  MoneyBag()</SourceCodeLine>
          <Rules>
            <CheckId>SA1600</CheckId>
            <Description>Validates that an element contains a properly formatted documentation header.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ElementsMustBeDocumented</Name>
            <Namespace>Microsoft.StyleCop.CSharp.DocumentationRules</Namespace>
            <RuleGroup>Element Documentation</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>60</ViolationID>
            <ID>60</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>61</ID>
          <Line>26</Line>
          <Message>The constructor must have a documentation header.</Message>
          <SourceCodeFileID>5</SourceCodeFileID>
          <SourceCodeLine>    public MoneyBag(Money[] bag)</SourceCodeLine>
          <Rules>
            <CheckId>SA1600</CheckId>
            <Description>Validates that an element contains a properly formatted documentation header.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ElementsMustBeDocumented</Name>
            <Namespace>Microsoft.StyleCop.CSharp.DocumentationRules</Namespace>
            <RuleGroup>Element Documentation</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>61</ViolationID>
            <ID>61</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>62</ID>
          <Line>35</Line>
          <Message>The constructor must have a documentation header.</Message>
          <SourceCodeFileID>5</SourceCodeFileID>
          <SourceCodeLine>    public MoneyBag(Money m1, Money m2)</SourceCodeLine>
          <Rules>
            <CheckId>SA1600</CheckId>
            <Description>Validates that an element contains a properly formatted documentation header.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ElementsMustBeDocumented</Name>
            <Namespace>Microsoft.StyleCop.CSharp.DocumentationRules</Namespace>
            <RuleGroup>Element Documentation</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>62</ViolationID>
            <ID>62</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>64</ID>
          <Line>41</Line>
          <Message>The constructor must have a documentation header.</Message>
          <SourceCodeFileID>5</SourceCodeFileID>
          <SourceCodeLine>    public MoneyBag(Money m, MoneyBag bag)</SourceCodeLine>
          <Rules>
            <CheckId>SA1600</CheckId>
            <Description>Validates that an element contains a properly formatted documentation header.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ElementsMustBeDocumented</Name>
            <Namespace>Microsoft.StyleCop.CSharp.DocumentationRules</Namespace>
            <RuleGroup>Element Documentation</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>64</ViolationID>
            <ID>64</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>66</ID>
          <Line>47</Line>
          <Message>The constructor must have a documentation header.</Message>
          <SourceCodeFileID>5</SourceCodeFileID>
          <SourceCodeLine>    public MoneyBag(MoneyBag m1, MoneyBag m2)</SourceCodeLine>
          <Rules>
            <CheckId>SA1600</CheckId>
            <Description>Validates that an element contains a properly formatted documentation header.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ElementsMustBeDocumented</Name>
            <Namespace>Microsoft.StyleCop.CSharp.DocumentationRules</Namespace>
            <RuleGroup>Element Documentation</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>66</ViolationID>
            <ID>66</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>68</ID>
          <Line>53</Line>
          <Message>The method must have a documentation header.</Message>
          <SourceCodeFileID>5</SourceCodeFileID>
          <SourceCodeLine>    public IMoney Add(IMoney m)</SourceCodeLine>
          <Rules>
            <CheckId>SA1600</CheckId>
            <Description>Validates that an element contains a properly formatted documentation header.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ElementsMustBeDocumented</Name>
            <Namespace>Microsoft.StyleCop.CSharp.DocumentationRules</Namespace>
            <RuleGroup>Element Documentation</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>68</ViolationID>
            <ID>68</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>70</ID>
          <Line>58</Line>
          <Message>The method must have a documentation header.</Message>
          <SourceCodeFileID>5</SourceCodeFileID>
          <SourceCodeLine>    public IMoney AddMoney(Money m)</SourceCodeLine>
          <Rules>
            <CheckId>SA1600</CheckId>
            <Description>Validates that an element contains a properly formatted documentation header.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ElementsMustBeDocumented</Name>
            <Namespace>Microsoft.StyleCop.CSharp.DocumentationRules</Namespace>
            <RuleGroup>Element Documentation</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>70</ViolationID>
            <ID>70</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>72</ID>
          <Line>63</Line>
          <Message>The method must have a documentation header.</Message>
          <SourceCodeFileID>5</SourceCodeFileID>
          <SourceCodeLine>    public IMoney AddMoneyBag(MoneyBag s)</SourceCodeLine>
          <Rules>
            <CheckId>SA1600</CheckId>
            <Description>Validates that an element contains a properly formatted documentation header.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ElementsMustBeDocumented</Name>
            <Namespace>Microsoft.StyleCop.CSharp.DocumentationRules</Namespace>
            <RuleGroup>Element Documentation</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>72</ViolationID>
            <ID>72</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>76</ID>
          <Line>68</Line>
          <Message>The method must have a documentation header.</Message>
          <SourceCodeFileID>5</SourceCodeFileID>
          <SourceCodeLine>    private void AppendBag(MoneyBag aBag)</SourceCodeLine>
          <Rules>
            <CheckId>SA1600</CheckId>
            <Description>Validates that an element contains a properly formatted documentation header.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ElementsMustBeDocumented</Name>
            <Namespace>Microsoft.StyleCop.CSharp.DocumentationRules</Namespace>
            <RuleGroup>Element Documentation</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>76</ViolationID>
            <ID>76</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>78</ID>
          <Line>73</Line>
          <Message>The method must have a documentation header.</Message>
          <SourceCodeFileID>5</SourceCodeFileID>
          <SourceCodeLine>    private void AppendMoney(Money aMoney)</SourceCodeLine>
          <Rules>
            <CheckId>SA1600</CheckId>
            <Description>Validates that an element contains a properly formatted documentation header.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ElementsMustBeDocumented</Name>
            <Namespace>Microsoft.StyleCop.CSharp.DocumentationRules</Namespace>
            <RuleGroup>Element Documentation</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>78</ViolationID>
            <ID>78</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>80</ID>
          <Line>87</Line>
          <Message>The method must have a documentation header.</Message>
          <SourceCodeFileID>5</SourceCodeFileID>
          <SourceCodeLine>    private bool Contains(Money aMoney)</SourceCodeLine>
          <Rules>
            <CheckId>SA1600</CheckId>
            <Description>Validates that an element contains a properly formatted documentation header.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ElementsMustBeDocumented</Name>
            <Namespace>Microsoft.StyleCop.CSharp.DocumentationRules</Namespace>
            <RuleGroup>Element Documentation</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>80</ViolationID>
            <ID>80</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>82</ID>
          <Line>92</Line>
          <Message>The method must have a documentation header.</Message>
          <SourceCodeFileID>5</SourceCodeFileID>
          <SourceCodeLine>    public override bool Equals(Object anObject)</SourceCodeLine>
          <Rules>
            <CheckId>SA1600</CheckId>
            <Description>Validates that an element contains a properly formatted documentation header.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ElementsMustBeDocumented</Name>
            <Namespace>Microsoft.StyleCop.CSharp.DocumentationRules</Namespace>
            <RuleGroup>Element Documentation</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>82</ViolationID>
            <ID>82</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>85</ID>
          <Line>113</Line>
          <Message>The method must have a documentation header.</Message>
          <SourceCodeFileID>5</SourceCodeFileID>
          <SourceCodeLine>    private Money FindMoney(String currency)</SourceCodeLine>
          <Rules>
            <CheckId>SA1600</CheckId>
            <Description>Validates that an element contains a properly formatted documentation header.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ElementsMustBeDocumented</Name>
            <Namespace>Microsoft.StyleCop.CSharp.DocumentationRules</Namespace>
            <RuleGroup>Element Documentation</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>85</ViolationID>
            <ID>85</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>86</ID>
          <Line>122</Line>
          <Message>The method must have a documentation header.</Message>
          <SourceCodeFileID>5</SourceCodeFileID>
          <SourceCodeLine>    public override int GetHashCode()</SourceCodeLine>
          <Rules>
            <CheckId>SA1600</CheckId>
            <Description>Validates that an element contains a properly formatted documentation header.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ElementsMustBeDocumented</Name>
            <Namespace>Microsoft.StyleCop.CSharp.DocumentationRules</Namespace>
            <RuleGroup>Element Documentation</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>86</ViolationID>
            <ID>86</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>88</ID>
          <Line>131</Line>
          <Message>The property must have a documentation header.</Message>
          <SourceCodeFileID>5</SourceCodeFileID>
          <SourceCodeLine>    public bool IsZero</SourceCodeLine>
          <Rules>
            <CheckId>SA1600</CheckId>
            <Description>Validates that an element contains a properly formatted documentation header.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ElementsMustBeDocumented</Name>
            <Namespace>Microsoft.StyleCop.CSharp.DocumentationRules</Namespace>
            <RuleGroup>Element Documentation</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>88</ViolationID>
            <ID>88</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>90</ID>
          <Line>135</Line>
          <Message>The method must have a documentation header.</Message>
          <SourceCodeFileID>5</SourceCodeFileID>
          <SourceCodeLine>    public IMoney Multiply(int factor)</SourceCodeLine>
          <Rules>
            <CheckId>SA1600</CheckId>
            <Description>Validates that an element contains a properly formatted documentation header.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ElementsMustBeDocumented</Name>
            <Namespace>Microsoft.StyleCop.CSharp.DocumentationRules</Namespace>
            <RuleGroup>Element Documentation</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>90</ViolationID>
            <ID>90</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>91</ID>
          <Line>147</Line>
          <Message>The method must have a documentation header.</Message>
          <SourceCodeFileID>5</SourceCodeFileID>
          <SourceCodeLine>    public IMoney Negate()</SourceCodeLine>
          <Rules>
            <CheckId>SA1600</CheckId>
            <Description>Validates that an element contains a properly formatted documentation header.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ElementsMustBeDocumented</Name>
            <Namespace>Microsoft.StyleCop.CSharp.DocumentationRules</Namespace>
            <RuleGroup>Element Documentation</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>91</ViolationID>
            <ID>91</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>92</ID>
          <Line>156</Line>
          <Message>The method must have a documentation header.</Message>
          <SourceCodeFileID>5</SourceCodeFileID>
          <SourceCodeLine>    private IMoney Simplify()</SourceCodeLine>
          <Rules>
            <CheckId>SA1600</CheckId>
            <Description>Validates that an element contains a properly formatted documentation header.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ElementsMustBeDocumented</Name>
            <Namespace>Microsoft.StyleCop.CSharp.DocumentationRules</Namespace>
            <RuleGroup>Element Documentation</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>92</ViolationID>
            <ID>92</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>94</ID>
          <Line>162</Line>
          <Message>The method must have a documentation header.</Message>
          <SourceCodeFileID>5</SourceCodeFileID>
          <SourceCodeLine>    public IMoney Subtract(IMoney m)</SourceCodeLine>
          <Rules>
            <CheckId>SA1600</CheckId>
            <Description>Validates that an element contains a properly formatted documentation header.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ElementsMustBeDocumented</Name>
            <Namespace>Microsoft.StyleCop.CSharp.DocumentationRules</Namespace>
            <RuleGroup>Element Documentation</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>94</ViolationID>
            <ID>94</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>95</ID>
          <Line>166</Line>
          <Message>The method must have a documentation header.</Message>
          <SourceCodeFileID>5</SourceCodeFileID>
          <SourceCodeLine>    public override String ToString()</SourceCodeLine>
          <Rules>
            <CheckId>SA1600</CheckId>
            <Description>Validates that an element contains a properly formatted documentation header.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ElementsMustBeDocumented</Name>
            <Namespace>Microsoft.StyleCop.CSharp.DocumentationRules</Namespace>
            <RuleGroup>Element Documentation</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>95</ViolationID>
            <ID>95</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>96</ID>
          <Line>1</Line>
          <Message>The file has no header, the header Xml is invalid, or the header is not located at the top of the file.</Message>
          <SourceCodeFileID>5</SourceCodeFileID>
          <SourceCodeLine>using System;</SourceCodeLine>
          <Rules>
            <CheckId>SA1633</CheckId>
            <Description>Validates that a file contains a properly formatted file header.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>FileMustHaveHeader</Name>
            <Namespace>Microsoft.StyleCop.CSharp.DocumentationRules</Namespace>
            <RuleGroup>File Headers</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>96</ViolationID>
            <ID>96</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>97</ID>
          <Line>26</Line>
          <Message>Adjacent elements must be separated by a blank line.</Message>
          <SourceCodeFileID>5</SourceCodeFileID>
          <SourceCodeLine>    public MoneyBag(Money[] bag)</SourceCodeLine>
          <Rules>
            <CheckId>SA1516</CheckId>
            <Description>Validates that adjacent elements are separated by a blank line.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ElementsMustBeSeparatedByBlankLine</Name>
            <Namespace>Microsoft.StyleCop.CSharp.LayoutRules</Namespace>
            <RuleGroup>Line Spacing</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>97</ViolationID>
            <ID>97</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>98</ID>
          <Line>73</Line>
          <Message>Adjacent elements must be separated by a blank line.</Message>
          <SourceCodeFileID>5</SourceCodeFileID>
          <SourceCodeLine>    private void AppendMoney(Money aMoney)</SourceCodeLine>
          <Rules>
            <CheckId>SA1516</CheckId>
            <Description>Validates that adjacent elements are separated by a blank line.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ElementsMustBeSeparatedByBlankLine</Name>
            <Namespace>Microsoft.StyleCop.CSharp.LayoutRules</Namespace>
            <RuleGroup>Line Spacing</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>98</ViolationID>
            <ID>98</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>99</ID>
          <Line>87</Line>
          <Message>Adjacent elements must be separated by a blank line.</Message>
          <SourceCodeFileID>5</SourceCodeFileID>
          <SourceCodeLine>    private bool Contains(Money aMoney)</SourceCodeLine>
          <Rules>
            <CheckId>SA1516</CheckId>
            <Description>Validates that adjacent elements are separated by a blank line.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ElementsMustBeSeparatedByBlankLine</Name>
            <Namespace>Microsoft.StyleCop.CSharp.LayoutRules</Namespace>
            <RuleGroup>Line Spacing</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>99</ViolationID>
            <ID>99</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>100</ID>
          <Line>92</Line>
          <Message>Adjacent elements must be separated by a blank line.</Message>
          <SourceCodeFileID>5</SourceCodeFileID>
          <SourceCodeLine>    public override bool Equals(Object anObject)</SourceCodeLine>
          <Rules>
            <CheckId>SA1516</CheckId>
            <Description>Validates that adjacent elements are separated by a blank line.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ElementsMustBeSeparatedByBlankLine</Name>
            <Namespace>Microsoft.StyleCop.CSharp.LayoutRules</Namespace>
            <RuleGroup>Line Spacing</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>100</ViolationID>
            <ID>100</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>101</ID>
          <Line>113</Line>
          <Message>Adjacent elements must be separated by a blank line.</Message>
          <SourceCodeFileID>5</SourceCodeFileID>
          <SourceCodeLine>    private Money FindMoney(String currency)</SourceCodeLine>
          <Rules>
            <CheckId>SA1516</CheckId>
            <Description>Validates that adjacent elements are separated by a blank line.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ElementsMustBeSeparatedByBlankLine</Name>
            <Namespace>Microsoft.StyleCop.CSharp.LayoutRules</Namespace>
            <RuleGroup>Line Spacing</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>101</ViolationID>
            <ID>101</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>102</ID>
          <Line>122</Line>
          <Message>Adjacent elements must be separated by a blank line.</Message>
          <SourceCodeFileID>5</SourceCodeFileID>
          <SourceCodeLine>    public override int GetHashCode()</SourceCodeLine>
          <Rules>
            <CheckId>SA1516</CheckId>
            <Description>Validates that adjacent elements are separated by a blank line.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ElementsMustBeSeparatedByBlankLine</Name>
            <Namespace>Microsoft.StyleCop.CSharp.LayoutRules</Namespace>
            <RuleGroup>Line Spacing</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>102</ViolationID>
            <ID>102</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>104</ID>
          <Line>131</Line>
          <Message>Adjacent elements must be separated by a blank line.</Message>
          <SourceCodeFileID>5</SourceCodeFileID>
          <SourceCodeLine>    public bool IsZero</SourceCodeLine>
          <Rules>
            <CheckId>SA1516</CheckId>
            <Description>Validates that adjacent elements are separated by a blank line.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ElementsMustBeSeparatedByBlankLine</Name>
            <Namespace>Microsoft.StyleCop.CSharp.LayoutRules</Namespace>
            <RuleGroup>Line Spacing</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>104</ViolationID>
            <ID>104</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>105</ID>
          <Line>135</Line>
          <Message>Adjacent elements must be separated by a blank line.</Message>
          <SourceCodeFileID>5</SourceCodeFileID>
          <SourceCodeLine>    public IMoney Multiply(int factor)</SourceCodeLine>
          <Rules>
            <CheckId>SA1516</CheckId>
            <Description>Validates that adjacent elements are separated by a blank line.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ElementsMustBeSeparatedByBlankLine</Name>
            <Namespace>Microsoft.StyleCop.CSharp.LayoutRules</Namespace>
            <RuleGroup>Line Spacing</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>105</ViolationID>
            <ID>105</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>106</ID>
          <Line>147</Line>
          <Message>Adjacent elements must be separated by a blank line.</Message>
          <SourceCodeFileID>5</SourceCodeFileID>
          <SourceCodeLine>    public IMoney Negate()</SourceCodeLine>
          <Rules>
            <CheckId>SA1516</CheckId>
            <Description>Validates that adjacent elements are separated by a blank line.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ElementsMustBeSeparatedByBlankLine</Name>
            <Namespace>Microsoft.StyleCop.CSharp.LayoutRules</Namespace>
            <RuleGroup>Line Spacing</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>106</ViolationID>
            <ID>106</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>108</ID>
          <Line>156</Line>
          <Message>Adjacent elements must be separated by a blank line.</Message>
          <SourceCodeFileID>5</SourceCodeFileID>
          <SourceCodeLine>    private IMoney Simplify()</SourceCodeLine>
          <Rules>
            <CheckId>SA1516</CheckId>
            <Description>Validates that adjacent elements are separated by a blank line.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ElementsMustBeSeparatedByBlankLine</Name>
            <Namespace>Microsoft.StyleCop.CSharp.LayoutRules</Namespace>
            <RuleGroup>Line Spacing</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>108</ViolationID>
            <ID>108</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>109</ID>
          <Line>162</Line>
          <Message>Adjacent elements must be separated by a blank line.</Message>
          <SourceCodeFileID>5</SourceCodeFileID>
          <SourceCodeLine>    public IMoney Subtract(IMoney m)</SourceCodeLine>
          <Rules>
            <CheckId>SA1516</CheckId>
            <Description>Validates that adjacent elements are separated by a blank line.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ElementsMustBeSeparatedByBlankLine</Name>
            <Namespace>Microsoft.StyleCop.CSharp.LayoutRules</Namespace>
            <RuleGroup>Line Spacing</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>109</ViolationID>
            <ID>109</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>110</ID>
          <Line>166</Line>
          <Message>Adjacent elements must be separated by a blank line.</Message>
          <SourceCodeFileID>5</SourceCodeFileID>
          <SourceCodeLine>    public override String ToString()</SourceCodeLine>
          <Rules>
            <CheckId>SA1516</CheckId>
            <Description>Validates that adjacent elements are separated by a blank line.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ElementsMustBeSeparatedByBlankLine</Name>
            <Namespace>Microsoft.StyleCop.CSharp.LayoutRules</Namespace>
            <RuleGroup>Line Spacing</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>110</ViolationID>
            <ID>110</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>111</ID>
          <Line>31</Line>
          <Message>The body of the if statement must be wrapped in opening and closing curly brackets.</Message>
          <SourceCodeFileID>5</SourceCodeFileID>
          <SourceCodeLine>          AppendMoney(bag[i]);</SourceCodeLine>
          <Rules>
            <CheckId>SA1503</CheckId>
            <Description>Validates that opening and closing curly brackets are always included, even if the statement type allows them to be omitted.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>CurlyBracketsMustNotBeOmitted</Name>
            <Namespace>Microsoft.StyleCop.CSharp.LayoutRules</Namespace>
            <RuleGroup>Curly Brackets</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>111</ViolationID>
            <ID>111</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>115</ID>
          <Line>71</Line>
          <Message>The body of the foreach statement must be wrapped in opening and closing curly brackets.</Message>
          <SourceCodeFileID>5</SourceCodeFileID>
          <SourceCodeLine>        AppendMoney(m);</SourceCodeLine>
          <Rules>
            <CheckId>SA1503</CheckId>
            <Description>Validates that opening and closing curly brackets are always included, even if the statement type allows them to be omitted.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>CurlyBracketsMustNotBeOmitted</Name>
            <Namespace>Microsoft.StyleCop.CSharp.LayoutRules</Namespace>
            <RuleGroup>Curly Brackets</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>115</ViolationID>
            <ID>115</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>116</ID>
          <Line>84</Line>
          <Message>The body of the if statement must be wrapped in opening and closing curly brackets.</Message>
          <SourceCodeFileID>5</SourceCodeFileID>
          <SourceCodeLine>        return;</SourceCodeLine>
          <Rules>
            <CheckId>SA1503</CheckId>
            <Description>Validates that opening and closing curly brackets are always included, even if the statement type allows them to be omitted.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>CurlyBracketsMustNotBeOmitted</Name>
            <Namespace>Microsoft.StyleCop.CSharp.LayoutRules</Namespace>
            <RuleGroup>Curly Brackets</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>116</ViolationID>
            <ID>116</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>118</ID>
          <Line>95</Line>
          <Message>The body of the if statement must be wrapped in opening and closing curly brackets.</Message>
          <SourceCodeFileID>5</SourceCodeFileID>
          <SourceCodeLine>        if (anObject is IMoney)</SourceCodeLine>
          <Rules>
            <CheckId>SA1503</CheckId>
            <Description>Validates that opening and closing curly brackets are always included, even if the statement type allows them to be omitted.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>CurlyBracketsMustNotBeOmitted</Name>
            <Namespace>Microsoft.StyleCop.CSharp.LayoutRules</Namespace>
            <RuleGroup>Curly Brackets</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>118</ViolationID>
            <ID>118</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>119</ID>
          <Line>96</Line>
          <Message>The body of the if statement must be wrapped in opening and closing curly brackets.</Message>
          <SourceCodeFileID>5</SourceCodeFileID>
          <SourceCodeLine>          return ((IMoney)anObject).IsZero;</SourceCodeLine>
          <Rules>
            <CheckId>SA1503</CheckId>
            <Description>Validates that opening and closing curly brackets are always included, even if the statement type allows them to be omitted.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>CurlyBracketsMustNotBeOmitted</Name>
            <Namespace>Microsoft.StyleCop.CSharp.LayoutRules</Namespace>
            <RuleGroup>Curly Brackets</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>119</ViolationID>
            <ID>119</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>120</ID>
          <Line>102</Line>
          <Message>The body of the if statement must be wrapped in opening and closing curly brackets.</Message>
          <SourceCodeFileID>5</SourceCodeFileID>
          <SourceCodeLine>          return false;</SourceCodeLine>
          <Rules>
            <CheckId>SA1503</CheckId>
            <Description>Validates that opening and closing curly brackets are always included, even if the statement type allows them to be omitted.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>CurlyBracketsMustNotBeOmitted</Name>
            <Namespace>Microsoft.StyleCop.CSharp.LayoutRules</Namespace>
            <RuleGroup>Curly Brackets</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>120</ViolationID>
            <ID>120</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>121</ID>
          <Line>107</Line>
          <Message>The body of the if statement must be wrapped in opening and closing curly brackets.</Message>
          <SourceCodeFileID>5</SourceCodeFileID>
          <SourceCodeLine>            return false;</SourceCodeLine>
          <Rules>
            <CheckId>SA1503</CheckId>
            <Description>Validates that opening and closing curly brackets are always included, even if the statement type allows them to be omitted.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>CurlyBracketsMustNotBeOmitted</Name>
            <Namespace>Microsoft.StyleCop.CSharp.LayoutRules</Namespace>
            <RuleGroup>Curly Brackets</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>121</ViolationID>
            <ID>121</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>122</ID>
          <Line>118</Line>
          <Message>The body of the if statement must be wrapped in opening and closing curly brackets.</Message>
          <SourceCodeFileID>5</SourceCodeFileID>
          <SourceCodeLine>          return m;</SourceCodeLine>
          <Rules>
            <CheckId>SA1503</CheckId>
            <Description>Validates that opening and closing curly brackets are always included, even if the statement type allows them to be omitted.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>CurlyBracketsMustNotBeOmitted</Name>
            <Namespace>Microsoft.StyleCop.CSharp.LayoutRules</Namespace>
            <RuleGroup>Curly Brackets</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>122</ViolationID>
            <ID>122</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>123</ID>
          <Line>159</Line>
          <Message>The body of the if statement must be wrapped in opening and closing curly brackets.</Message>
          <SourceCodeFileID>5</SourceCodeFileID>
          <SourceCodeLine>        return (IMoney)fMonies[0];</SourceCodeLine>
          <Rules>
            <CheckId>SA1503</CheckId>
            <Description>Validates that opening and closing curly brackets are always included, even if the statement type allows them to be omitted.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>CurlyBracketsMustNotBeOmitted</Name>
            <Namespace>Microsoft.StyleCop.CSharp.LayoutRules</Namespace>
            <RuleGroup>Curly Brackets</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>123</ViolationID>
            <ID>123</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>124</ID>
          <Line>171</Line>
          <Message>The body of the foreach statement must be wrapped in opening and closing curly brackets.</Message>
          <SourceCodeFileID>5</SourceCodeFileID>
          <SourceCodeLine>        buffer.Append(m);</SourceCodeLine>
          <Rules>
            <CheckId>SA1503</CheckId>
            <Description>Validates that opening and closing curly brackets are always included, even if the statement type allows them to be omitted.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>CurlyBracketsMustNotBeOmitted</Name>
            <Namespace>Microsoft.StyleCop.CSharp.LayoutRules</Namespace>
            <RuleGroup>Curly Brackets</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>124</ViolationID>
            <ID>124</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>125</ID>
          <Line>25</Line>
          <Message>Statements or elements wrapped in curly brackets must be followed by a blank line.</Message>
          <SourceCodeFileID>5</SourceCodeFileID>
          <SourceCodeLine>    }</SourceCodeLine>
          <Rules>
            <CheckId>SA1513</CheckId>
            <Description>Validates that a bracketed statement or element is followed by a blank line.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ClosingCurlyBracketMustBeFollowedByBlankLine</Name>
            <Namespace>Microsoft.StyleCop.CSharp.LayoutRules</Namespace>
            <RuleGroup>Line Spacing</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>125</ViolationID>
            <ID>125</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>126</ID>
          <Line>72</Line>
          <Message>Statements or elements wrapped in curly brackets must be followed by a blank line.</Message>
          <SourceCodeFileID>5</SourceCodeFileID>
          <SourceCodeLine>    }</SourceCodeLine>
          <Rules>
            <CheckId>SA1513</CheckId>
            <Description>Validates that a bracketed statement or element is followed by a blank line.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ClosingCurlyBracketMustBeFollowedByBlankLine</Name>
            <Namespace>Microsoft.StyleCop.CSharp.LayoutRules</Namespace>
            <RuleGroup>Line Spacing</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>126</ViolationID>
            <ID>126</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>127</ID>
          <Line>80</Line>
          <Message>Statements or elements wrapped in curly brackets must be followed by a blank line.</Message>
          <SourceCodeFileID>5</SourceCodeFileID>
          <SourceCodeLine>      }</SourceCodeLine>
          <Rules>
            <CheckId>SA1513</CheckId>
            <Description>Validates that a bracketed statement or element is followed by a blank line.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ClosingCurlyBracketMustBeFollowedByBlankLine</Name>
            <Namespace>Microsoft.StyleCop.CSharp.LayoutRules</Namespace>
            <RuleGroup>Line Spacing</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>127</ViolationID>
            <ID>127</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>128</ID>
          <Line>86</Line>
          <Message>Statements or elements wrapped in curly brackets must be followed by a blank line.</Message>
          <SourceCodeFileID>5</SourceCodeFileID>
          <SourceCodeLine>    }</SourceCodeLine>
          <Rules>
            <CheckId>SA1513</CheckId>
            <Description>Validates that a bracketed statement or element is followed by a blank line.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ClosingCurlyBracketMustBeFollowedByBlankLine</Name>
            <Namespace>Microsoft.StyleCop.CSharp.LayoutRules</Namespace>
            <RuleGroup>Line Spacing</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>128</ViolationID>
            <ID>128</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>129</ID>
          <Line>91</Line>
          <Message>Statements or elements wrapped in curly brackets must be followed by a blank line.</Message>
          <SourceCodeFileID>5</SourceCodeFileID>
          <SourceCodeLine>    }</SourceCodeLine>
          <Rules>
            <CheckId>SA1513</CheckId>
            <Description>Validates that a bracketed statement or element is followed by a blank line.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ClosingCurlyBracketMustBeFollowedByBlankLine</Name>
            <Namespace>Microsoft.StyleCop.CSharp.LayoutRules</Namespace>
            <RuleGroup>Line Spacing</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>129</ViolationID>
            <ID>129</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>130</ID>
          <Line>108</Line>
          <Message>Statements or elements wrapped in curly brackets must be followed by a blank line.</Message>
          <SourceCodeFileID>5</SourceCodeFileID>
          <SourceCodeLine>        }</SourceCodeLine>
          <Rules>
            <CheckId>SA1513</CheckId>
            <Description>Validates that a bracketed statement or element is followed by a blank line.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ClosingCurlyBracketMustBeFollowedByBlankLine</Name>
            <Namespace>Microsoft.StyleCop.CSharp.LayoutRules</Namespace>
            <RuleGroup>Line Spacing</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>130</ViolationID>
            <ID>130</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>131</ID>
          <Line>110</Line>
          <Message>Statements or elements wrapped in curly brackets must be followed by a blank line.</Message>
          <SourceCodeFileID>5</SourceCodeFileID>
          <SourceCodeLine>      }</SourceCodeLine>
          <Rules>
            <CheckId>SA1513</CheckId>
            <Description>Validates that a bracketed statement or element is followed by a blank line.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ClosingCurlyBracketMustBeFollowedByBlankLine</Name>
            <Namespace>Microsoft.StyleCop.CSharp.LayoutRules</Namespace>
            <RuleGroup>Line Spacing</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>131</ViolationID>
            <ID>131</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>132</ID>
          <Line>112</Line>
          <Message>Statements or elements wrapped in curly brackets must be followed by a blank line.</Message>
          <SourceCodeFileID>5</SourceCodeFileID>
          <SourceCodeLine>    }</SourceCodeLine>
          <Rules>
            <CheckId>SA1513</CheckId>
            <Description>Validates that a bracketed statement or element is followed by a blank line.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ClosingCurlyBracketMustBeFollowedByBlankLine</Name>
            <Namespace>Microsoft.StyleCop.CSharp.LayoutRules</Namespace>
            <RuleGroup>Line Spacing</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>132</ViolationID>
            <ID>132</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>133</ID>
          <Line>119</Line>
          <Message>Statements or elements wrapped in curly brackets must be followed by a blank line.</Message>
          <SourceCodeFileID>5</SourceCodeFileID>
          <SourceCodeLine>      }</SourceCodeLine>
          <Rules>
            <CheckId>SA1513</CheckId>
            <Description>Validates that a bracketed statement or element is followed by a blank line.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ClosingCurlyBracketMustBeFollowedByBlankLine</Name>
            <Namespace>Microsoft.StyleCop.CSharp.LayoutRules</Namespace>
            <RuleGroup>Line Spacing</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>133</ViolationID>
            <ID>133</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>134</ID>
          <Line>121</Line>
          <Message>Statements or elements wrapped in curly brackets must be followed by a blank line.</Message>
          <SourceCodeFileID>5</SourceCodeFileID>
          <SourceCodeLine>    }</SourceCodeLine>
          <Rules>
            <CheckId>SA1513</CheckId>
            <Description>Validates that a bracketed statement or element is followed by a blank line.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ClosingCurlyBracketMustBeFollowedByBlankLine</Name>
            <Namespace>Microsoft.StyleCop.CSharp.LayoutRules</Namespace>
            <RuleGroup>Line Spacing</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>134</ViolationID>
            <ID>134</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>135</ID>
          <Line>128</Line>
          <Message>Statements or elements wrapped in curly brackets must be followed by a blank line.</Message>
          <SourceCodeFileID>5</SourceCodeFileID>
          <SourceCodeLine>      }</SourceCodeLine>
          <Rules>
            <CheckId>SA1513</CheckId>
            <Description>Validates that a bracketed statement or element is followed by a blank line.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ClosingCurlyBracketMustBeFollowedByBlankLine</Name>
            <Namespace>Microsoft.StyleCop.CSharp.LayoutRules</Namespace>
            <RuleGroup>Line Spacing</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>135</ViolationID>
            <ID>135</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>136</ID>
          <Line>130</Line>
          <Message>Statements or elements wrapped in curly brackets must be followed by a blank line.</Message>
          <SourceCodeFileID>5</SourceCodeFileID>
          <SourceCodeLine>    }</SourceCodeLine>
          <Rules>
            <CheckId>SA1513</CheckId>
            <Description>Validates that a bracketed statement or element is followed by a blank line.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ClosingCurlyBracketMustBeFollowedByBlankLine</Name>
            <Namespace>Microsoft.StyleCop.CSharp.LayoutRules</Namespace>
            <RuleGroup>Line Spacing</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>136</ViolationID>
            <ID>136</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>137</ID>
          <Line>134</Line>
          <Message>Statements or elements wrapped in curly brackets must be followed by a blank line.</Message>
          <SourceCodeFileID>5</SourceCodeFileID>
          <SourceCodeLine>    }</SourceCodeLine>
          <Rules>
            <CheckId>SA1513</CheckId>
            <Description>Validates that a bracketed statement or element is followed by a blank line.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ClosingCurlyBracketMustBeFollowedByBlankLine</Name>
            <Namespace>Microsoft.StyleCop.CSharp.LayoutRules</Namespace>
            <RuleGroup>Line Spacing</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>137</ViolationID>
            <ID>137</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>138</ID>
          <Line>144</Line>
          <Message>Statements or elements wrapped in curly brackets must be followed by a blank line.</Message>
          <SourceCodeFileID>5</SourceCodeFileID>
          <SourceCodeLine>      }</SourceCodeLine>
          <Rules>
            <CheckId>SA1513</CheckId>
            <Description>Validates that a bracketed statement or element is followed by a blank line.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ClosingCurlyBracketMustBeFollowedByBlankLine</Name>
            <Namespace>Microsoft.StyleCop.CSharp.LayoutRules</Namespace>
            <RuleGroup>Line Spacing</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>138</ViolationID>
            <ID>138</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>139</ID>
          <Line>146</Line>
          <Message>Statements or elements wrapped in curly brackets must be followed by a blank line.</Message>
          <SourceCodeFileID>5</SourceCodeFileID>
          <SourceCodeLine>    }</SourceCodeLine>
          <Rules>
            <CheckId>SA1513</CheckId>
            <Description>Validates that a bracketed statement or element is followed by a blank line.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ClosingCurlyBracketMustBeFollowedByBlankLine</Name>
            <Namespace>Microsoft.StyleCop.CSharp.LayoutRules</Namespace>
            <RuleGroup>Line Spacing</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>139</ViolationID>
            <ID>139</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>140</ID>
          <Line>153</Line>
          <Message>Statements or elements wrapped in curly brackets must be followed by a blank line.</Message>
          <SourceCodeFileID>5</SourceCodeFileID>
          <SourceCodeLine>      }</SourceCodeLine>
          <Rules>
            <CheckId>SA1513</CheckId>
            <Description>Validates that a bracketed statement or element is followed by a blank line.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ClosingCurlyBracketMustBeFollowedByBlankLine</Name>
            <Namespace>Microsoft.StyleCop.CSharp.LayoutRules</Namespace>
            <RuleGroup>Line Spacing</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>140</ViolationID>
            <ID>140</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>141</ID>
          <Line>155</Line>
          <Message>Statements or elements wrapped in curly brackets must be followed by a blank line.</Message>
          <SourceCodeFileID>5</SourceCodeFileID>
          <SourceCodeLine>    }</SourceCodeLine>
          <Rules>
            <CheckId>SA1513</CheckId>
            <Description>Validates that a bracketed statement or element is followed by a blank line.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ClosingCurlyBracketMustBeFollowedByBlankLine</Name>
            <Namespace>Microsoft.StyleCop.CSharp.LayoutRules</Namespace>
            <RuleGroup>Line Spacing</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>141</ViolationID>
            <ID>141</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>142</ID>
          <Line>161</Line>
          <Message>Statements or elements wrapped in curly brackets must be followed by a blank line.</Message>
          <SourceCodeFileID>5</SourceCodeFileID>
          <SourceCodeLine>    }</SourceCodeLine>
          <Rules>
            <CheckId>SA1513</CheckId>
            <Description>Validates that a bracketed statement or element is followed by a blank line.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ClosingCurlyBracketMustBeFollowedByBlankLine</Name>
            <Namespace>Microsoft.StyleCop.CSharp.LayoutRules</Namespace>
            <RuleGroup>Line Spacing</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>142</ViolationID>
            <ID>142</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>143</ID>
          <Line>165</Line>
          <Message>Statements or elements wrapped in curly brackets must be followed by a blank line.</Message>
          <SourceCodeFileID>5</SourceCodeFileID>
          <SourceCodeLine>    }</SourceCodeLine>
          <Rules>
            <CheckId>SA1513</CheckId>
            <Description>Validates that a bracketed statement or element is followed by a blank line.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ClosingCurlyBracketMustBeFollowedByBlankLine</Name>
            <Namespace>Microsoft.StyleCop.CSharp.LayoutRules</Namespace>
            <RuleGroup>Line Spacing</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>143</ViolationID>
            <ID>143</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>145</ID>
          <Line>21</Line>
          <Message>The variable name 'fMonies' begins with a prefix that looks like Hungarian notation. Remove the prefix or add it to the list of allowed prefixes.</Message>
          <SourceCodeFileID>5</SourceCodeFileID>
          <SourceCodeLine>    private ArrayList fMonies = new ArrayList(5);</SourceCodeLine>
          <Rules>
            <CheckId>SA1305</CheckId>
            <Description>Validates that a variable name is not prepended with lower-case characters matching the signature of Hungarian notation.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>FieldNamesMustNotUseHungarianNotation</Name>
            <Namespace>Microsoft.StyleCop.CSharp.NamingRules</Namespace>
            <Warning>false</Warning>
            <ViolationID>145</ViolationID>
            <ID>145</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>147</ID>
          <Line>68</Line>
          <Message>The variable name 'aBag' begins with a prefix that looks like Hungarian notation. Remove the prefix or add it to the list of allowed prefixes.</Message>
          <SourceCodeFileID>5</SourceCodeFileID>
          <SourceCodeLine>    private void AppendBag(MoneyBag aBag)</SourceCodeLine>
          <Rules>
            <CheckId>SA1305</CheckId>
            <Description>Validates that a variable name is not prepended with lower-case characters matching the signature of Hungarian notation.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>FieldNamesMustNotUseHungarianNotation</Name>
            <Namespace>Microsoft.StyleCop.CSharp.NamingRules</Namespace>
            <Warning>false</Warning>
            <ViolationID>147</ViolationID>
            <ID>147</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>148</ID>
          <Line>73</Line>
          <Message>The variable name 'aMoney' begins with a prefix that looks like Hungarian notation. Remove the prefix or add it to the list of allowed prefixes.</Message>
          <SourceCodeFileID>5</SourceCodeFileID>
          <SourceCodeLine>    private void AppendMoney(Money aMoney)</SourceCodeLine>
          <Rules>
            <CheckId>SA1305</CheckId>
            <Description>Validates that a variable name is not prepended with lower-case characters matching the signature of Hungarian notation.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>FieldNamesMustNotUseHungarianNotation</Name>
            <Namespace>Microsoft.StyleCop.CSharp.NamingRules</Namespace>
            <Warning>false</Warning>
            <ViolationID>148</ViolationID>
            <ID>148</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>150</ID>
          <Line>87</Line>
          <Message>The variable name 'aMoney' begins with a prefix that looks like Hungarian notation. Remove the prefix or add it to the list of allowed prefixes.</Message>
          <SourceCodeFileID>5</SourceCodeFileID>
          <SourceCodeLine>    private bool Contains(Money aMoney)</SourceCodeLine>
          <Rules>
            <CheckId>SA1305</CheckId>
            <Description>Validates that a variable name is not prepended with lower-case characters matching the signature of Hungarian notation.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>FieldNamesMustNotUseHungarianNotation</Name>
            <Namespace>Microsoft.StyleCop.CSharp.NamingRules</Namespace>
            <Warning>false</Warning>
            <ViolationID>150</ViolationID>
            <ID>150</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>152</ID>
          <Line>92</Line>
          <Message>The variable name 'anObject' begins with a prefix that looks like Hungarian notation. Remove the prefix or add it to the list of allowed prefixes.</Message>
          <SourceCodeFileID>5</SourceCodeFileID>
          <SourceCodeLine>    public override bool Equals(Object anObject)</SourceCodeLine>
          <Rules>
            <CheckId>SA1305</CheckId>
            <Description>Validates that a variable name is not prepended with lower-case characters matching the signature of Hungarian notation.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>FieldNamesMustNotUseHungarianNotation</Name>
            <Namespace>Microsoft.StyleCop.CSharp.NamingRules</Namespace>
            <Warning>false</Warning>
            <ViolationID>152</ViolationID>
            <ID>152</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>153</ID>
          <Line>100</Line>
          <Message>The variable name 'aMoneyBag' begins with a prefix that looks like Hungarian notation. Remove the prefix or add it to the list of allowed prefixes.</Message>
          <SourceCodeFileID>5</SourceCodeFileID>
          <SourceCodeLine>        MoneyBag aMoneyBag = (MoneyBag)anObject;</SourceCodeLine>
          <Rules>
            <CheckId>SA1305</CheckId>
            <Description>Validates that a variable name is not prepended with lower-case characters matching the signature of Hungarian notation.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>FieldNamesMustNotUseHungarianNotation</Name>
            <Namespace>Microsoft.StyleCop.CSharp.NamingRules</Namespace>
            <Warning>false</Warning>
            <ViolationID>153</ViolationID>
            <ID>153</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>156</ID>
          <Line>1</Line>
          <Message>All using directives must be placed inside of the namespace.</Message>
          <SourceCodeFileID>5</SourceCodeFileID>
          <SourceCodeLine>using System;</SourceCodeLine>
          <Rules>
            <CheckId>SA1200</CheckId>
            <Description>Validates that all using directives are placed within a namespace, if a namespace exists in the file.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>UsingDirectivesMustBePlacedWithinNamespace</Name>
            <Namespace>Microsoft.StyleCop.CSharp.OrderingRules</Namespace>
            <RuleGroup>Element Order</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>156</ViolationID>
            <ID>156</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>158</ID>
          <Line>2</Line>
          <Message>All using directives must be placed inside of the namespace.</Message>
          <SourceCodeFileID>5</SourceCodeFileID>
          <SourceCodeLine>using System.Collections;</SourceCodeLine>
          <Rules>
            <CheckId>SA1200</CheckId>
            <Description>Validates that all using directives are placed within a namespace, if a namespace exists in the file.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>UsingDirectivesMustBePlacedWithinNamespace</Name>
            <Namespace>Microsoft.StyleCop.CSharp.OrderingRules</Namespace>
            <RuleGroup>Element Order</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>158</ViolationID>
            <ID>158</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>160</ID>
          <Line>3</Line>
          <Message>All using directives must be placed inside of the namespace.</Message>
          <SourceCodeFileID>5</SourceCodeFileID>
          <SourceCodeLine>using System.Collections.Generic;</SourceCodeLine>
          <Rules>
            <CheckId>SA1200</CheckId>
            <Description>Validates that all using directives are placed within a namespace, if a namespace exists in the file.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>UsingDirectivesMustBePlacedWithinNamespace</Name>
            <Namespace>Microsoft.StyleCop.CSharp.OrderingRules</Namespace>
            <RuleGroup>Element Order</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>160</ViolationID>
            <ID>160</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>162</ID>
          <Line>4</Line>
          <Message>All using directives must be placed inside of the namespace.</Message>
          <SourceCodeFileID>5</SourceCodeFileID>
          <SourceCodeLine>using System.Linq;</SourceCodeLine>
          <Rules>
            <CheckId>SA1200</CheckId>
            <Description>Validates that all using directives are placed within a namespace, if a namespace exists in the file.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>UsingDirectivesMustBePlacedWithinNamespace</Name>
            <Namespace>Microsoft.StyleCop.CSharp.OrderingRules</Namespace>
            <RuleGroup>Element Order</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>162</ViolationID>
            <ID>162</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>164</ID>
          <Line>5</Line>
          <Message>All using directives must be placed inside of the namespace.</Message>
          <SourceCodeFileID>5</SourceCodeFileID>
          <SourceCodeLine>using System.Text;</SourceCodeLine>
          <Rules>
            <CheckId>SA1200</CheckId>
            <Description>Validates that all using directives are placed within a namespace, if a namespace exists in the file.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>UsingDirectivesMustBePlacedWithinNamespace</Name>
            <Namespace>Microsoft.StyleCop.CSharp.OrderingRules</Namespace>
            <RuleGroup>Element Order</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>164</ViolationID>
            <ID>164</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>166</ID>
          <Line>131</Line>
          <Message>All methods must be placed after all properties.</Message>
          <SourceCodeFileID>5</SourceCodeFileID>
          <SourceCodeLine>    public bool IsZero</SourceCodeLine>
          <Rules>
            <CheckId>SA1201</CheckId>
            <Description>Validates that elements are placed in the correct order.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ElementsMustAppearInTheCorrectOrder</Name>
            <Namespace>Microsoft.StyleCop.CSharp.OrderingRules</Namespace>
            <RuleGroup>Element Order</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>166</ViolationID>
            <ID>166</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>167</ID>
          <Line>92</Line>
          <Message>All private methods must be placed after all public methods.</Message>
          <SourceCodeFileID>5</SourceCodeFileID>
          <SourceCodeLine>    public override bool Equals(Object anObject)</SourceCodeLine>
          <Rules>
            <CheckId>SA1202</CheckId>
            <Description>Validates that elements of the same type are placed in order by access.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ElementsMustBeOrderedByAccess</Name>
            <Namespace>Microsoft.StyleCop.CSharp.OrderingRules</Namespace>
            <RuleGroup>Element Order</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>167</ViolationID>
            <ID>167</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>168</ID>
          <Line>122</Line>
          <Message>All private methods must be placed after all public methods.</Message>
          <SourceCodeFileID>5</SourceCodeFileID>
          <SourceCodeLine>    public override int GetHashCode()</SourceCodeLine>
          <Rules>
            <CheckId>SA1202</CheckId>
            <Description>Validates that elements of the same type are placed in order by access.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ElementsMustBeOrderedByAccess</Name>
            <Namespace>Microsoft.StyleCop.CSharp.OrderingRules</Namespace>
            <RuleGroup>Element Order</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>168</ViolationID>
            <ID>168</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>169</ID>
          <Line>135</Line>
          <Message>All private methods must be placed after all public methods.</Message>
          <SourceCodeFileID>5</SourceCodeFileID>
          <SourceCodeLine>    public IMoney Multiply(int factor)</SourceCodeLine>
          <Rules>
            <CheckId>SA1202</CheckId>
            <Description>Validates that elements of the same type are placed in order by access.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ElementsMustBeOrderedByAccess</Name>
            <Namespace>Microsoft.StyleCop.CSharp.OrderingRules</Namespace>
            <RuleGroup>Element Order</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>169</ViolationID>
            <ID>169</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>170</ID>
          <Line>147</Line>
          <Message>All private methods must be placed after all public methods.</Message>
          <SourceCodeFileID>5</SourceCodeFileID>
          <SourceCodeLine>    public IMoney Negate()</SourceCodeLine>
          <Rules>
            <CheckId>SA1202</CheckId>
            <Description>Validates that elements of the same type are placed in order by access.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ElementsMustBeOrderedByAccess</Name>
            <Namespace>Microsoft.StyleCop.CSharp.OrderingRules</Namespace>
            <RuleGroup>Element Order</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>170</ViolationID>
            <ID>170</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>171</ID>
          <Line>162</Line>
          <Message>All private methods must be placed after all public methods.</Message>
          <SourceCodeFileID>5</SourceCodeFileID>
          <SourceCodeLine>    public IMoney Subtract(IMoney m)</SourceCodeLine>
          <Rules>
            <CheckId>SA1202</CheckId>
            <Description>Validates that elements of the same type are placed in order by access.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ElementsMustBeOrderedByAccess</Name>
            <Namespace>Microsoft.StyleCop.CSharp.OrderingRules</Namespace>
            <RuleGroup>Element Order</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>171</ViolationID>
            <ID>171</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>172</ID>
          <Line>166</Line>
          <Message>All private methods must be placed after all public methods.</Message>
          <SourceCodeFileID>5</SourceCodeFileID>
          <SourceCodeLine>    public override String ToString()</SourceCodeLine>
          <Rules>
            <CheckId>SA1202</CheckId>
            <Description>Validates that elements of the same type are placed in order by access.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ElementsMustBeOrderedByAccess</Name>
            <Namespace>Microsoft.StyleCop.CSharp.OrderingRules</Namespace>
            <RuleGroup>Element Order</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>172</ViolationID>
            <ID>172</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>174</ID>
          <Line>31</Line>
          <Message>The call to AppendMoney must begin with the 'this.' prefix to indicate that the item is a member of the class.</Message>
          <SourceCodeFileID>5</SourceCodeFileID>
          <SourceCodeLine>          AppendMoney(bag[i]);</SourceCodeLine>
          <Rules>
            <CheckId>SA1101</CheckId>
            <Description>Verifies that calls to local members are prefixed with the 'this.' notation.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>PrefixLocalCallsWithThis</Name>
            <Namespace>Microsoft.StyleCop.CSharp.ReadabilityRules</Namespace>
            <RuleGroup>Member Access</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>174</ViolationID>
            <ID>174</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>177</ID>
          <Line>37</Line>
          <Message>The call to AppendMoney must begin with the 'this.' prefix to indicate that the item is a member of the class.</Message>
          <SourceCodeFileID>5</SourceCodeFileID>
          <SourceCodeLine>      AppendMoney(m1);</SourceCodeLine>
          <Rules>
            <CheckId>SA1101</CheckId>
            <Description>Verifies that calls to local members are prefixed with the 'this.' notation.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>PrefixLocalCallsWithThis</Name>
            <Namespace>Microsoft.StyleCop.CSharp.ReadabilityRules</Namespace>
            <RuleGroup>Member Access</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>177</ViolationID>
            <ID>177</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>179</ID>
          <Line>38</Line>
          <Message>The call to AppendMoney must begin with the 'this.' prefix to indicate that the item is a member of the class.</Message>
          <SourceCodeFileID>5</SourceCodeFileID>
          <SourceCodeLine>      AppendMoney(m2);</SourceCodeLine>
          <Rules>
            <CheckId>SA1101</CheckId>
            <Description>Verifies that calls to local members are prefixed with the 'this.' notation.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>PrefixLocalCallsWithThis</Name>
            <Namespace>Microsoft.StyleCop.CSharp.ReadabilityRules</Namespace>
            <RuleGroup>Member Access</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>179</ViolationID>
            <ID>179</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>181</ID>
          <Line>43</Line>
          <Message>The call to AppendMoney must begin with the 'this.' prefix to indicate that the item is a member of the class.</Message>
          <SourceCodeFileID>5</SourceCodeFileID>
          <SourceCodeLine>      AppendMoney(m);</SourceCodeLine>
          <Rules>
            <CheckId>SA1101</CheckId>
            <Description>Verifies that calls to local members are prefixed with the 'this.' notation.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>PrefixLocalCallsWithThis</Name>
            <Namespace>Microsoft.StyleCop.CSharp.ReadabilityRules</Namespace>
            <RuleGroup>Member Access</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>181</ViolationID>
            <ID>181</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>183</ID>
          <Line>44</Line>
          <Message>The call to AppendBag must begin with the 'this.' prefix to indicate that the item is a member of the class.</Message>
          <SourceCodeFileID>5</SourceCodeFileID>
          <SourceCodeLine>      AppendBag(bag);</SourceCodeLine>
          <Rules>
            <CheckId>SA1101</CheckId>
            <Description>Verifies that calls to local members are prefixed with the 'this.' notation.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>PrefixLocalCallsWithThis</Name>
            <Namespace>Microsoft.StyleCop.CSharp.ReadabilityRules</Namespace>
            <RuleGroup>Member Access</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>183</ViolationID>
            <ID>183</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>185</ID>
          <Line>49</Line>
          <Message>The call to AppendBag must begin with the 'this.' prefix to indicate that the item is a member of the class.</Message>
          <SourceCodeFileID>5</SourceCodeFileID>
          <SourceCodeLine>      AppendBag(m1);</SourceCodeLine>
          <Rules>
            <CheckId>SA1101</CheckId>
            <Description>Verifies that calls to local members are prefixed with the 'this.' notation.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>PrefixLocalCallsWithThis</Name>
            <Namespace>Microsoft.StyleCop.CSharp.ReadabilityRules</Namespace>
            <RuleGroup>Member Access</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>185</ViolationID>
            <ID>185</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>187</ID>
          <Line>50</Line>
          <Message>The call to AppendBag must begin with the 'this.' prefix to indicate that the item is a member of the class.</Message>
          <SourceCodeFileID>5</SourceCodeFileID>
          <SourceCodeLine>      AppendBag(m2);</SourceCodeLine>
          <Rules>
            <CheckId>SA1101</CheckId>
            <Description>Verifies that calls to local members are prefixed with the 'this.' notation.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>PrefixLocalCallsWithThis</Name>
            <Namespace>Microsoft.StyleCop.CSharp.ReadabilityRules</Namespace>
            <RuleGroup>Member Access</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>187</ViolationID>
            <ID>187</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>189</ID>
          <Line>71</Line>
          <Message>The call to AppendMoney must begin with the 'this.' prefix to indicate that the item is a member of the class.</Message>
          <SourceCodeFileID>5</SourceCodeFileID>
          <SourceCodeLine>        AppendMoney(m);</SourceCodeLine>
          <Rules>
            <CheckId>SA1101</CheckId>
            <Description>Verifies that calls to local members are prefixed with the 'this.' notation.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>PrefixLocalCallsWithThis</Name>
            <Namespace>Microsoft.StyleCop.CSharp.ReadabilityRules</Namespace>
            <RuleGroup>Member Access</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>189</ViolationID>
            <ID>189</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>190</ID>
          <Line>75</Line>
          <Message>The call to FindMoney must begin with the 'this.' prefix to indicate that the item is a member of the class.</Message>
          <SourceCodeFileID>5</SourceCodeFileID>
          <SourceCodeLine>      IMoney old = FindMoney(aMoney.Currency);</SourceCodeLine>
          <Rules>
            <CheckId>SA1101</CheckId>
            <Description>Verifies that calls to local members are prefixed with the 'this.' notation.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>PrefixLocalCallsWithThis</Name>
            <Namespace>Microsoft.StyleCop.CSharp.ReadabilityRules</Namespace>
            <RuleGroup>Member Access</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>190</ViolationID>
            <ID>190</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>192</ID>
          <Line>78</Line>
          <Message>The call to fMonies must begin with the 'this.' prefix to indicate that the item is a member of the class.</Message>
          <SourceCodeFileID>5</SourceCodeFileID>
          <SourceCodeLine>        fMonies.Add(aMoney);</SourceCodeLine>
          <Rules>
            <CheckId>SA1101</CheckId>
            <Description>Verifies that calls to local members are prefixed with the 'this.' notation.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>PrefixLocalCallsWithThis</Name>
            <Namespace>Microsoft.StyleCop.CSharp.ReadabilityRules</Namespace>
            <RuleGroup>Member Access</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>192</ViolationID>
            <ID>192</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>194</ID>
          <Line>81</Line>
          <Message>The call to fMonies must begin with the 'this.' prefix to indicate that the item is a member of the class.</Message>
          <SourceCodeFileID>5</SourceCodeFileID>
          <SourceCodeLine>      fMonies.Remove(old);</SourceCodeLine>
          <Rules>
            <CheckId>SA1101</CheckId>
            <Description>Verifies that calls to local members are prefixed with the 'this.' notation.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>PrefixLocalCallsWithThis</Name>
            <Namespace>Microsoft.StyleCop.CSharp.ReadabilityRules</Namespace>
            <RuleGroup>Member Access</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>194</ViolationID>
            <ID>194</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>195</ID>
          <Line>85</Line>
          <Message>The call to fMonies must begin with the 'this.' prefix to indicate that the item is a member of the class.</Message>
          <SourceCodeFileID>5</SourceCodeFileID>
          <SourceCodeLine>      fMonies.Add(sum);</SourceCodeLine>
          <Rules>
            <CheckId>SA1101</CheckId>
            <Description>Verifies that calls to local members are prefixed with the 'this.' notation.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>PrefixLocalCallsWithThis</Name>
            <Namespace>Microsoft.StyleCop.CSharp.ReadabilityRules</Namespace>
            <RuleGroup>Member Access</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>195</ViolationID>
            <ID>195</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>197</ID>
          <Line>89</Line>
          <Message>The call to FindMoney must begin with the 'this.' prefix to indicate that the item is a member of the class.</Message>
          <SourceCodeFileID>5</SourceCodeFileID>
          <SourceCodeLine>      Money m = FindMoney(aMoney.Currency);</SourceCodeLine>
          <Rules>
            <CheckId>SA1101</CheckId>
            <Description>Verifies that calls to local members are prefixed with the 'this.' notation.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>PrefixLocalCallsWithThis</Name>
            <Namespace>Microsoft.StyleCop.CSharp.ReadabilityRules</Namespace>
            <RuleGroup>Member Access</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>197</ViolationID>
            <ID>197</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>199</ID>
          <Line>94</Line>
          <Message>The call to IsZero must begin with the 'this.' prefix to indicate that the item is a member of the class.</Message>
          <SourceCodeFileID>5</SourceCodeFileID>
          <SourceCodeLine>      if (IsZero)</SourceCodeLine>
          <Rules>
            <CheckId>SA1101</CheckId>
            <Description>Verifies that calls to local members are prefixed with the 'this.' notation.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>PrefixLocalCallsWithThis</Name>
            <Namespace>Microsoft.StyleCop.CSharp.ReadabilityRules</Namespace>
            <RuleGroup>Member Access</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>199</ViolationID>
            <ID>199</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>201</ID>
          <Line>101</Line>
          <Message>The call to fMonies must begin with the 'this.' prefix to indicate that the item is a member of the class.</Message>
          <SourceCodeFileID>5</SourceCodeFileID>
          <SourceCodeLine>        if (aMoneyBag.fMonies.Count != fMonies.Count)</SourceCodeLine>
          <Rules>
            <CheckId>SA1101</CheckId>
            <Description>Verifies that calls to local members are prefixed with the 'this.' notation.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>PrefixLocalCallsWithThis</Name>
            <Namespace>Microsoft.StyleCop.CSharp.ReadabilityRules</Namespace>
            <RuleGroup>Member Access</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>201</ViolationID>
            <ID>201</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>203</ID>
          <Line>104</Line>
          <Message>The call to fMonies must begin with the 'this.' prefix to indicate that the item is a member of the class.</Message>
          <SourceCodeFileID>5</SourceCodeFileID>
          <SourceCodeLine>        foreach (Money m in fMonies)</SourceCodeLine>
          <Rules>
            <CheckId>SA1101</CheckId>
            <Description>Verifies that calls to local members are prefixed with the 'this.' notation.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>PrefixLocalCallsWithThis</Name>
            <Namespace>Microsoft.StyleCop.CSharp.ReadabilityRules</Namespace>
            <RuleGroup>Member Access</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>203</ViolationID>
            <ID>203</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>205</ID>
          <Line>115</Line>
          <Message>The call to fMonies must begin with the 'this.' prefix to indicate that the item is a member of the class.</Message>
          <SourceCodeFileID>5</SourceCodeFileID>
          <SourceCodeLine>      foreach (Money m in fMonies)</SourceCodeLine>
          <Rules>
            <CheckId>SA1101</CheckId>
            <Description>Verifies that calls to local members are prefixed with the 'this.' notation.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>PrefixLocalCallsWithThis</Name>
            <Namespace>Microsoft.StyleCop.CSharp.ReadabilityRules</Namespace>
            <RuleGroup>Member Access</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>205</ViolationID>
            <ID>205</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>207</ID>
          <Line>125</Line>
          <Message>The call to fMonies must begin with the 'this.' prefix to indicate that the item is a member of the class.</Message>
          <SourceCodeFileID>5</SourceCodeFileID>
          <SourceCodeLine>      foreach (Money m in fMonies)</SourceCodeLine>
          <Rules>
            <CheckId>SA1101</CheckId>
            <Description>Verifies that calls to local members are prefixed with the 'this.' notation.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>PrefixLocalCallsWithThis</Name>
            <Namespace>Microsoft.StyleCop.CSharp.ReadabilityRules</Namespace>
            <RuleGroup>Member Access</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>207</ViolationID>
            <ID>207</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>209</ID>
          <Line>133</Line>
          <Message>The call to fMonies must begin with the 'this.' prefix to indicate that the item is a member of the class.</Message>
          <SourceCodeFileID>5</SourceCodeFileID>
          <SourceCodeLine>      get { return fMonies.Count == 0; }</SourceCodeLine>
          <Rules>
            <CheckId>SA1101</CheckId>
            <Description>Verifies that calls to local members are prefixed with the 'this.' notation.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>PrefixLocalCallsWithThis</Name>
            <Namespace>Microsoft.StyleCop.CSharp.ReadabilityRules</Namespace>
            <RuleGroup>Member Access</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>209</ViolationID>
            <ID>209</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>211</ID>
          <Line>140</Line>
          <Message>The call to fMonies must begin with the 'this.' prefix to indicate that the item is a member of the class.</Message>
          <SourceCodeFileID>5</SourceCodeFileID>
          <SourceCodeLine>        foreach (Money m in fMonies)</SourceCodeLine>
          <Rules>
            <CheckId>SA1101</CheckId>
            <Description>Verifies that calls to local members are prefixed with the 'this.' notation.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>PrefixLocalCallsWithThis</Name>
            <Namespace>Microsoft.StyleCop.CSharp.ReadabilityRules</Namespace>
            <RuleGroup>Member Access</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>211</ViolationID>
            <ID>211</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>213</ID>
          <Line>150</Line>
          <Message>The call to fMonies must begin with the 'this.' prefix to indicate that the item is a member of the class.</Message>
          <SourceCodeFileID>5</SourceCodeFileID>
          <SourceCodeLine>      foreach (Money m in fMonies)</SourceCodeLine>
          <Rules>
            <CheckId>SA1101</CheckId>
            <Description>Verifies that calls to local members are prefixed with the 'this.' notation.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>PrefixLocalCallsWithThis</Name>
            <Namespace>Microsoft.StyleCop.CSharp.ReadabilityRules</Namespace>
            <RuleGroup>Member Access</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>213</ViolationID>
            <ID>213</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>215</ID>
          <Line>159</Line>
          <Message>The call to fMonies must begin with the 'this.' prefix to indicate that the item is a member of the class.</Message>
          <SourceCodeFileID>5</SourceCodeFileID>
          <SourceCodeLine>        return (IMoney)fMonies[0];</SourceCodeLine>
          <Rules>
            <CheckId>SA1101</CheckId>
            <Description>Verifies that calls to local members are prefixed with the 'this.' notation.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>PrefixLocalCallsWithThis</Name>
            <Namespace>Microsoft.StyleCop.CSharp.ReadabilityRules</Namespace>
            <RuleGroup>Member Access</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>215</ViolationID>
            <ID>215</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>216</ID>
          <Line>158</Line>
          <Message>The call to fMonies must begin with the 'this.' prefix to indicate that the item is a member of the class.</Message>
          <SourceCodeFileID>5</SourceCodeFileID>
          <SourceCodeLine>      if (fMonies.Count == 1)</SourceCodeLine>
          <Rules>
            <CheckId>SA1101</CheckId>
            <Description>Verifies that calls to local members are prefixed with the 'this.' notation.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>PrefixLocalCallsWithThis</Name>
            <Namespace>Microsoft.StyleCop.CSharp.ReadabilityRules</Namespace>
            <RuleGroup>Member Access</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>216</ViolationID>
            <ID>216</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>217</ID>
          <Line>164</Line>
          <Message>The call to Add must begin with the 'this.' prefix to indicate that the item is a member of the class.</Message>
          <SourceCodeFileID>5</SourceCodeFileID>
          <SourceCodeLine>      return Add(m.Negate());</SourceCodeLine>
          <Rules>
            <CheckId>SA1101</CheckId>
            <Description>Verifies that calls to local members are prefixed with the 'this.' notation.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>PrefixLocalCallsWithThis</Name>
            <Namespace>Microsoft.StyleCop.CSharp.ReadabilityRules</Namespace>
            <RuleGroup>Member Access</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>217</ViolationID>
            <ID>217</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>218</ID>
          <Line>170</Line>
          <Message>The call to fMonies must begin with the 'this.' prefix to indicate that the item is a member of the class.</Message>
          <SourceCodeFileID>5</SourceCodeFileID>
          <SourceCodeLine>      foreach (Money m in fMonies)</SourceCodeLine>
          <Rules>
            <CheckId>SA1101</CheckId>
            <Description>Verifies that calls to local members are prefixed with the 'this.' notation.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>PrefixLocalCallsWithThis</Name>
            <Namespace>Microsoft.StyleCop.CSharp.ReadabilityRules</Namespace>
            <RuleGroup>Member Access</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>218</ViolationID>
            <ID>218</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>219</ID>
          <Line>92</Line>
          <Message>Use the built-in type alias 'object' rather than Object or System.Object.</Message>
          <SourceCodeFileID>5</SourceCodeFileID>
          <SourceCodeLine>    public override bool Equals(Object anObject)</SourceCodeLine>
          <Rules>
            <CheckId>SA1121</CheckId>
            <Description>Enforces the use of the built-in types rather than the actual types that they represent.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>UseBuiltInTypeAlias</Name>
            <Namespace>Microsoft.StyleCop.CSharp.ReadabilityRules</Namespace>
            <RuleGroup>Types</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>219</ViolationID>
            <ID>219</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>220</ID>
          <Line>113</Line>
          <Message>Use the built-in type alias 'string' rather than String or System.String.</Message>
          <SourceCodeFileID>5</SourceCodeFileID>
          <SourceCodeLine>    private Money FindMoney(String currency)</SourceCodeLine>
          <Rules>
            <CheckId>SA1121</CheckId>
            <Description>Enforces the use of the built-in types rather than the actual types that they represent.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>UseBuiltInTypeAlias</Name>
            <Namespace>Microsoft.StyleCop.CSharp.ReadabilityRules</Namespace>
            <RuleGroup>Types</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>220</ViolationID>
            <ID>220</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>222</ID>
          <Line>166</Line>
          <Message>Use the built-in type alias 'string' rather than String or System.String.</Message>
          <SourceCodeFileID>5</SourceCodeFileID>
          <SourceCodeLine>    public override String ToString()</SourceCodeLine>
          <Rules>
            <CheckId>SA1121</CheckId>
            <Description>Enforces the use of the built-in types rather than the actual types that they represent.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>UseBuiltInTypeAlias</Name>
            <Namespace>Microsoft.StyleCop.CSharp.ReadabilityRules</Namespace>
            <RuleGroup>Types</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>222</ViolationID>
            <ID>222</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>223</ID>
          <Line>23</Line>
          <Message>The code contains multiple spaces in a row. Only one space is needed.</Message>
          <SourceCodeFileID>5</SourceCodeFileID>
          <SourceCodeLine>    public  MoneyBag()</SourceCodeLine>
          <Rules>
            <CheckId>SA1025</CheckId>
            <Description>Verifies that the code does not contain more than one spacing in a row.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>CodeMustNotContainMultipleWhitespaceInARow</Name>
            <Namespace>Microsoft.StyleCop.CSharp.SpacingRules</Namespace>
            <Warning>false</Warning>
            <ViolationID>223</ViolationID>
            <ID>223</ID>
          </Rules>
        </Violations>
      </SourceCodeFiles>
      <SourceCodeFiles>
        <ID>6</ID>
        <Path>C:\Work\CodeQuality\Temp\Example\Example.Core\Properties\AssemblyInfo.cs</Path>
        <TimeStamp>2009-04-30T09:44:02.2745109+02:00</TimeStamp>
        <Type>CS</Type>
        <Name>AssemblyInfo.cs</Name>
        <CodeProjectID>1</CodeProjectID>
        <Violations>
          <ID>224</ID>
          <Line>1</Line>
          <Message>The file has no header, the header Xml is invalid, or the header is not located at the top of the file.</Message>
          <SourceCodeFileID>6</SourceCodeFileID>
          <SourceCodeLine>using System.Reflection;</SourceCodeLine>
          <Rules>
            <CheckId>SA1633</CheckId>
            <Description>Validates that a file contains a properly formatted file header.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>FileMustHaveHeader</Name>
            <Namespace>Microsoft.StyleCop.CSharp.DocumentationRules</Namespace>
            <RuleGroup>File Headers</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>224</ViolationID>
            <ID>224</ID>
          </Rules>
        </Violations>
      </SourceCodeFiles>
      <SourceCodeFiles>
        <ID>7</ID>
        <Path>C:\Work\CodeQuality\Temp\Example\Example.Core\SampleMeasure.cs</Path>
        <TimeStamp>2009-05-05T10:53:34.5158044+02:00</TimeStamp>
        <Type>CS</Type>
        <Name>SampleMeasure.cs</Name>
        <CodeProjectID>1</CodeProjectID>
        <Violations>
          <ID>257</ID>
          <Line>8</Line>
          <Message>The class must have a documentation header.</Message>
          <SourceCodeFileID>7</SourceCodeFileID>
          <SourceCodeLine>  public class SampleMeasure</SourceCodeLine>
          <Rules>
            <CheckId>SA1600</CheckId>
            <Description>Validates that an element contains a properly formatted documentation header.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ElementsMustBeDocumented</Name>
            <Namespace>Microsoft.StyleCop.CSharp.DocumentationRules</Namespace>
            <RuleGroup>Element Documentation</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>257</ViolationID>
            <ID>257</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>259</ID>
          <Line>10</Line>
          <Message>The property must have a documentation header.</Message>
          <SourceCodeFileID>7</SourceCodeFileID>
          <SourceCodeLine>    public int Size { get; set; }</SourceCodeLine>
          <Rules>
            <CheckId>SA1600</CheckId>
            <Description>Validates that an element contains a properly formatted documentation header.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ElementsMustBeDocumented</Name>
            <Namespace>Microsoft.StyleCop.CSharp.DocumentationRules</Namespace>
            <RuleGroup>Element Documentation</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>259</ViolationID>
            <ID>259</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>261</ID>
          <Line>12</Line>
          <Message>The field must have a documentation header.</Message>
          <SourceCodeFileID>7</SourceCodeFileID>
          <SourceCodeLine>    private Possible actual;</SourceCodeLine>
          <Rules>
            <CheckId>SA1600</CheckId>
            <Description>Validates that an element contains a properly formatted documentation header.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ElementsMustBeDocumented</Name>
            <Namespace>Microsoft.StyleCop.CSharp.DocumentationRules</Namespace>
            <RuleGroup>Element Documentation</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>261</ViolationID>
            <ID>261</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>262</ID>
          <Line>14</Line>
          <Message>The enum must have a documentation header.</Message>
          <SourceCodeFileID>7</SourceCodeFileID>
          <SourceCodeLine>    private enum Possible</SourceCodeLine>
          <Rules>
            <CheckId>SA1600</CheckId>
            <Description>Validates that an element contains a properly formatted documentation header.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ElementsMustBeDocumented</Name>
            <Namespace>Microsoft.StyleCop.CSharp.DocumentationRules</Namespace>
            <RuleGroup>Element Documentation</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>262</ViolationID>
            <ID>262</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>268</ID>
          <Line>16</Line>
          <Message>The enumeration sub-item must have a documentation header.</Message>
          <SourceCodeFileID>7</SourceCodeFileID>
          <SourceCodeLine>      A,</SourceCodeLine>
          <Rules>
            <CheckId>SA1602</CheckId>
            <Description>Validates that an item within an enumeration contains a properly formatted documentation header.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>EnumerationItemsMustBeDocumented</Name>
            <Namespace>Microsoft.StyleCop.CSharp.DocumentationRules</Namespace>
            <RuleGroup>Element Documentation</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>268</ViolationID>
            <ID>268</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>270</ID>
          <Line>17</Line>
          <Message>The enumeration sub-item must have a documentation header.</Message>
          <SourceCodeFileID>7</SourceCodeFileID>
          <SourceCodeLine>      B,</SourceCodeLine>
          <Rules>
            <CheckId>SA1602</CheckId>
            <Description>Validates that an item within an enumeration contains a properly formatted documentation header.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>EnumerationItemsMustBeDocumented</Name>
            <Namespace>Microsoft.StyleCop.CSharp.DocumentationRules</Namespace>
            <RuleGroup>Element Documentation</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>270</ViolationID>
            <ID>270</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>271</ID>
          <Line>18</Line>
          <Message>The enumeration sub-item must have a documentation header.</Message>
          <SourceCodeFileID>7</SourceCodeFileID>
          <SourceCodeLine>      C,</SourceCodeLine>
          <Rules>
            <CheckId>SA1602</CheckId>
            <Description>Validates that an item within an enumeration contains a properly formatted documentation header.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>EnumerationItemsMustBeDocumented</Name>
            <Namespace>Microsoft.StyleCop.CSharp.DocumentationRules</Namespace>
            <RuleGroup>Element Documentation</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>271</ViolationID>
            <ID>271</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>273</ID>
          <Line>19</Line>
          <Message>The enumeration sub-item must have a documentation header.</Message>
          <SourceCodeFileID>7</SourceCodeFileID>
          <SourceCodeLine>      D</SourceCodeLine>
          <Rules>
            <CheckId>SA1602</CheckId>
            <Description>Validates that an item within an enumeration contains a properly formatted documentation header.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>EnumerationItemsMustBeDocumented</Name>
            <Namespace>Microsoft.StyleCop.CSharp.DocumentationRules</Namespace>
            <RuleGroup>Element Documentation</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>273</ViolationID>
            <ID>273</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>275</ID>
          <Line>22</Line>
          <Message>The constructor must have a documentation header.</Message>
          <SourceCodeFileID>7</SourceCodeFileID>
          <SourceCodeLine>    public SampleMeasure()</SourceCodeLine>
          <Rules>
            <CheckId>SA1600</CheckId>
            <Description>Validates that an element contains a properly formatted documentation header.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ElementsMustBeDocumented</Name>
            <Namespace>Microsoft.StyleCop.CSharp.DocumentationRules</Namespace>
            <RuleGroup>Element Documentation</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>275</ViolationID>
            <ID>275</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>277</ID>
          <Line>28</Line>
          <Message>The method must have a documentation header.</Message>
          <SourceCodeFileID>7</SourceCodeFileID>
          <SourceCodeLine>    public String Compute()</SourceCodeLine>
          <Rules>
            <CheckId>SA1600</CheckId>
            <Description>Validates that an element contains a properly formatted documentation header.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ElementsMustBeDocumented</Name>
            <Namespace>Microsoft.StyleCop.CSharp.DocumentationRules</Namespace>
            <RuleGroup>Element Documentation</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>277</ViolationID>
            <ID>277</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>279</ID>
          <Line>49</Line>
          <Message>The method must have a documentation header.</Message>
          <SourceCodeFileID>7</SourceCodeFileID>
          <SourceCodeLine>    public String Compute(int maxSize)</SourceCodeLine>
          <Rules>
            <CheckId>SA1600</CheckId>
            <Description>Validates that an element contains a properly formatted documentation header.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ElementsMustBeDocumented</Name>
            <Namespace>Microsoft.StyleCop.CSharp.DocumentationRules</Namespace>
            <RuleGroup>Element Documentation</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>279</ViolationID>
            <ID>279</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>282</ID>
          <Line>54</Line>
          <Message>The method must have a documentation header.</Message>
          <SourceCodeFileID>7</SourceCodeFileID>
          <SourceCodeLine>    public String Compute(String input)</SourceCodeLine>
          <Rules>
            <CheckId>SA1600</CheckId>
            <Description>Validates that an element contains a properly formatted documentation header.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ElementsMustBeDocumented</Name>
            <Namespace>Microsoft.StyleCop.CSharp.DocumentationRules</Namespace>
            <RuleGroup>Element Documentation</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>282</ViolationID>
            <ID>282</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>283</ID>
          <Line>59</Line>
          <Message>The method must have a documentation header.</Message>
          <SourceCodeFileID>7</SourceCodeFileID>
          <SourceCodeLine>    public bool Equals(SampleMeasure obj)</SourceCodeLine>
          <Rules>
            <CheckId>SA1600</CheckId>
            <Description>Validates that an element contains a properly formatted documentation header.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ElementsMustBeDocumented</Name>
            <Namespace>Microsoft.StyleCop.CSharp.DocumentationRules</Namespace>
            <RuleGroup>Element Documentation</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>283</ViolationID>
            <ID>283</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>285</ID>
          <Line>66</Line>
          <Message>The method must have a documentation header.</Message>
          <SourceCodeFileID>7</SourceCodeFileID>
          <SourceCodeLine>    public override bool Equals(object obj)</SourceCodeLine>
          <Rules>
            <CheckId>SA1600</CheckId>
            <Description>Validates that an element contains a properly formatted documentation header.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ElementsMustBeDocumented</Name>
            <Namespace>Microsoft.StyleCop.CSharp.DocumentationRules</Namespace>
            <RuleGroup>Element Documentation</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>285</ViolationID>
            <ID>285</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>287</ID>
          <Line>74</Line>
          <Message>The method must have a documentation header.</Message>
          <SourceCodeFileID>7</SourceCodeFileID>
          <SourceCodeLine>    public override int GetHashCode()</SourceCodeLine>
          <Rules>
            <CheckId>SA1600</CheckId>
            <Description>Validates that an element contains a properly formatted documentation header.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ElementsMustBeDocumented</Name>
            <Namespace>Microsoft.StyleCop.CSharp.DocumentationRules</Namespace>
            <RuleGroup>Element Documentation</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>287</ViolationID>
            <ID>287</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>288</ID>
          <Line>1</Line>
          <Message>The file has no header, the header Xml is invalid, or the header is not located at the top of the file.</Message>
          <SourceCodeFileID>7</SourceCodeFileID>
          <SourceCodeLine>using System;</SourceCodeLine>
          <Rules>
            <CheckId>SA1633</CheckId>
            <Description>Validates that a file contains a properly formatted file header.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>FileMustHaveHeader</Name>
            <Namespace>Microsoft.StyleCop.CSharp.DocumentationRules</Namespace>
            <RuleGroup>File Headers</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>288</ViolationID>
            <ID>288</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>290</ID>
          <Line>20</Line>
          <Message>Adjacent elements must be separated by a blank line.</Message>
          <SourceCodeFileID>7</SourceCodeFileID>
          <SourceCodeLine>    } ;</SourceCodeLine>
          <Rules>
            <CheckId>SA1516</CheckId>
            <Description>Validates that adjacent elements are separated by a blank line.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ElementsMustBeSeparatedByBlankLine</Name>
            <Namespace>Microsoft.StyleCop.CSharp.LayoutRules</Namespace>
            <RuleGroup>Line Spacing</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>290</ViolationID>
            <ID>290</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>293</ID>
          <Line>61</Line>
          <Message>The body of the if statement must be wrapped in opening and closing curly brackets.</Message>
          <SourceCodeFileID>7</SourceCodeFileID>
          <SourceCodeLine>      if (ReferenceEquals(null, obj)) return false;</SourceCodeLine>
          <Rules>
            <CheckId>SA1503</CheckId>
            <Description>Validates that opening and closing curly brackets are always included, even if the statement type allows them to be omitted.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>CurlyBracketsMustNotBeOmitted</Name>
            <Namespace>Microsoft.StyleCop.CSharp.LayoutRules</Namespace>
            <RuleGroup>Curly Brackets</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>293</ViolationID>
            <ID>293</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>295</ID>
          <Line>62</Line>
          <Message>The body of the if statement must be wrapped in opening and closing curly brackets.</Message>
          <SourceCodeFileID>7</SourceCodeFileID>
          <SourceCodeLine>      if (ReferenceEquals(this, obj)) return true;</SourceCodeLine>
          <Rules>
            <CheckId>SA1503</CheckId>
            <Description>Validates that opening and closing curly brackets are always included, even if the statement type allows them to be omitted.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>CurlyBracketsMustNotBeOmitted</Name>
            <Namespace>Microsoft.StyleCop.CSharp.LayoutRules</Namespace>
            <RuleGroup>Curly Brackets</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>295</ViolationID>
            <ID>295</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>296</ID>
          <Line>68</Line>
          <Message>The body of the if statement must be wrapped in opening and closing curly brackets.</Message>
          <SourceCodeFileID>7</SourceCodeFileID>
          <SourceCodeLine>      if (ReferenceEquals(null, obj)) return false;</SourceCodeLine>
          <Rules>
            <CheckId>SA1503</CheckId>
            <Description>Validates that opening and closing curly brackets are always included, even if the statement type allows them to be omitted.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>CurlyBracketsMustNotBeOmitted</Name>
            <Namespace>Microsoft.StyleCop.CSharp.LayoutRules</Namespace>
            <RuleGroup>Curly Brackets</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>296</ViolationID>
            <ID>296</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>298</ID>
          <Line>69</Line>
          <Message>The body of the if statement must be wrapped in opening and closing curly brackets.</Message>
          <SourceCodeFileID>7</SourceCodeFileID>
          <SourceCodeLine>      if (ReferenceEquals(this, obj)) return true;</SourceCodeLine>
          <Rules>
            <CheckId>SA1503</CheckId>
            <Description>Validates that opening and closing curly brackets are always included, even if the statement type allows them to be omitted.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>CurlyBracketsMustNotBeOmitted</Name>
            <Namespace>Microsoft.StyleCop.CSharp.LayoutRules</Namespace>
            <RuleGroup>Curly Brackets</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>298</ViolationID>
            <ID>298</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>299</ID>
          <Line>70</Line>
          <Message>The body of the if statement must be wrapped in opening and closing curly brackets.</Message>
          <SourceCodeFileID>7</SourceCodeFileID>
          <SourceCodeLine>      if (obj.GetType() != typeof (SampleMeasure)) return false;</SourceCodeLine>
          <Rules>
            <CheckId>SA1503</CheckId>
            <Description>Validates that opening and closing curly brackets are always included, even if the statement type allows them to be omitted.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>CurlyBracketsMustNotBeOmitted</Name>
            <Namespace>Microsoft.StyleCop.CSharp.LayoutRules</Namespace>
            <RuleGroup>Curly Brackets</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>299</ViolationID>
            <ID>299</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>300</ID>
          <Line>45</Line>
          <Message>Statements or elements wrapped in curly brackets must be followed by a blank line.</Message>
          <SourceCodeFileID>7</SourceCodeFileID>
          <SourceCodeLine>      }</SourceCodeLine>
          <Rules>
            <CheckId>SA1513</CheckId>
            <Description>Validates that a bracketed statement or element is followed by a blank line.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ClosingCurlyBracketMustBeFollowedByBlankLine</Name>
            <Namespace>Microsoft.StyleCop.CSharp.LayoutRules</Namespace>
            <RuleGroup>Line Spacing</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>300</ViolationID>
            <ID>300</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>301</ID>
          <Line>1</Line>
          <Message>All using directives must be placed inside of the namespace.</Message>
          <SourceCodeFileID>7</SourceCodeFileID>
          <SourceCodeLine>using System;</SourceCodeLine>
          <Rules>
            <CheckId>SA1200</CheckId>
            <Description>Validates that all using directives are placed within a namespace, if a namespace exists in the file.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>UsingDirectivesMustBePlacedWithinNamespace</Name>
            <Namespace>Microsoft.StyleCop.CSharp.OrderingRules</Namespace>
            <RuleGroup>Element Order</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>301</ViolationID>
            <ID>301</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>302</ID>
          <Line>2</Line>
          <Message>All using directives must be placed inside of the namespace.</Message>
          <SourceCodeFileID>7</SourceCodeFileID>
          <SourceCodeLine>using System.Collections.Generic;</SourceCodeLine>
          <Rules>
            <CheckId>SA1200</CheckId>
            <Description>Validates that all using directives are placed within a namespace, if a namespace exists in the file.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>UsingDirectivesMustBePlacedWithinNamespace</Name>
            <Namespace>Microsoft.StyleCop.CSharp.OrderingRules</Namespace>
            <RuleGroup>Element Order</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>302</ViolationID>
            <ID>302</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>303</ID>
          <Line>3</Line>
          <Message>All using directives must be placed inside of the namespace.</Message>
          <SourceCodeFileID>7</SourceCodeFileID>
          <SourceCodeLine>using System.Linq;</SourceCodeLine>
          <Rules>
            <CheckId>SA1200</CheckId>
            <Description>Validates that all using directives are placed within a namespace, if a namespace exists in the file.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>UsingDirectivesMustBePlacedWithinNamespace</Name>
            <Namespace>Microsoft.StyleCop.CSharp.OrderingRules</Namespace>
            <RuleGroup>Element Order</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>303</ViolationID>
            <ID>303</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>305</ID>
          <Line>4</Line>
          <Message>All using directives must be placed inside of the namespace.</Message>
          <SourceCodeFileID>7</SourceCodeFileID>
          <SourceCodeLine>using System.Text;</SourceCodeLine>
          <Rules>
            <CheckId>SA1200</CheckId>
            <Description>Validates that all using directives are placed within a namespace, if a namespace exists in the file.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>UsingDirectivesMustBePlacedWithinNamespace</Name>
            <Namespace>Microsoft.StyleCop.CSharp.OrderingRules</Namespace>
            <RuleGroup>Element Order</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>305</ViolationID>
            <ID>305</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>306</ID>
          <Line>10</Line>
          <Message>All properties must be placed after all fields.</Message>
          <SourceCodeFileID>7</SourceCodeFileID>
          <SourceCodeLine>    public int Size { get; set; }</SourceCodeLine>
          <Rules>
            <CheckId>SA1201</CheckId>
            <Description>Validates that elements are placed in the correct order.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ElementsMustAppearInTheCorrectOrder</Name>
            <Namespace>Microsoft.StyleCop.CSharp.OrderingRules</Namespace>
            <RuleGroup>Element Order</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>306</ViolationID>
            <ID>306</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>307</ID>
          <Line>22</Line>
          <Message>All properties must be placed after all constructors.</Message>
          <SourceCodeFileID>7</SourceCodeFileID>
          <SourceCodeLine>    public SampleMeasure()</SourceCodeLine>
          <Rules>
            <CheckId>SA1201</CheckId>
            <Description>Validates that elements are placed in the correct order.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ElementsMustAppearInTheCorrectOrder</Name>
            <Namespace>Microsoft.StyleCop.CSharp.OrderingRules</Namespace>
            <RuleGroup>Element Order</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>307</ViolationID>
            <ID>307</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>308</ID>
          <Line>20</Line>
          <Message>The code contains an extra semicolon.</Message>
          <SourceCodeFileID>7</SourceCodeFileID>
          <SourceCodeLine>    } ;</SourceCodeLine>
          <Rules>
            <CheckId>SA1106</CheckId>
            <Description>Detects the presense of extra, unnecessary semicolons in the code.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>CodeMustNotContainEmptyStatements</Name>
            <Namespace>Microsoft.StyleCop.CSharp.ReadabilityRules</Namespace>
            <RuleGroup>Statements</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>308</ViolationID>
            <ID>308</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>312</ID>
          <Line>24</Line>
          <Message>The call to Size must begin with the 'this.' prefix to indicate that the item is a member of the class.</Message>
          <SourceCodeFileID>7</SourceCodeFileID>
          <SourceCodeLine>      Size = 3;</SourceCodeLine>
          <Rules>
            <CheckId>SA1101</CheckId>
            <Description>Verifies that calls to local members are prefixed with the 'this.' notation.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>PrefixLocalCallsWithThis</Name>
            <Namespace>Microsoft.StyleCop.CSharp.ReadabilityRules</Namespace>
            <RuleGroup>Member Access</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>312</ViolationID>
            <ID>312</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>313</ID>
          <Line>25</Line>
          <Message>The call to actual must begin with the 'this.' prefix to indicate that the item is a member of the class.</Message>
          <SourceCodeFileID>7</SourceCodeFileID>
          <SourceCodeLine>      actual = Possible.C;</SourceCodeLine>
          <Rules>
            <CheckId>SA1101</CheckId>
            <Description>Verifies that calls to local members are prefixed with the 'this.' notation.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>PrefixLocalCallsWithThis</Name>
            <Namespace>Microsoft.StyleCop.CSharp.ReadabilityRules</Namespace>
            <RuleGroup>Member Access</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>313</ViolationID>
            <ID>313</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>314</ID>
          <Line>35</Line>
          <Message>The call to actual must begin with the 'this.' prefix to indicate that the item is a member of the class.</Message>
          <SourceCodeFileID>7</SourceCodeFileID>
          <SourceCodeLine>            return actual.ToString();</SourceCodeLine>
          <Rules>
            <CheckId>SA1101</CheckId>
            <Description>Verifies that calls to local members are prefixed with the 'this.' notation.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>PrefixLocalCallsWithThis</Name>
            <Namespace>Microsoft.StyleCop.CSharp.ReadabilityRules</Namespace>
            <RuleGroup>Member Access</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>314</ViolationID>
            <ID>314</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>316</ID>
          <Line>37</Line>
          <Message>The call to actual must begin with the 'this.' prefix to indicate that the item is a member of the class.</Message>
          <SourceCodeFileID>7</SourceCodeFileID>
          <SourceCodeLine>            return actual.ToString();</SourceCodeLine>
          <Rules>
            <CheckId>SA1101</CheckId>
            <Description>Verifies that calls to local members are prefixed with the 'this.' notation.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>PrefixLocalCallsWithThis</Name>
            <Namespace>Microsoft.StyleCop.CSharp.ReadabilityRules</Namespace>
            <RuleGroup>Member Access</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>316</ViolationID>
            <ID>316</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>318</ID>
          <Line>39</Line>
          <Message>The call to actual must begin with the 'this.' prefix to indicate that the item is a member of the class.</Message>
          <SourceCodeFileID>7</SourceCodeFileID>
          <SourceCodeLine>            return actual.ToString();</SourceCodeLine>
          <Rules>
            <CheckId>SA1101</CheckId>
            <Description>Verifies that calls to local members are prefixed with the 'this.' notation.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>PrefixLocalCallsWithThis</Name>
            <Namespace>Microsoft.StyleCop.CSharp.ReadabilityRules</Namespace>
            <RuleGroup>Member Access</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>318</ViolationID>
            <ID>318</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>319</ID>
          <Line>41</Line>
          <Message>The call to actual must begin with the 'this.' prefix to indicate that the item is a member of the class.</Message>
          <SourceCodeFileID>7</SourceCodeFileID>
          <SourceCodeLine>            return actual.ToString();</SourceCodeLine>
          <Rules>
            <CheckId>SA1101</CheckId>
            <Description>Verifies that calls to local members are prefixed with the 'this.' notation.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>PrefixLocalCallsWithThis</Name>
            <Namespace>Microsoft.StyleCop.CSharp.ReadabilityRules</Namespace>
            <RuleGroup>Member Access</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>319</ViolationID>
            <ID>319</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>320</ID>
          <Line>32</Line>
          <Message>The call to actual must begin with the 'this.' prefix to indicate that the item is a member of the class.</Message>
          <SourceCodeFileID>7</SourceCodeFileID>
          <SourceCodeLine>        switch (actual)</SourceCodeLine>
          <Rules>
            <CheckId>SA1101</CheckId>
            <Description>Verifies that calls to local members are prefixed with the 'this.' notation.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>PrefixLocalCallsWithThis</Name>
            <Namespace>Microsoft.StyleCop.CSharp.ReadabilityRules</Namespace>
            <RuleGroup>Member Access</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>320</ViolationID>
            <ID>320</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>321</ID>
          <Line>30</Line>
          <Message>The call to Size must begin with the 'this.' prefix to indicate that the item is a member of the class.</Message>
          <SourceCodeFileID>7</SourceCodeFileID>
          <SourceCodeLine>      for (int idx = 0; idx &lt; Size; idx++)</SourceCodeLine>
          <Rules>
            <CheckId>SA1101</CheckId>
            <Description>Verifies that calls to local members are prefixed with the 'this.' notation.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>PrefixLocalCallsWithThis</Name>
            <Namespace>Microsoft.StyleCop.CSharp.ReadabilityRules</Namespace>
            <RuleGroup>Member Access</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>321</ViolationID>
            <ID>321</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>323</ID>
          <Line>56</Line>
          <Message>The call to Size must begin with the 'this.' prefix to indicate that the item is a member of the class.</Message>
          <SourceCodeFileID>7</SourceCodeFileID>
          <SourceCodeLine>      return input.Substring(0, Size);</SourceCodeLine>
          <Rules>
            <CheckId>SA1101</CheckId>
            <Description>Verifies that calls to local members are prefixed with the 'this.' notation.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>PrefixLocalCallsWithThis</Name>
            <Namespace>Microsoft.StyleCop.CSharp.ReadabilityRules</Namespace>
            <RuleGroup>Member Access</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>323</ViolationID>
            <ID>323</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>324</ID>
          <Line>63</Line>
          <Message>The call to Equals must begin with the 'this.' prefix to indicate that the item is a member of the class.</Message>
          <SourceCodeFileID>7</SourceCodeFileID>
          <SourceCodeLine>      return Equals(obj.actual, actual) &amp;&amp; obj.Size == Size;</SourceCodeLine>
          <Rules>
            <CheckId>SA1101</CheckId>
            <Description>Verifies that calls to local members are prefixed with the 'this.' notation.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>PrefixLocalCallsWithThis</Name>
            <Namespace>Microsoft.StyleCop.CSharp.ReadabilityRules</Namespace>
            <RuleGroup>Member Access</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>324</ViolationID>
            <ID>324</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>325</ID>
          <Line>71</Line>
          <Message>The call to Equals must begin with the 'this.' prefix to indicate that the item is a member of the class.</Message>
          <SourceCodeFileID>7</SourceCodeFileID>
          <SourceCodeLine>      return Equals((SampleMeasure) obj);</SourceCodeLine>
          <Rules>
            <CheckId>SA1101</CheckId>
            <Description>Verifies that calls to local members are prefixed with the 'this.' notation.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>PrefixLocalCallsWithThis</Name>
            <Namespace>Microsoft.StyleCop.CSharp.ReadabilityRules</Namespace>
            <RuleGroup>Member Access</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>325</ViolationID>
            <ID>325</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>326</ID>
          <Line>78</Line>
          <Message>The call to actual must begin with the 'this.' prefix to indicate that the item is a member of the class.</Message>
          <SourceCodeFileID>7</SourceCodeFileID>
          <SourceCodeLine>        return (actual.GetHashCode()*397) ^ Size;</SourceCodeLine>
          <Rules>
            <CheckId>SA1101</CheckId>
            <Description>Verifies that calls to local members are prefixed with the 'this.' notation.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>PrefixLocalCallsWithThis</Name>
            <Namespace>Microsoft.StyleCop.CSharp.ReadabilityRules</Namespace>
            <RuleGroup>Member Access</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>326</ViolationID>
            <ID>326</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>327</ID>
          <Line>28</Line>
          <Message>Use the built-in type alias 'string' rather than String or System.String.</Message>
          <SourceCodeFileID>7</SourceCodeFileID>
          <SourceCodeLine>    public String Compute()</SourceCodeLine>
          <Rules>
            <CheckId>SA1121</CheckId>
            <Description>Enforces the use of the built-in types rather than the actual types that they represent.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>UseBuiltInTypeAlias</Name>
            <Namespace>Microsoft.StyleCop.CSharp.ReadabilityRules</Namespace>
            <RuleGroup>Types</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>327</ViolationID>
            <ID>327</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>328</ID>
          <Line>49</Line>
          <Message>Use the built-in type alias 'string' rather than String or System.String.</Message>
          <SourceCodeFileID>7</SourceCodeFileID>
          <SourceCodeLine>    public String Compute(int maxSize)</SourceCodeLine>
          <Rules>
            <CheckId>SA1121</CheckId>
            <Description>Enforces the use of the built-in types rather than the actual types that they represent.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>UseBuiltInTypeAlias</Name>
            <Namespace>Microsoft.StyleCop.CSharp.ReadabilityRules</Namespace>
            <RuleGroup>Types</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>328</ViolationID>
            <ID>328</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>329</ID>
          <Line>54</Line>
          <Message>Use the built-in type alias 'string' rather than String or System.String.</Message>
          <SourceCodeFileID>7</SourceCodeFileID>
          <SourceCodeLine>    public String Compute(String input)</SourceCodeLine>
          <Rules>
            <CheckId>SA1121</CheckId>
            <Description>Enforces the use of the built-in types rather than the actual types that they represent.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>UseBuiltInTypeAlias</Name>
            <Namespace>Microsoft.StyleCop.CSharp.ReadabilityRules</Namespace>
            <RuleGroup>Types</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>329</ViolationID>
            <ID>329</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>330</ID>
          <Line>20</Line>
          <Message>Invalid spacing around the closing curly bracket.</Message>
          <SourceCodeFileID>7</SourceCodeFileID>
          <SourceCodeLine>    } ;</SourceCodeLine>
          <Rules>
            <CheckId>SA1013</CheckId>
            <Description>Validates the spacing before and after a closing curly bracket.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ClosingCurlyBracketsMustBeSpacedCorrectly</Name>
            <Namespace>Microsoft.StyleCop.CSharp.SpacingRules</Namespace>
            <Warning>false</Warning>
            <ViolationID>330</ViolationID>
            <ID>330</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>331</ID>
          <Line>20</Line>
          <Message>Invalid spacing around the semicolon.</Message>
          <SourceCodeFileID>7</SourceCodeFileID>
          <SourceCodeLine>    } ;</SourceCodeLine>
          <Rules>
            <CheckId>SA1002</CheckId>
            <Description>Validates the spacing before and a semicolon.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>SemicolonsMustBeSpacedCorrectly</Name>
            <Namespace>Microsoft.StyleCop.CSharp.SpacingRules</Namespace>
            <Warning>false</Warning>
            <ViolationID>331</ViolationID>
            <ID>331</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>334</ID>
          <Line>70</Line>
          <Message>The spacing around the keyword 'typeof' is invalid.</Message>
          <SourceCodeFileID>7</SourceCodeFileID>
          <SourceCodeLine>      if (obj.GetType() != typeof (SampleMeasure)) return false;</SourceCodeLine>
          <Rules>
            <CheckId>SA1000</CheckId>
            <Description>Validates the spacing before and after a reserved keyword.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>KeywordsMustBeSpacedCorrectly</Name>
            <Namespace>Microsoft.StyleCop.CSharp.SpacingRules</Namespace>
            <Warning>false</Warning>
            <ViolationID>334</ViolationID>
            <ID>334</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>335</ID>
          <Line>70</Line>
          <Message>Invalid spacing around the opening parenthesis.</Message>
          <SourceCodeFileID>7</SourceCodeFileID>
          <SourceCodeLine>      if (obj.GetType() != typeof (SampleMeasure)) return false;</SourceCodeLine>
          <Rules>
            <CheckId>SA1008</CheckId>
            <Description>Validates the spacing before and after an opening parenthesis.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>OpeningParenthesisMustBeSpacedCorrectly</Name>
            <Namespace>Microsoft.StyleCop.CSharp.SpacingRules</Namespace>
            <Warning>false</Warning>
            <ViolationID>335</ViolationID>
            <ID>335</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>336</ID>
          <Line>78</Line>
          <Message>Invalid spacing around the closing parenthesis.</Message>
          <SourceCodeFileID>7</SourceCodeFileID>
          <SourceCodeLine>        return (actual.GetHashCode()*397) ^ Size;</SourceCodeLine>
          <Rules>
            <CheckId>SA1009</CheckId>
            <Description>Validates the spacing before and after a closing parenthesis.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ClosingParenthesisMustBeSpacedCorrectly</Name>
            <Namespace>Microsoft.StyleCop.CSharp.SpacingRules</Namespace>
            <Warning>false</Warning>
            <ViolationID>336</ViolationID>
            <ID>336</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>337</ID>
          <Line>78</Line>
          <Message>The spacing around the symbol '*' is invalid.</Message>
          <SourceCodeFileID>7</SourceCodeFileID>
          <SourceCodeLine>        return (actual.GetHashCode()*397) ^ Size;</SourceCodeLine>
          <Rules>
            <CheckId>SA1003</CheckId>
            <Description>Validates the spacing before and after an operator symbol.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>SymbolsMustBeSpacedCorrectly</Name>
            <Namespace>Microsoft.StyleCop.CSharp.SpacingRules</Namespace>
            <Warning>false</Warning>
            <ViolationID>337</ViolationID>
            <ID>337</ID>
          </Rules>
        </Violations>
      </SourceCodeFiles>
    </Projects>
    <Projects>
      <ID>2</ID>
      <Location>C:\Work\CodeQuality\Temp\Example\Example.Core.Tests\Example.Core.Tests.csproj</Location>
      <Name>Example.Core.Tests</Name>
      <SolutionID>0</SolutionID>
      <SourceCodeFiles>
        <ID>8</ID>
        <Path>C:\Work\CodeQuality\Temp\Example\Example.Core.Tests\Properties\AssemblyInfo.cs</Path>
        <TimeStamp>2009-04-30T10:12:22.0429045+02:00</TimeStamp>
        <Type>CS</Type>
        <Name>AssemblyInfo.cs</Name>
        <CodeProjectID>2</CodeProjectID>
        <Violations>
          <ID>225</ID>
          <Line>1</Line>
          <Message>The file has no header, the header Xml is invalid, or the header is not located at the top of the file.</Message>
          <SourceCodeFileID>8</SourceCodeFileID>
          <SourceCodeLine>using System.Reflection;</SourceCodeLine>
          <Rules>
            <CheckId>SA1633</CheckId>
            <Description>Validates that a file contains a properly formatted file header.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>FileMustHaveHeader</Name>
            <Namespace>Microsoft.StyleCop.CSharp.DocumentationRules</Namespace>
            <RuleGroup>File Headers</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>225</ViolationID>
            <ID>225</ID>
          </Rules>
        </Violations>
      </SourceCodeFiles>
      <SourceCodeFiles>
        <ID>9</ID>
        <Path>C:\Work\CodeQuality\Temp\Example\Example.Core.Tests\TestMoney.cs</Path>
        <TimeStamp>2009-04-30T10:16:30.6305749+02:00</TimeStamp>
        <Type>CS</Type>
        <Name>TestMoney.cs</Name>
        <CodeProjectID>2</CodeProjectID>
        <Violations>
          <ID>226</ID>
          <Line>11</Line>
          <Message>The class must have a documentation header.</Message>
          <SourceCodeFileID>9</SourceCodeFileID>
          <SourceCodeLine>  public class TestMoney</SourceCodeLine>
          <Rules>
            <CheckId>SA1600</CheckId>
            <Description>Validates that an element contains a properly formatted documentation header.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ElementsMustBeDocumented</Name>
            <Namespace>Microsoft.StyleCop.CSharp.DocumentationRules</Namespace>
            <RuleGroup>Element Documentation</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>226</ViolationID>
            <ID>226</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>227</ID>
          <Line>13</Line>
          <Message>The field must have a documentation header.</Message>
          <SourceCodeFileID>9</SourceCodeFileID>
          <SourceCodeLine>    private Money f12CHF;</SourceCodeLine>
          <Rules>
            <CheckId>SA1600</CheckId>
            <Description>Validates that an element contains a properly formatted documentation header.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ElementsMustBeDocumented</Name>
            <Namespace>Microsoft.StyleCop.CSharp.DocumentationRules</Namespace>
            <RuleGroup>Element Documentation</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>227</ViolationID>
            <ID>227</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>228</ID>
          <Line>14</Line>
          <Message>The field must have a documentation header.</Message>
          <SourceCodeFileID>9</SourceCodeFileID>
          <SourceCodeLine>    private Money f14CHF;</SourceCodeLine>
          <Rules>
            <CheckId>SA1600</CheckId>
            <Description>Validates that an element contains a properly formatted documentation header.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ElementsMustBeDocumented</Name>
            <Namespace>Microsoft.StyleCop.CSharp.DocumentationRules</Namespace>
            <RuleGroup>Element Documentation</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>228</ViolationID>
            <ID>228</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>229</ID>
          <Line>15</Line>
          <Message>The field must have a documentation header.</Message>
          <SourceCodeFileID>9</SourceCodeFileID>
          <SourceCodeLine>    private Money f7USD;</SourceCodeLine>
          <Rules>
            <CheckId>SA1600</CheckId>
            <Description>Validates that an element contains a properly formatted documentation header.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ElementsMustBeDocumented</Name>
            <Namespace>Microsoft.StyleCop.CSharp.DocumentationRules</Namespace>
            <RuleGroup>Element Documentation</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>229</ViolationID>
            <ID>229</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>230</ID>
          <Line>16</Line>
          <Message>The field must have a documentation header.</Message>
          <SourceCodeFileID>9</SourceCodeFileID>
          <SourceCodeLine>    private Money f21USD;</SourceCodeLine>
          <Rules>
            <CheckId>SA1600</CheckId>
            <Description>Validates that an element contains a properly formatted documentation header.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ElementsMustBeDocumented</Name>
            <Namespace>Microsoft.StyleCop.CSharp.DocumentationRules</Namespace>
            <RuleGroup>Element Documentation</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>230</ViolationID>
            <ID>230</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>231</ID>
          <Line>18</Line>
          <Message>The field must have a documentation header.</Message>
          <SourceCodeFileID>9</SourceCodeFileID>
          <SourceCodeLine>    private MoneyBag fMB1;</SourceCodeLine>
          <Rules>
            <CheckId>SA1600</CheckId>
            <Description>Validates that an element contains a properly formatted documentation header.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ElementsMustBeDocumented</Name>
            <Namespace>Microsoft.StyleCop.CSharp.DocumentationRules</Namespace>
            <RuleGroup>Element Documentation</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>231</ViolationID>
            <ID>231</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>232</ID>
          <Line>19</Line>
          <Message>The field must have a documentation header.</Message>
          <SourceCodeFileID>9</SourceCodeFileID>
          <SourceCodeLine>    private MoneyBag fMB2;</SourceCodeLine>
          <Rules>
            <CheckId>SA1600</CheckId>
            <Description>Validates that an element contains a properly formatted documentation header.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ElementsMustBeDocumented</Name>
            <Namespace>Microsoft.StyleCop.CSharp.DocumentationRules</Namespace>
            <RuleGroup>Element Documentation</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>232</ViolationID>
            <ID>232</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>233</ID>
          <Line>22</Line>
          <Message>The documentation header must not contain blank lines. Use the 'para' tag to insert line breaks within documentation text.</Message>
          <SourceCodeFileID>9</SourceCodeFileID>
          <SourceCodeLine>    /// </SourceCodeLine>
          <Rules>
            <CheckId>SA1644</CheckId>
            <Description>Verifies that a documentation header does not contain blank lines.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>DocumentationHeadersMustNotContainBlankLines</Name>
            <Namespace>Microsoft.StyleCop.CSharp.DocumentationRules</Namespace>
            <RuleGroup>Element Documentation</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>233</ViolationID>
            <ID>233</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>234</ID>
          <Line>26</Line>
          <Message>The summary section in the documentation header must not be empty.</Message>
          <SourceCodeFileID>9</SourceCodeFileID>
          <SourceCodeLine>    protected void SetUp()</SourceCodeLine>
          <Rules>
            <CheckId>SA1606</CheckId>
            <Description>Validates that an element's summary tag contains a filled-in description.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ElementDocumentationMustHaveSummaryText</Name>
            <Namespace>Microsoft.StyleCop.CSharp.DocumentationRules</Namespace>
            <RuleGroup>Element Documentation</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>234</ViolationID>
            <ID>234</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>235</ID>
          <Line>38</Line>
          <Message>The documentation header must not contain blank lines. Use the 'para' tag to insert line breaks within documentation text.</Message>
          <SourceCodeFileID>9</SourceCodeFileID>
          <SourceCodeLine>    /// </SourceCodeLine>
          <Rules>
            <CheckId>SA1644</CheckId>
            <Description>Verifies that a documentation header does not contain blank lines.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>DocumentationHeadersMustNotContainBlankLines</Name>
            <Namespace>Microsoft.StyleCop.CSharp.DocumentationRules</Namespace>
            <RuleGroup>Element Documentation</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>235</ViolationID>
            <ID>235</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>236</ID>
          <Line>42</Line>
          <Message>The summary section in the documentation header must not be empty.</Message>
          <SourceCodeFileID>9</SourceCodeFileID>
          <SourceCodeLine>    public void BagMultiply()</SourceCodeLine>
          <Rules>
            <CheckId>SA1606</CheckId>
            <Description>Validates that an element's summary tag contains a filled-in description.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ElementDocumentationMustHaveSummaryText</Name>
            <Namespace>Microsoft.StyleCop.CSharp.DocumentationRules</Namespace>
            <RuleGroup>Element Documentation</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>236</ViolationID>
            <ID>236</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>237</ID>
          <Line>53</Line>
          <Message>The documentation header must not contain blank lines. Use the 'para' tag to insert line breaks within documentation text.</Message>
          <SourceCodeFileID>9</SourceCodeFileID>
          <SourceCodeLine>    /// </SourceCodeLine>
          <Rules>
            <CheckId>SA1644</CheckId>
            <Description>Verifies that a documentation header does not contain blank lines.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>DocumentationHeadersMustNotContainBlankLines</Name>
            <Namespace>Microsoft.StyleCop.CSharp.DocumentationRules</Namespace>
            <RuleGroup>Element Documentation</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>237</ViolationID>
            <ID>237</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>238</ID>
          <Line>57</Line>
          <Message>The summary section in the documentation header must not be empty.</Message>
          <SourceCodeFileID>9</SourceCodeFileID>
          <SourceCodeLine>    public void BagNegate()</SourceCodeLine>
          <Rules>
            <CheckId>SA1606</CheckId>
            <Description>Validates that an element's summary tag contains a filled-in description.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ElementDocumentationMustHaveSummaryText</Name>
            <Namespace>Microsoft.StyleCop.CSharp.DocumentationRules</Namespace>
            <RuleGroup>Element Documentation</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>238</ViolationID>
            <ID>238</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>239</ID>
          <Line>66</Line>
          <Message>The documentation header must not contain blank lines. Use the 'para' tag to insert line breaks within documentation text.</Message>
          <SourceCodeFileID>9</SourceCodeFileID>
          <SourceCodeLine>    /// </SourceCodeLine>
          <Rules>
            <CheckId>SA1644</CheckId>
            <Description>Verifies that a documentation header does not contain blank lines.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>DocumentationHeadersMustNotContainBlankLines</Name>
            <Namespace>Microsoft.StyleCop.CSharp.DocumentationRules</Namespace>
            <RuleGroup>Element Documentation</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>239</ViolationID>
            <ID>239</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>240</ID>
          <Line>70</Line>
          <Message>The summary section in the documentation header must not be empty.</Message>
          <SourceCodeFileID>9</SourceCodeFileID>
          <SourceCodeLine>    public void BagSimpleAdd()</SourceCodeLine>
          <Rules>
            <CheckId>SA1606</CheckId>
            <Description>Validates that an element's summary tag contains a filled-in description.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ElementDocumentationMustHaveSummaryText</Name>
            <Namespace>Microsoft.StyleCop.CSharp.DocumentationRules</Namespace>
            <RuleGroup>Element Documentation</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>240</ViolationID>
            <ID>240</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>241</ID>
          <Line>79</Line>
          <Message>The documentation header must not contain blank lines. Use the 'para' tag to insert line breaks within documentation text.</Message>
          <SourceCodeFileID>9</SourceCodeFileID>
          <SourceCodeLine>    /// </SourceCodeLine>
          <Rules>
            <CheckId>SA1644</CheckId>
            <Description>Verifies that a documentation header does not contain blank lines.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>DocumentationHeadersMustNotContainBlankLines</Name>
            <Namespace>Microsoft.StyleCop.CSharp.DocumentationRules</Namespace>
            <RuleGroup>Element Documentation</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>241</ViolationID>
            <ID>241</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>242</ID>
          <Line>83</Line>
          <Message>The summary section in the documentation header must not be empty.</Message>
          <SourceCodeFileID>9</SourceCodeFileID>
          <SourceCodeLine>    public void BagSubtract()</SourceCodeLine>
          <Rules>
            <CheckId>SA1606</CheckId>
            <Description>Validates that an element's summary tag contains a filled-in description.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ElementDocumentationMustHaveSummaryText</Name>
            <Namespace>Microsoft.StyleCop.CSharp.DocumentationRules</Namespace>
            <RuleGroup>Element Documentation</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>242</ViolationID>
            <ID>242</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>243</ID>
          <Line>92</Line>
          <Message>The documentation header must not contain blank lines. Use the 'para' tag to insert line breaks within documentation text.</Message>
          <SourceCodeFileID>9</SourceCodeFileID>
          <SourceCodeLine>    /// </SourceCodeLine>
          <Rules>
            <CheckId>SA1644</CheckId>
            <Description>Verifies that a documentation header does not contain blank lines.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>DocumentationHeadersMustNotContainBlankLines</Name>
            <Namespace>Microsoft.StyleCop.CSharp.DocumentationRules</Namespace>
            <RuleGroup>Element Documentation</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>243</ViolationID>
            <ID>243</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>244</ID>
          <Line>96</Line>
          <Message>The summary section in the documentation header must not be empty.</Message>
          <SourceCodeFileID>9</SourceCodeFileID>
          <SourceCodeLine>    public void BagSumAdd()</SourceCodeLine>
          <Rules>
            <CheckId>SA1606</CheckId>
            <Description>Validates that an element's summary tag contains a filled-in description.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ElementDocumentationMustHaveSummaryText</Name>
            <Namespace>Microsoft.StyleCop.CSharp.DocumentationRules</Namespace>
            <RuleGroup>Element Documentation</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>244</ViolationID>
            <ID>244</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>245</ID>
          <Line>105</Line>
          <Message>The documentation header must not contain blank lines. Use the 'para' tag to insert line breaks within documentation text.</Message>
          <SourceCodeFileID>9</SourceCodeFileID>
          <SourceCodeLine>    /// </SourceCodeLine>
          <Rules>
            <CheckId>SA1644</CheckId>
            <Description>Verifies that a documentation header does not contain blank lines.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>DocumentationHeadersMustNotContainBlankLines</Name>
            <Namespace>Microsoft.StyleCop.CSharp.DocumentationRules</Namespace>
            <RuleGroup>Element Documentation</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>245</ViolationID>
            <ID>245</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>246</ID>
          <Line>109</Line>
          <Message>The summary section in the documentation header must not be empty.</Message>
          <SourceCodeFileID>9</SourceCodeFileID>
          <SourceCodeLine>    public void IsZero()</SourceCodeLine>
          <Rules>
            <CheckId>SA1606</CheckId>
            <Description>Validates that an element's summary tag contains a filled-in description.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ElementDocumentationMustHaveSummaryText</Name>
            <Namespace>Microsoft.StyleCop.CSharp.DocumentationRules</Namespace>
            <RuleGroup>Element Documentation</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>246</ViolationID>
            <ID>246</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>247</ID>
          <Line>118</Line>
          <Message>The documentation header must not contain blank lines. Use the 'para' tag to insert line breaks within documentation text.</Message>
          <SourceCodeFileID>9</SourceCodeFileID>
          <SourceCodeLine>    /// </SourceCodeLine>
          <Rules>
            <CheckId>SA1644</CheckId>
            <Description>Verifies that a documentation header does not contain blank lines.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>DocumentationHeadersMustNotContainBlankLines</Name>
            <Namespace>Microsoft.StyleCop.CSharp.DocumentationRules</Namespace>
            <RuleGroup>Element Documentation</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>247</ViolationID>
            <ID>247</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>248</ID>
          <Line>122</Line>
          <Message>The summary section in the documentation header must not be empty.</Message>
          <SourceCodeFileID>9</SourceCodeFileID>
          <SourceCodeLine>    public void MixedSimpleAdd()</SourceCodeLine>
          <Rules>
            <CheckId>SA1606</CheckId>
            <Description>Validates that an element's summary tag contains a filled-in description.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ElementDocumentationMustHaveSummaryText</Name>
            <Namespace>Microsoft.StyleCop.CSharp.DocumentationRules</Namespace>
            <RuleGroup>Element Documentation</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>248</ViolationID>
            <ID>248</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>249</ID>
          <Line>131</Line>
          <Message>The documentation header must not contain blank lines. Use the 'para' tag to insert line breaks within documentation text.</Message>
          <SourceCodeFileID>9</SourceCodeFileID>
          <SourceCodeLine>    /// </SourceCodeLine>
          <Rules>
            <CheckId>SA1644</CheckId>
            <Description>Verifies that a documentation header does not contain blank lines.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>DocumentationHeadersMustNotContainBlankLines</Name>
            <Namespace>Microsoft.StyleCop.CSharp.DocumentationRules</Namespace>
            <RuleGroup>Element Documentation</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>249</ViolationID>
            <ID>249</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>250</ID>
          <Line>135</Line>
          <Message>The summary section in the documentation header must not be empty.</Message>
          <SourceCodeFileID>9</SourceCodeFileID>
          <SourceCodeLine>    public void MoneyBagEquals()</SourceCodeLine>
          <Rules>
            <CheckId>SA1606</CheckId>
            <Description>Validates that an element's summary tag contains a filled-in description.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ElementDocumentationMustHaveSummaryText</Name>
            <Namespace>Microsoft.StyleCop.CSharp.DocumentationRules</Namespace>
            <RuleGroup>Element Documentation</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>250</ViolationID>
            <ID>250</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>251</ID>
          <Line>151</Line>
          <Message>The documentation header must not contain blank lines. Use the 'para' tag to insert line breaks within documentation text.</Message>
          <SourceCodeFileID>9</SourceCodeFileID>
          <SourceCodeLine>    /// </SourceCodeLine>
          <Rules>
            <CheckId>SA1644</CheckId>
            <Description>Verifies that a documentation header does not contain blank lines.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>DocumentationHeadersMustNotContainBlankLines</Name>
            <Namespace>Microsoft.StyleCop.CSharp.DocumentationRules</Namespace>
            <RuleGroup>Element Documentation</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>251</ViolationID>
            <ID>251</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>252</ID>
          <Line>155</Line>
          <Message>The summary section in the documentation header must not be empty.</Message>
          <SourceCodeFileID>9</SourceCodeFileID>
          <SourceCodeLine>    public void MoneyBagHash()</SourceCodeLine>
          <Rules>
            <CheckId>SA1606</CheckId>
            <Description>Validates that an element's summary tag contains a filled-in description.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ElementDocumentationMustHaveSummaryText</Name>
            <Namespace>Microsoft.StyleCop.CSharp.DocumentationRules</Namespace>
            <RuleGroup>Element Documentation</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>252</ViolationID>
            <ID>252</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>253</ID>
          <Line>162</Line>
          <Message>The documentation header must not contain blank lines. Use the 'para' tag to insert line breaks within documentation text.</Message>
          <SourceCodeFileID>9</SourceCodeFileID>
          <SourceCodeLine>    /// </SourceCodeLine>
          <Rules>
            <CheckId>SA1644</CheckId>
            <Description>Verifies that a documentation header does not contain blank lines.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>DocumentationHeadersMustNotContainBlankLines</Name>
            <Namespace>Microsoft.StyleCop.CSharp.DocumentationRules</Namespace>
            <RuleGroup>Element Documentation</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>253</ViolationID>
            <ID>253</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>254</ID>
          <Line>166</Line>
          <Message>The summary section in the documentation header must not be empty.</Message>
          <SourceCodeFileID>9</SourceCodeFileID>
          <SourceCodeLine>    public void MoneyEquals()</SourceCodeLine>
          <Rules>
            <CheckId>SA1606</CheckId>
            <Description>Validates that an element's summary tag contains a filled-in description.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ElementDocumentationMustHaveSummaryText</Name>
            <Namespace>Microsoft.StyleCop.CSharp.DocumentationRules</Namespace>
            <RuleGroup>Element Documentation</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>254</ViolationID>
            <ID>254</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>255</ID>
          <Line>179</Line>
          <Message>The documentation header must not contain blank lines. Use the 'para' tag to insert line breaks within documentation text.</Message>
          <SourceCodeFileID>9</SourceCodeFileID>
          <SourceCodeLine>    /// </SourceCodeLine>
          <Rules>
            <CheckId>SA1644</CheckId>
            <Description>Verifies that a documentation header does not contain blank lines.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>DocumentationHeadersMustNotContainBlankLines</Name>
            <Namespace>Microsoft.StyleCop.CSharp.DocumentationRules</Namespace>
            <RuleGroup>Element Documentation</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>255</ViolationID>
            <ID>255</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>256</ID>
          <Line>183</Line>
          <Message>The summary section in the documentation header must not be empty.</Message>
          <SourceCodeFileID>9</SourceCodeFileID>
          <SourceCodeLine>    public void MoneyHash()</SourceCodeLine>
          <Rules>
            <CheckId>SA1606</CheckId>
            <Description>Validates that an element's summary tag contains a filled-in description.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ElementDocumentationMustHaveSummaryText</Name>
            <Namespace>Microsoft.StyleCop.CSharp.DocumentationRules</Namespace>
            <RuleGroup>Element Documentation</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>256</ViolationID>
            <ID>256</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>258</ID>
          <Line>191</Line>
          <Message>The documentation header must not contain blank lines. Use the 'para' tag to insert line breaks within documentation text.</Message>
          <SourceCodeFileID>9</SourceCodeFileID>
          <SourceCodeLine>    /// </SourceCodeLine>
          <Rules>
            <CheckId>SA1644</CheckId>
            <Description>Verifies that a documentation header does not contain blank lines.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>DocumentationHeadersMustNotContainBlankLines</Name>
            <Namespace>Microsoft.StyleCop.CSharp.DocumentationRules</Namespace>
            <RuleGroup>Element Documentation</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>258</ViolationID>
            <ID>258</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>260</ID>
          <Line>195</Line>
          <Message>The summary section in the documentation header must not be empty.</Message>
          <SourceCodeFileID>9</SourceCodeFileID>
          <SourceCodeLine>    public void Normalize()</SourceCodeLine>
          <Rules>
            <CheckId>SA1606</CheckId>
            <Description>Validates that an element's summary tag contains a filled-in description.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ElementDocumentationMustHaveSummaryText</Name>
            <Namespace>Microsoft.StyleCop.CSharp.DocumentationRules</Namespace>
            <RuleGroup>Element Documentation</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>260</ViolationID>
            <ID>260</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>263</ID>
          <Line>206</Line>
          <Message>The documentation header must not contain blank lines. Use the 'para' tag to insert line breaks within documentation text.</Message>
          <SourceCodeFileID>9</SourceCodeFileID>
          <SourceCodeLine>    /// </SourceCodeLine>
          <Rules>
            <CheckId>SA1644</CheckId>
            <Description>Verifies that a documentation header does not contain blank lines.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>DocumentationHeadersMustNotContainBlankLines</Name>
            <Namespace>Microsoft.StyleCop.CSharp.DocumentationRules</Namespace>
            <RuleGroup>Element Documentation</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>263</ViolationID>
            <ID>263</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>264</ID>
          <Line>210</Line>
          <Message>The summary section in the documentation header must not be empty.</Message>
          <SourceCodeFileID>9</SourceCodeFileID>
          <SourceCodeLine>    public void Normalize2()</SourceCodeLine>
          <Rules>
            <CheckId>SA1606</CheckId>
            <Description>Validates that an element's summary tag contains a filled-in description.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ElementDocumentationMustHaveSummaryText</Name>
            <Namespace>Microsoft.StyleCop.CSharp.DocumentationRules</Namespace>
            <RuleGroup>Element Documentation</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>264</ViolationID>
            <ID>264</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>265</ID>
          <Line>218</Line>
          <Message>The documentation header must not contain blank lines. Use the 'para' tag to insert line breaks within documentation text.</Message>
          <SourceCodeFileID>9</SourceCodeFileID>
          <SourceCodeLine>    /// </SourceCodeLine>
          <Rules>
            <CheckId>SA1644</CheckId>
            <Description>Verifies that a documentation header does not contain blank lines.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>DocumentationHeadersMustNotContainBlankLines</Name>
            <Namespace>Microsoft.StyleCop.CSharp.DocumentationRules</Namespace>
            <RuleGroup>Element Documentation</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>265</ViolationID>
            <ID>265</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>266</ID>
          <Line>222</Line>
          <Message>The summary section in the documentation header must not be empty.</Message>
          <SourceCodeFileID>9</SourceCodeFileID>
          <SourceCodeLine>    public void Normalize3()</SourceCodeLine>
          <Rules>
            <CheckId>SA1606</CheckId>
            <Description>Validates that an element's summary tag contains a filled-in description.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ElementDocumentationMustHaveSummaryText</Name>
            <Namespace>Microsoft.StyleCop.CSharp.DocumentationRules</Namespace>
            <RuleGroup>Element Documentation</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>266</ViolationID>
            <ID>266</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>267</ID>
          <Line>232</Line>
          <Message>The documentation header must not contain blank lines. Use the 'para' tag to insert line breaks within documentation text.</Message>
          <SourceCodeFileID>9</SourceCodeFileID>
          <SourceCodeLine>    /// </SourceCodeLine>
          <Rules>
            <CheckId>SA1644</CheckId>
            <Description>Verifies that a documentation header does not contain blank lines.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>DocumentationHeadersMustNotContainBlankLines</Name>
            <Namespace>Microsoft.StyleCop.CSharp.DocumentationRules</Namespace>
            <RuleGroup>Element Documentation</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>267</ViolationID>
            <ID>267</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>269</ID>
          <Line>236</Line>
          <Message>The summary section in the documentation header must not be empty.</Message>
          <SourceCodeFileID>9</SourceCodeFileID>
          <SourceCodeLine>    public void Normalize4()</SourceCodeLine>
          <Rules>
            <CheckId>SA1606</CheckId>
            <Description>Validates that an element's summary tag contains a filled-in description.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ElementDocumentationMustHaveSummaryText</Name>
            <Namespace>Microsoft.StyleCop.CSharp.DocumentationRules</Namespace>
            <RuleGroup>Element Documentation</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>269</ViolationID>
            <ID>269</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>272</ID>
          <Line>246</Line>
          <Message>The documentation header must not contain blank lines. Use the 'para' tag to insert line breaks within documentation text.</Message>
          <SourceCodeFileID>9</SourceCodeFileID>
          <SourceCodeLine>    /// </SourceCodeLine>
          <Rules>
            <CheckId>SA1644</CheckId>
            <Description>Verifies that a documentation header does not contain blank lines.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>DocumentationHeadersMustNotContainBlankLines</Name>
            <Namespace>Microsoft.StyleCop.CSharp.DocumentationRules</Namespace>
            <RuleGroup>Element Documentation</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>272</ViolationID>
            <ID>272</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>274</ID>
          <Line>250</Line>
          <Message>The summary section in the documentation header must not be empty.</Message>
          <SourceCodeFileID>9</SourceCodeFileID>
          <SourceCodeLine>    public void Print()</SourceCodeLine>
          <Rules>
            <CheckId>SA1606</CheckId>
            <Description>Validates that an element's summary tag contains a filled-in description.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ElementDocumentationMustHaveSummaryText</Name>
            <Namespace>Microsoft.StyleCop.CSharp.DocumentationRules</Namespace>
            <RuleGroup>Element Documentation</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>274</ViolationID>
            <ID>274</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>276</ID>
          <Line>256</Line>
          <Message>The documentation header must not contain blank lines. Use the 'para' tag to insert line breaks within documentation text.</Message>
          <SourceCodeFileID>9</SourceCodeFileID>
          <SourceCodeLine>    /// </SourceCodeLine>
          <Rules>
            <CheckId>SA1644</CheckId>
            <Description>Verifies that a documentation header does not contain blank lines.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>DocumentationHeadersMustNotContainBlankLines</Name>
            <Namespace>Microsoft.StyleCop.CSharp.DocumentationRules</Namespace>
            <RuleGroup>Element Documentation</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>276</ViolationID>
            <ID>276</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>278</ID>
          <Line>260</Line>
          <Message>The summary section in the documentation header must not be empty.</Message>
          <SourceCodeFileID>9</SourceCodeFileID>
          <SourceCodeLine>    public void SimpleAdd()</SourceCodeLine>
          <Rules>
            <CheckId>SA1606</CheckId>
            <Description>Validates that an element's summary tag contains a filled-in description.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ElementDocumentationMustHaveSummaryText</Name>
            <Namespace>Microsoft.StyleCop.CSharp.DocumentationRules</Namespace>
            <RuleGroup>Element Documentation</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>278</ViolationID>
            <ID>278</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>280</ID>
          <Line>268</Line>
          <Message>The documentation header must not contain blank lines. Use the 'para' tag to insert line breaks within documentation text.</Message>
          <SourceCodeFileID>9</SourceCodeFileID>
          <SourceCodeLine>    /// </SourceCodeLine>
          <Rules>
            <CheckId>SA1644</CheckId>
            <Description>Verifies that a documentation header does not contain blank lines.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>DocumentationHeadersMustNotContainBlankLines</Name>
            <Namespace>Microsoft.StyleCop.CSharp.DocumentationRules</Namespace>
            <RuleGroup>Element Documentation</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>280</ViolationID>
            <ID>280</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>281</ID>
          <Line>272</Line>
          <Message>The summary section in the documentation header must not be empty.</Message>
          <SourceCodeFileID>9</SourceCodeFileID>
          <SourceCodeLine>    public void SimpleBagAdd()</SourceCodeLine>
          <Rules>
            <CheckId>SA1606</CheckId>
            <Description>Validates that an element's summary tag contains a filled-in description.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ElementDocumentationMustHaveSummaryText</Name>
            <Namespace>Microsoft.StyleCop.CSharp.DocumentationRules</Namespace>
            <RuleGroup>Element Documentation</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>281</ViolationID>
            <ID>281</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>284</ID>
          <Line>281</Line>
          <Message>The documentation header must not contain blank lines. Use the 'para' tag to insert line breaks within documentation text.</Message>
          <SourceCodeFileID>9</SourceCodeFileID>
          <SourceCodeLine>    /// </SourceCodeLine>
          <Rules>
            <CheckId>SA1644</CheckId>
            <Description>Verifies that a documentation header does not contain blank lines.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>DocumentationHeadersMustNotContainBlankLines</Name>
            <Namespace>Microsoft.StyleCop.CSharp.DocumentationRules</Namespace>
            <RuleGroup>Element Documentation</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>284</ViolationID>
            <ID>284</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>286</ID>
          <Line>285</Line>
          <Message>The summary section in the documentation header must not be empty.</Message>
          <SourceCodeFileID>9</SourceCodeFileID>
          <SourceCodeLine>    public void SimpleMultiply()</SourceCodeLine>
          <Rules>
            <CheckId>SA1606</CheckId>
            <Description>Validates that an element's summary tag contains a filled-in description.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ElementDocumentationMustHaveSummaryText</Name>
            <Namespace>Microsoft.StyleCop.CSharp.DocumentationRules</Namespace>
            <RuleGroup>Element Documentation</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>286</ViolationID>
            <ID>286</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>289</ID>
          <Line>293</Line>
          <Message>The documentation header must not contain blank lines. Use the 'para' tag to insert line breaks within documentation text.</Message>
          <SourceCodeFileID>9</SourceCodeFileID>
          <SourceCodeLine>    /// </SourceCodeLine>
          <Rules>
            <CheckId>SA1644</CheckId>
            <Description>Verifies that a documentation header does not contain blank lines.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>DocumentationHeadersMustNotContainBlankLines</Name>
            <Namespace>Microsoft.StyleCop.CSharp.DocumentationRules</Namespace>
            <RuleGroup>Element Documentation</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>289</ViolationID>
            <ID>289</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>291</ID>
          <Line>297</Line>
          <Message>The summary section in the documentation header must not be empty.</Message>
          <SourceCodeFileID>9</SourceCodeFileID>
          <SourceCodeLine>    public void SimpleNegate()</SourceCodeLine>
          <Rules>
            <CheckId>SA1606</CheckId>
            <Description>Validates that an element's summary tag contains a filled-in description.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ElementDocumentationMustHaveSummaryText</Name>
            <Namespace>Microsoft.StyleCop.CSharp.DocumentationRules</Namespace>
            <RuleGroup>Element Documentation</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>291</ViolationID>
            <ID>291</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>292</ID>
          <Line>305</Line>
          <Message>The documentation header must not contain blank lines. Use the 'para' tag to insert line breaks within documentation text.</Message>
          <SourceCodeFileID>9</SourceCodeFileID>
          <SourceCodeLine>    /// </SourceCodeLine>
          <Rules>
            <CheckId>SA1644</CheckId>
            <Description>Verifies that a documentation header does not contain blank lines.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>DocumentationHeadersMustNotContainBlankLines</Name>
            <Namespace>Microsoft.StyleCop.CSharp.DocumentationRules</Namespace>
            <RuleGroup>Element Documentation</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>292</ViolationID>
            <ID>292</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>294</ID>
          <Line>309</Line>
          <Message>The summary section in the documentation header must not be empty.</Message>
          <SourceCodeFileID>9</SourceCodeFileID>
          <SourceCodeLine>    public void SimpleSubtract()</SourceCodeLine>
          <Rules>
            <CheckId>SA1606</CheckId>
            <Description>Validates that an element's summary tag contains a filled-in description.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ElementDocumentationMustHaveSummaryText</Name>
            <Namespace>Microsoft.StyleCop.CSharp.DocumentationRules</Namespace>
            <RuleGroup>Element Documentation</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>294</ViolationID>
            <ID>294</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>297</ID>
          <Line>1</Line>
          <Message>The file has no header, the header Xml is invalid, or the header is not located at the top of the file.</Message>
          <SourceCodeFileID>9</SourceCodeFileID>
          <SourceCodeLine>using System;</SourceCodeLine>
          <Rules>
            <CheckId>SA1633</CheckId>
            <Description>Validates that a file contains a properly formatted file header.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>FileMustHaveHeader</Name>
            <Namespace>Microsoft.StyleCop.CSharp.DocumentationRules</Namespace>
            <RuleGroup>File Headers</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>297</ViolationID>
            <ID>297</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>304</ID>
          <Line>200</Line>
          <Message>A single-line comment must be preceded by a blank line or another single-line comment, or must be the first item in its scope. To ignore this error when commenting out a line of code, begin the comment with '////' rather than '//'.</Message>
          <SourceCodeFileID>9</SourceCodeFileID>
          <SourceCodeLine>      // note: expected is still a MoneyBag</SourceCodeLine>
          <Rules>
            <CheckId>SA1515</CheckId>
            <Description>Validates that a comment is preceded by a blank line, or is the first item in its scope.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>SingleLineCommentMustBePrecededByBlankLine</Name>
            <Namespace>Microsoft.StyleCop.CSharp.LayoutRules</Namespace>
            <RuleGroup>Line Spacing</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>304</ViolationID>
            <ID>304</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>309</ID>
          <Line>13</Line>
          <Message>The variable name 'f12CHF' begins with a prefix that looks like Hungarian notation. Remove the prefix or add it to the list of allowed prefixes.</Message>
          <SourceCodeFileID>9</SourceCodeFileID>
          <SourceCodeLine>    private Money f12CHF;</SourceCodeLine>
          <Rules>
            <CheckId>SA1305</CheckId>
            <Description>Validates that a variable name is not prepended with lower-case characters matching the signature of Hungarian notation.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>FieldNamesMustNotUseHungarianNotation</Name>
            <Namespace>Microsoft.StyleCop.CSharp.NamingRules</Namespace>
            <Warning>false</Warning>
            <ViolationID>309</ViolationID>
            <ID>309</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>310</ID>
          <Line>14</Line>
          <Message>The variable name 'f14CHF' begins with a prefix that looks like Hungarian notation. Remove the prefix or add it to the list of allowed prefixes.</Message>
          <SourceCodeFileID>9</SourceCodeFileID>
          <SourceCodeLine>    private Money f14CHF;</SourceCodeLine>
          <Rules>
            <CheckId>SA1305</CheckId>
            <Description>Validates that a variable name is not prepended with lower-case characters matching the signature of Hungarian notation.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>FieldNamesMustNotUseHungarianNotation</Name>
            <Namespace>Microsoft.StyleCop.CSharp.NamingRules</Namespace>
            <Warning>false</Warning>
            <ViolationID>310</ViolationID>
            <ID>310</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>311</ID>
          <Line>15</Line>
          <Message>The variable name 'f7USD' begins with a prefix that looks like Hungarian notation. Remove the prefix or add it to the list of allowed prefixes.</Message>
          <SourceCodeFileID>9</SourceCodeFileID>
          <SourceCodeLine>    private Money f7USD;</SourceCodeLine>
          <Rules>
            <CheckId>SA1305</CheckId>
            <Description>Validates that a variable name is not prepended with lower-case characters matching the signature of Hungarian notation.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>FieldNamesMustNotUseHungarianNotation</Name>
            <Namespace>Microsoft.StyleCop.CSharp.NamingRules</Namespace>
            <Warning>false</Warning>
            <ViolationID>311</ViolationID>
            <ID>311</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>315</ID>
          <Line>16</Line>
          <Message>The variable name 'f21USD' begins with a prefix that looks like Hungarian notation. Remove the prefix or add it to the list of allowed prefixes.</Message>
          <SourceCodeFileID>9</SourceCodeFileID>
          <SourceCodeLine>    private Money f21USD;</SourceCodeLine>
          <Rules>
            <CheckId>SA1305</CheckId>
            <Description>Validates that a variable name is not prepended with lower-case characters matching the signature of Hungarian notation.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>FieldNamesMustNotUseHungarianNotation</Name>
            <Namespace>Microsoft.StyleCop.CSharp.NamingRules</Namespace>
            <Warning>false</Warning>
            <ViolationID>315</ViolationID>
            <ID>315</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>317</ID>
          <Line>18</Line>
          <Message>The variable name 'fMB1' begins with a prefix that looks like Hungarian notation. Remove the prefix or add it to the list of allowed prefixes.</Message>
          <SourceCodeFileID>9</SourceCodeFileID>
          <SourceCodeLine>    private MoneyBag fMB1;</SourceCodeLine>
          <Rules>
            <CheckId>SA1305</CheckId>
            <Description>Validates that a variable name is not prepended with lower-case characters matching the signature of Hungarian notation.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>FieldNamesMustNotUseHungarianNotation</Name>
            <Namespace>Microsoft.StyleCop.CSharp.NamingRules</Namespace>
            <Warning>false</Warning>
            <ViolationID>317</ViolationID>
            <ID>317</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>322</ID>
          <Line>19</Line>
          <Message>The variable name 'fMB2' begins with a prefix that looks like Hungarian notation. Remove the prefix or add it to the list of allowed prefixes.</Message>
          <SourceCodeFileID>9</SourceCodeFileID>
          <SourceCodeLine>    private MoneyBag fMB2;</SourceCodeLine>
          <Rules>
            <CheckId>SA1305</CheckId>
            <Description>Validates that a variable name is not prepended with lower-case characters matching the signature of Hungarian notation.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>FieldNamesMustNotUseHungarianNotation</Name>
            <Namespace>Microsoft.StyleCop.CSharp.NamingRules</Namespace>
            <Warning>false</Warning>
            <ViolationID>322</ViolationID>
            <ID>322</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>332</ID>
          <Line>1</Line>
          <Message>All using directives must be placed inside of the namespace.</Message>
          <SourceCodeFileID>9</SourceCodeFileID>
          <SourceCodeLine>using System;</SourceCodeLine>
          <Rules>
            <CheckId>SA1200</CheckId>
            <Description>Validates that all using directives are placed within a namespace, if a namespace exists in the file.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>UsingDirectivesMustBePlacedWithinNamespace</Name>
            <Namespace>Microsoft.StyleCop.CSharp.OrderingRules</Namespace>
            <RuleGroup>Element Order</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>332</ViolationID>
            <ID>332</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>333</ID>
          <Line>2</Line>
          <Message>All using directives must be placed inside of the namespace.</Message>
          <SourceCodeFileID>9</SourceCodeFileID>
          <SourceCodeLine>using System.Collections.Generic;</SourceCodeLine>
          <Rules>
            <CheckId>SA1200</CheckId>
            <Description>Validates that all using directives are placed within a namespace, if a namespace exists in the file.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>UsingDirectivesMustBePlacedWithinNamespace</Name>
            <Namespace>Microsoft.StyleCop.CSharp.OrderingRules</Namespace>
            <RuleGroup>Element Order</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>333</ViolationID>
            <ID>333</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>338</ID>
          <Line>3</Line>
          <Message>All using directives must be placed inside of the namespace.</Message>
          <SourceCodeFileID>9</SourceCodeFileID>
          <SourceCodeLine>using System.Linq;</SourceCodeLine>
          <Rules>
            <CheckId>SA1200</CheckId>
            <Description>Validates that all using directives are placed within a namespace, if a namespace exists in the file.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>UsingDirectivesMustBePlacedWithinNamespace</Name>
            <Namespace>Microsoft.StyleCop.CSharp.OrderingRules</Namespace>
            <RuleGroup>Element Order</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>338</ViolationID>
            <ID>338</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>339</ID>
          <Line>4</Line>
          <Message>All using directives must be placed inside of the namespace.</Message>
          <SourceCodeFileID>9</SourceCodeFileID>
          <SourceCodeLine>using System.Text;</SourceCodeLine>
          <Rules>
            <CheckId>SA1200</CheckId>
            <Description>Validates that all using directives are placed within a namespace, if a namespace exists in the file.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>UsingDirectivesMustBePlacedWithinNamespace</Name>
            <Namespace>Microsoft.StyleCop.CSharp.OrderingRules</Namespace>
            <RuleGroup>Element Order</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>339</ViolationID>
            <ID>339</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>340</ID>
          <Line>5</Line>
          <Message>All using directives must be placed inside of the namespace.</Message>
          <SourceCodeFileID>9</SourceCodeFileID>
          <SourceCodeLine>using Assert=NUnit.Framework.Assert;</SourceCodeLine>
          <Rules>
            <CheckId>SA1200</CheckId>
            <Description>Validates that all using directives are placed within a namespace, if a namespace exists in the file.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>UsingDirectivesMustBePlacedWithinNamespace</Name>
            <Namespace>Microsoft.StyleCop.CSharp.OrderingRules</Namespace>
            <RuleGroup>Element Order</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>340</ViolationID>
            <ID>340</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>341</ID>
          <Line>6</Line>
          <Message>All using directives must be placed inside of the namespace.</Message>
          <SourceCodeFileID>9</SourceCodeFileID>
          <SourceCodeLine>using NUnit.Framework;</SourceCodeLine>
          <Rules>
            <CheckId>SA1200</CheckId>
            <Description>Validates that all using directives are placed within a namespace, if a namespace exists in the file.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>UsingDirectivesMustBePlacedWithinNamespace</Name>
            <Namespace>Microsoft.StyleCop.CSharp.OrderingRules</Namespace>
            <RuleGroup>Element Order</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>341</ViolationID>
            <ID>341</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>342</ID>
          <Line>42</Line>
          <Message>All protected methods must be placed after all public methods.</Message>
          <SourceCodeFileID>9</SourceCodeFileID>
          <SourceCodeLine>    public void BagMultiply()</SourceCodeLine>
          <Rules>
            <CheckId>SA1202</CheckId>
            <Description>Validates that elements of the same type are placed in order by access.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ElementsMustBeOrderedByAccess</Name>
            <Namespace>Microsoft.StyleCop.CSharp.OrderingRules</Namespace>
            <RuleGroup>Element Order</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>342</ViolationID>
            <ID>342</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>343</ID>
          <Line>57</Line>
          <Message>All protected methods must be placed after all public methods.</Message>
          <SourceCodeFileID>9</SourceCodeFileID>
          <SourceCodeLine>    public void BagNegate()</SourceCodeLine>
          <Rules>
            <CheckId>SA1202</CheckId>
            <Description>Validates that elements of the same type are placed in order by access.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ElementsMustBeOrderedByAccess</Name>
            <Namespace>Microsoft.StyleCop.CSharp.OrderingRules</Namespace>
            <RuleGroup>Element Order</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>343</ViolationID>
            <ID>343</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>344</ID>
          <Line>70</Line>
          <Message>All protected methods must be placed after all public methods.</Message>
          <SourceCodeFileID>9</SourceCodeFileID>
          <SourceCodeLine>    public void BagSimpleAdd()</SourceCodeLine>
          <Rules>
            <CheckId>SA1202</CheckId>
            <Description>Validates that elements of the same type are placed in order by access.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ElementsMustBeOrderedByAccess</Name>
            <Namespace>Microsoft.StyleCop.CSharp.OrderingRules</Namespace>
            <RuleGroup>Element Order</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>344</ViolationID>
            <ID>344</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>345</ID>
          <Line>83</Line>
          <Message>All protected methods must be placed after all public methods.</Message>
          <SourceCodeFileID>9</SourceCodeFileID>
          <SourceCodeLine>    public void BagSubtract()</SourceCodeLine>
          <Rules>
            <CheckId>SA1202</CheckId>
            <Description>Validates that elements of the same type are placed in order by access.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ElementsMustBeOrderedByAccess</Name>
            <Namespace>Microsoft.StyleCop.CSharp.OrderingRules</Namespace>
            <RuleGroup>Element Order</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>345</ViolationID>
            <ID>345</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>346</ID>
          <Line>96</Line>
          <Message>All protected methods must be placed after all public methods.</Message>
          <SourceCodeFileID>9</SourceCodeFileID>
          <SourceCodeLine>    public void BagSumAdd()</SourceCodeLine>
          <Rules>
            <CheckId>SA1202</CheckId>
            <Description>Validates that elements of the same type are placed in order by access.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ElementsMustBeOrderedByAccess</Name>
            <Namespace>Microsoft.StyleCop.CSharp.OrderingRules</Namespace>
            <RuleGroup>Element Order</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>346</ViolationID>
            <ID>346</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>347</ID>
          <Line>109</Line>
          <Message>All protected methods must be placed after all public methods.</Message>
          <SourceCodeFileID>9</SourceCodeFileID>
          <SourceCodeLine>    public void IsZero()</SourceCodeLine>
          <Rules>
            <CheckId>SA1202</CheckId>
            <Description>Validates that elements of the same type are placed in order by access.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ElementsMustBeOrderedByAccess</Name>
            <Namespace>Microsoft.StyleCop.CSharp.OrderingRules</Namespace>
            <RuleGroup>Element Order</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>347</ViolationID>
            <ID>347</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>348</ID>
          <Line>122</Line>
          <Message>All protected methods must be placed after all public methods.</Message>
          <SourceCodeFileID>9</SourceCodeFileID>
          <SourceCodeLine>    public void MixedSimpleAdd()</SourceCodeLine>
          <Rules>
            <CheckId>SA1202</CheckId>
            <Description>Validates that elements of the same type are placed in order by access.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ElementsMustBeOrderedByAccess</Name>
            <Namespace>Microsoft.StyleCop.CSharp.OrderingRules</Namespace>
            <RuleGroup>Element Order</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>348</ViolationID>
            <ID>348</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>349</ID>
          <Line>135</Line>
          <Message>All protected methods must be placed after all public methods.</Message>
          <SourceCodeFileID>9</SourceCodeFileID>
          <SourceCodeLine>    public void MoneyBagEquals()</SourceCodeLine>
          <Rules>
            <CheckId>SA1202</CheckId>
            <Description>Validates that elements of the same type are placed in order by access.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ElementsMustBeOrderedByAccess</Name>
            <Namespace>Microsoft.StyleCop.CSharp.OrderingRules</Namespace>
            <RuleGroup>Element Order</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>349</ViolationID>
            <ID>349</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>350</ID>
          <Line>155</Line>
          <Message>All protected methods must be placed after all public methods.</Message>
          <SourceCodeFileID>9</SourceCodeFileID>
          <SourceCodeLine>    public void MoneyBagHash()</SourceCodeLine>
          <Rules>
            <CheckId>SA1202</CheckId>
            <Description>Validates that elements of the same type are placed in order by access.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ElementsMustBeOrderedByAccess</Name>
            <Namespace>Microsoft.StyleCop.CSharp.OrderingRules</Namespace>
            <RuleGroup>Element Order</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>350</ViolationID>
            <ID>350</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>351</ID>
          <Line>166</Line>
          <Message>All protected methods must be placed after all public methods.</Message>
          <SourceCodeFileID>9</SourceCodeFileID>
          <SourceCodeLine>    public void MoneyEquals()</SourceCodeLine>
          <Rules>
            <CheckId>SA1202</CheckId>
            <Description>Validates that elements of the same type are placed in order by access.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ElementsMustBeOrderedByAccess</Name>
            <Namespace>Microsoft.StyleCop.CSharp.OrderingRules</Namespace>
            <RuleGroup>Element Order</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>351</ViolationID>
            <ID>351</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>352</ID>
          <Line>183</Line>
          <Message>All protected methods must be placed after all public methods.</Message>
          <SourceCodeFileID>9</SourceCodeFileID>
          <SourceCodeLine>    public void MoneyHash()</SourceCodeLine>
          <Rules>
            <CheckId>SA1202</CheckId>
            <Description>Validates that elements of the same type are placed in order by access.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ElementsMustBeOrderedByAccess</Name>
            <Namespace>Microsoft.StyleCop.CSharp.OrderingRules</Namespace>
            <RuleGroup>Element Order</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>352</ViolationID>
            <ID>352</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>353</ID>
          <Line>195</Line>
          <Message>All protected methods must be placed after all public methods.</Message>
          <SourceCodeFileID>9</SourceCodeFileID>
          <SourceCodeLine>    public void Normalize()</SourceCodeLine>
          <Rules>
            <CheckId>SA1202</CheckId>
            <Description>Validates that elements of the same type are placed in order by access.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ElementsMustBeOrderedByAccess</Name>
            <Namespace>Microsoft.StyleCop.CSharp.OrderingRules</Namespace>
            <RuleGroup>Element Order</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>353</ViolationID>
            <ID>353</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>354</ID>
          <Line>210</Line>
          <Message>All protected methods must be placed after all public methods.</Message>
          <SourceCodeFileID>9</SourceCodeFileID>
          <SourceCodeLine>    public void Normalize2()</SourceCodeLine>
          <Rules>
            <CheckId>SA1202</CheckId>
            <Description>Validates that elements of the same type are placed in order by access.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ElementsMustBeOrderedByAccess</Name>
            <Namespace>Microsoft.StyleCop.CSharp.OrderingRules</Namespace>
            <RuleGroup>Element Order</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>354</ViolationID>
            <ID>354</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>355</ID>
          <Line>222</Line>
          <Message>All protected methods must be placed after all public methods.</Message>
          <SourceCodeFileID>9</SourceCodeFileID>
          <SourceCodeLine>    public void Normalize3()</SourceCodeLine>
          <Rules>
            <CheckId>SA1202</CheckId>
            <Description>Validates that elements of the same type are placed in order by access.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ElementsMustBeOrderedByAccess</Name>
            <Namespace>Microsoft.StyleCop.CSharp.OrderingRules</Namespace>
            <RuleGroup>Element Order</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>355</ViolationID>
            <ID>355</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>356</ID>
          <Line>236</Line>
          <Message>All protected methods must be placed after all public methods.</Message>
          <SourceCodeFileID>9</SourceCodeFileID>
          <SourceCodeLine>    public void Normalize4()</SourceCodeLine>
          <Rules>
            <CheckId>SA1202</CheckId>
            <Description>Validates that elements of the same type are placed in order by access.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ElementsMustBeOrderedByAccess</Name>
            <Namespace>Microsoft.StyleCop.CSharp.OrderingRules</Namespace>
            <RuleGroup>Element Order</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>356</ViolationID>
            <ID>356</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>357</ID>
          <Line>250</Line>
          <Message>All protected methods must be placed after all public methods.</Message>
          <SourceCodeFileID>9</SourceCodeFileID>
          <SourceCodeLine>    public void Print()</SourceCodeLine>
          <Rules>
            <CheckId>SA1202</CheckId>
            <Description>Validates that elements of the same type are placed in order by access.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ElementsMustBeOrderedByAccess</Name>
            <Namespace>Microsoft.StyleCop.CSharp.OrderingRules</Namespace>
            <RuleGroup>Element Order</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>357</ViolationID>
            <ID>357</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>358</ID>
          <Line>260</Line>
          <Message>All protected methods must be placed after all public methods.</Message>
          <SourceCodeFileID>9</SourceCodeFileID>
          <SourceCodeLine>    public void SimpleAdd()</SourceCodeLine>
          <Rules>
            <CheckId>SA1202</CheckId>
            <Description>Validates that elements of the same type are placed in order by access.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ElementsMustBeOrderedByAccess</Name>
            <Namespace>Microsoft.StyleCop.CSharp.OrderingRules</Namespace>
            <RuleGroup>Element Order</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>358</ViolationID>
            <ID>358</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>359</ID>
          <Line>272</Line>
          <Message>All protected methods must be placed after all public methods.</Message>
          <SourceCodeFileID>9</SourceCodeFileID>
          <SourceCodeLine>    public void SimpleBagAdd()</SourceCodeLine>
          <Rules>
            <CheckId>SA1202</CheckId>
            <Description>Validates that elements of the same type are placed in order by access.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ElementsMustBeOrderedByAccess</Name>
            <Namespace>Microsoft.StyleCop.CSharp.OrderingRules</Namespace>
            <RuleGroup>Element Order</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>359</ViolationID>
            <ID>359</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>360</ID>
          <Line>285</Line>
          <Message>All protected methods must be placed after all public methods.</Message>
          <SourceCodeFileID>9</SourceCodeFileID>
          <SourceCodeLine>    public void SimpleMultiply()</SourceCodeLine>
          <Rules>
            <CheckId>SA1202</CheckId>
            <Description>Validates that elements of the same type are placed in order by access.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ElementsMustBeOrderedByAccess</Name>
            <Namespace>Microsoft.StyleCop.CSharp.OrderingRules</Namespace>
            <RuleGroup>Element Order</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>360</ViolationID>
            <ID>360</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>361</ID>
          <Line>297</Line>
          <Message>All protected methods must be placed after all public methods.</Message>
          <SourceCodeFileID>9</SourceCodeFileID>
          <SourceCodeLine>    public void SimpleNegate()</SourceCodeLine>
          <Rules>
            <CheckId>SA1202</CheckId>
            <Description>Validates that elements of the same type are placed in order by access.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ElementsMustBeOrderedByAccess</Name>
            <Namespace>Microsoft.StyleCop.CSharp.OrderingRules</Namespace>
            <RuleGroup>Element Order</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>361</ViolationID>
            <ID>361</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>362</ID>
          <Line>309</Line>
          <Message>All protected methods must be placed after all public methods.</Message>
          <SourceCodeFileID>9</SourceCodeFileID>
          <SourceCodeLine>    public void SimpleSubtract()</SourceCodeLine>
          <Rules>
            <CheckId>SA1202</CheckId>
            <Description>Validates that elements of the same type are placed in order by access.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>ElementsMustBeOrderedByAccess</Name>
            <Namespace>Microsoft.StyleCop.CSharp.OrderingRules</Namespace>
            <RuleGroup>Element Order</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>362</ViolationID>
            <ID>362</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>363</ID>
          <Line>5</Line>
          <Message>Using alias directives must be placed after all using namespace directives.</Message>
          <SourceCodeFileID>9</SourceCodeFileID>
          <SourceCodeLine>using Assert=NUnit.Framework.Assert;</SourceCodeLine>
          <Rules>
            <CheckId>SA1209</CheckId>
            <Description>Verifies that all using alias directives are placed after all using namespace directives.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>UsingAliasDirectivesMustBePlacedAfterOtherUsingDirectives</Name>
            <Namespace>Microsoft.StyleCop.CSharp.OrderingRules</Namespace>
            <RuleGroup>Using Directives</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>363</ViolationID>
            <ID>363</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>364</ID>
          <Line>28</Line>
          <Message>The call to f12CHF must begin with the 'this.' prefix to indicate that the item is a member of the class.</Message>
          <SourceCodeFileID>9</SourceCodeFileID>
          <SourceCodeLine>      f12CHF = new Money(12, "CHF");</SourceCodeLine>
          <Rules>
            <CheckId>SA1101</CheckId>
            <Description>Verifies that calls to local members are prefixed with the 'this.' notation.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>PrefixLocalCallsWithThis</Name>
            <Namespace>Microsoft.StyleCop.CSharp.ReadabilityRules</Namespace>
            <RuleGroup>Member Access</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>364</ViolationID>
            <ID>364</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>365</ID>
          <Line>29</Line>
          <Message>The call to f14CHF must begin with the 'this.' prefix to indicate that the item is a member of the class.</Message>
          <SourceCodeFileID>9</SourceCodeFileID>
          <SourceCodeLine>      f14CHF = new Money(14, "CHF");</SourceCodeLine>
          <Rules>
            <CheckId>SA1101</CheckId>
            <Description>Verifies that calls to local members are prefixed with the 'this.' notation.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>PrefixLocalCallsWithThis</Name>
            <Namespace>Microsoft.StyleCop.CSharp.ReadabilityRules</Namespace>
            <RuleGroup>Member Access</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>365</ViolationID>
            <ID>365</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>366</ID>
          <Line>30</Line>
          <Message>The call to f7USD must begin with the 'this.' prefix to indicate that the item is a member of the class.</Message>
          <SourceCodeFileID>9</SourceCodeFileID>
          <SourceCodeLine>      f7USD = new Money(7, "USD");</SourceCodeLine>
          <Rules>
            <CheckId>SA1101</CheckId>
            <Description>Verifies that calls to local members are prefixed with the 'this.' notation.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>PrefixLocalCallsWithThis</Name>
            <Namespace>Microsoft.StyleCop.CSharp.ReadabilityRules</Namespace>
            <RuleGroup>Member Access</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>366</ViolationID>
            <ID>366</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>367</ID>
          <Line>31</Line>
          <Message>The call to f21USD must begin with the 'this.' prefix to indicate that the item is a member of the class.</Message>
          <SourceCodeFileID>9</SourceCodeFileID>
          <SourceCodeLine>      f21USD = new Money(21, "USD");</SourceCodeLine>
          <Rules>
            <CheckId>SA1101</CheckId>
            <Description>Verifies that calls to local members are prefixed with the 'this.' notation.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>PrefixLocalCallsWithThis</Name>
            <Namespace>Microsoft.StyleCop.CSharp.ReadabilityRules</Namespace>
            <RuleGroup>Member Access</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>367</ViolationID>
            <ID>367</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>368</ID>
          <Line>33</Line>
          <Message>The call to fMB1 must begin with the 'this.' prefix to indicate that the item is a member of the class.</Message>
          <SourceCodeFileID>9</SourceCodeFileID>
          <SourceCodeLine>      fMB1 = new MoneyBag(f12CHF, f7USD);</SourceCodeLine>
          <Rules>
            <CheckId>SA1101</CheckId>
            <Description>Verifies that calls to local members are prefixed with the 'this.' notation.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>PrefixLocalCallsWithThis</Name>
            <Namespace>Microsoft.StyleCop.CSharp.ReadabilityRules</Namespace>
            <RuleGroup>Member Access</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>368</ViolationID>
            <ID>368</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>369</ID>
          <Line>34</Line>
          <Message>The call to fMB2 must begin with the 'this.' prefix to indicate that the item is a member of the class.</Message>
          <SourceCodeFileID>9</SourceCodeFileID>
          <SourceCodeLine>      fMB2 = new MoneyBag(f14CHF, f21USD);</SourceCodeLine>
          <Rules>
            <CheckId>SA1101</CheckId>
            <Description>Verifies that calls to local members are prefixed with the 'this.' notation.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>PrefixLocalCallsWithThis</Name>
            <Namespace>Microsoft.StyleCop.CSharp.ReadabilityRules</Namespace>
            <RuleGroup>Member Access</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>369</ViolationID>
            <ID>369</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>370</ID>
          <Line>47</Line>
          <Message>The call to fMB1 must begin with the 'this.' prefix to indicate that the item is a member of the class.</Message>
          <SourceCodeFileID>9</SourceCodeFileID>
          <SourceCodeLine>      Assert.AreEqual(expected, fMB1.Multiply(2));</SourceCodeLine>
          <Rules>
            <CheckId>SA1101</CheckId>
            <Description>Verifies that calls to local members are prefixed with the 'this.' notation.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>PrefixLocalCallsWithThis</Name>
            <Namespace>Microsoft.StyleCop.CSharp.ReadabilityRules</Namespace>
            <RuleGroup>Member Access</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>370</ViolationID>
            <ID>370</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>371</ID>
          <Line>48</Line>
          <Message>The call to fMB1 must begin with the 'this.' prefix to indicate that the item is a member of the class.</Message>
          <SourceCodeFileID>9</SourceCodeFileID>
          <SourceCodeLine>      Assert.AreEqual(fMB1, fMB1.Multiply(1));</SourceCodeLine>
          <Rules>
            <CheckId>SA1101</CheckId>
            <Description>Verifies that calls to local members are prefixed with the 'this.' notation.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>PrefixLocalCallsWithThis</Name>
            <Namespace>Microsoft.StyleCop.CSharp.ReadabilityRules</Namespace>
            <RuleGroup>Member Access</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>371</ViolationID>
            <ID>371</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>372</ID>
          <Line>49</Line>
          <Message>The call to fMB1 must begin with the 'this.' prefix to indicate that the item is a member of the class.</Message>
          <SourceCodeFileID>9</SourceCodeFileID>
          <SourceCodeLine>      Assert.IsTrue(fMB1.Multiply(0).IsZero);</SourceCodeLine>
          <Rules>
            <CheckId>SA1101</CheckId>
            <Description>Verifies that calls to local members are prefixed with the 'this.' notation.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>PrefixLocalCallsWithThis</Name>
            <Namespace>Microsoft.StyleCop.CSharp.ReadabilityRules</Namespace>
            <RuleGroup>Member Access</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>372</ViolationID>
            <ID>372</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>373</ID>
          <Line>62</Line>
          <Message>The call to fMB1 must begin with the 'this.' prefix to indicate that the item is a member of the class.</Message>
          <SourceCodeFileID>9</SourceCodeFileID>
          <SourceCodeLine>      Assert.AreEqual(expected, fMB1.Negate());</SourceCodeLine>
          <Rules>
            <CheckId>SA1101</CheckId>
            <Description>Verifies that calls to local members are prefixed with the 'this.' notation.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>PrefixLocalCallsWithThis</Name>
            <Namespace>Microsoft.StyleCop.CSharp.ReadabilityRules</Namespace>
            <RuleGroup>Member Access</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>373</ViolationID>
            <ID>373</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>374</ID>
          <Line>75</Line>
          <Message>The call to fMB1 must begin with the 'this.' prefix to indicate that the item is a member of the class.</Message>
          <SourceCodeFileID>9</SourceCodeFileID>
          <SourceCodeLine>      Assert.AreEqual(expected, fMB1.Add(f14CHF));</SourceCodeLine>
          <Rules>
            <CheckId>SA1101</CheckId>
            <Description>Verifies that calls to local members are prefixed with the 'this.' notation.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>PrefixLocalCallsWithThis</Name>
            <Namespace>Microsoft.StyleCop.CSharp.ReadabilityRules</Namespace>
            <RuleGroup>Member Access</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>374</ViolationID>
            <ID>374</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>375</ID>
          <Line>88</Line>
          <Message>The call to fMB1 must begin with the 'this.' prefix to indicate that the item is a member of the class.</Message>
          <SourceCodeFileID>9</SourceCodeFileID>
          <SourceCodeLine>      Assert.AreEqual(expected, fMB1.Subtract(fMB2));</SourceCodeLine>
          <Rules>
            <CheckId>SA1101</CheckId>
            <Description>Verifies that calls to local members are prefixed with the 'this.' notation.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>PrefixLocalCallsWithThis</Name>
            <Namespace>Microsoft.StyleCop.CSharp.ReadabilityRules</Namespace>
            <RuleGroup>Member Access</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>375</ViolationID>
            <ID>375</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>376</ID>
          <Line>101</Line>
          <Message>The call to fMB1 must begin with the 'this.' prefix to indicate that the item is a member of the class.</Message>
          <SourceCodeFileID>9</SourceCodeFileID>
          <SourceCodeLine>      Assert.AreEqual(expected, fMB1.Add(fMB2));</SourceCodeLine>
          <Rules>
            <CheckId>SA1101</CheckId>
            <Description>Verifies that calls to local members are prefixed with the 'this.' notation.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>PrefixLocalCallsWithThis</Name>
            <Namespace>Microsoft.StyleCop.CSharp.ReadabilityRules</Namespace>
            <RuleGroup>Member Access</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>376</ViolationID>
            <ID>376</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>377</ID>
          <Line>111</Line>
          <Message>The call to fMB1 must begin with the 'this.' prefix to indicate that the item is a member of the class.</Message>
          <SourceCodeFileID>9</SourceCodeFileID>
          <SourceCodeLine>      Assert.IsTrue(fMB1.Subtract(fMB1).IsZero);</SourceCodeLine>
          <Rules>
            <CheckId>SA1101</CheckId>
            <Description>Verifies that calls to local members are prefixed with the 'this.' notation.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>PrefixLocalCallsWithThis</Name>
            <Namespace>Microsoft.StyleCop.CSharp.ReadabilityRules</Namespace>
            <RuleGroup>Member Access</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>377</ViolationID>
            <ID>377</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>378</ID>
          <Line>125</Line>
          <Message>The call to f12CHF must begin with the 'this.' prefix to indicate that the item is a member of the class.</Message>
          <SourceCodeFileID>9</SourceCodeFileID>
          <SourceCodeLine>      Money[] bag = { f12CHF, f7USD };</SourceCodeLine>
          <Rules>
            <CheckId>SA1101</CheckId>
            <Description>Verifies that calls to local members are prefixed with the 'this.' notation.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>PrefixLocalCallsWithThis</Name>
            <Namespace>Microsoft.StyleCop.CSharp.ReadabilityRules</Namespace>
            <RuleGroup>Member Access</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>378</ViolationID>
            <ID>378</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>379</ID>
          <Line>127</Line>
          <Message>The call to f12CHF must begin with the 'this.' prefix to indicate that the item is a member of the class.</Message>
          <SourceCodeFileID>9</SourceCodeFileID>
          <SourceCodeLine>      Assert.AreEqual(expected, f12CHF.Add(f7USD));</SourceCodeLine>
          <Rules>
            <CheckId>SA1101</CheckId>
            <Description>Verifies that calls to local members are prefixed with the 'this.' notation.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>PrefixLocalCallsWithThis</Name>
            <Namespace>Microsoft.StyleCop.CSharp.ReadabilityRules</Namespace>
            <RuleGroup>Member Access</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>379</ViolationID>
            <ID>379</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>380</ID>
          <Line>140</Line>
          <Message>The call to fMB1 must begin with the 'this.' prefix to indicate that the item is a member of the class.</Message>
          <SourceCodeFileID>9</SourceCodeFileID>
          <SourceCodeLine>      Assert.IsFalse(fMB1.Equals(null));</SourceCodeLine>
          <Rules>
            <CheckId>SA1101</CheckId>
            <Description>Verifies that calls to local members are prefixed with the 'this.' notation.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>PrefixLocalCallsWithThis</Name>
            <Namespace>Microsoft.StyleCop.CSharp.ReadabilityRules</Namespace>
            <RuleGroup>Member Access</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>380</ViolationID>
            <ID>380</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>381</ID>
          <Line>142</Line>
          <Message>The call to fMB1 must begin with the 'this.' prefix to indicate that the item is a member of the class.</Message>
          <SourceCodeFileID>9</SourceCodeFileID>
          <SourceCodeLine>      Assert.IsTrue(fMB1.Equals(fMB1));</SourceCodeLine>
          <Rules>
            <CheckId>SA1101</CheckId>
            <Description>Verifies that calls to local members are prefixed with the 'this.' notation.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>PrefixLocalCallsWithThis</Name>
            <Namespace>Microsoft.StyleCop.CSharp.ReadabilityRules</Namespace>
            <RuleGroup>Member Access</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>381</ViolationID>
            <ID>381</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>382</ID>
          <Line>144</Line>
          <Message>The call to fMB1 must begin with the 'this.' prefix to indicate that the item is a member of the class.</Message>
          <SourceCodeFileID>9</SourceCodeFileID>
          <SourceCodeLine>      Assert.IsTrue(fMB1.Equals(equal));</SourceCodeLine>
          <Rules>
            <CheckId>SA1101</CheckId>
            <Description>Verifies that calls to local members are prefixed with the 'this.' notation.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>PrefixLocalCallsWithThis</Name>
            <Namespace>Microsoft.StyleCop.CSharp.ReadabilityRules</Namespace>
            <RuleGroup>Member Access</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>382</ViolationID>
            <ID>382</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>383</ID>
          <Line>145</Line>
          <Message>The call to fMB1 must begin with the 'this.' prefix to indicate that the item is a member of the class.</Message>
          <SourceCodeFileID>9</SourceCodeFileID>
          <SourceCodeLine>      Assert.IsTrue(!fMB1.Equals(f12CHF));</SourceCodeLine>
          <Rules>
            <CheckId>SA1101</CheckId>
            <Description>Verifies that calls to local members are prefixed with the 'this.' notation.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>PrefixLocalCallsWithThis</Name>
            <Namespace>Microsoft.StyleCop.CSharp.ReadabilityRules</Namespace>
            <RuleGroup>Member Access</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>383</ViolationID>
            <ID>383</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>384</ID>
          <Line>146</Line>
          <Message>The call to f12CHF must begin with the 'this.' prefix to indicate that the item is a member of the class.</Message>
          <SourceCodeFileID>9</SourceCodeFileID>
          <SourceCodeLine>      Assert.IsTrue(!f12CHF.Equals(fMB1));</SourceCodeLine>
          <Rules>
            <CheckId>SA1101</CheckId>
            <Description>Verifies that calls to local members are prefixed with the 'this.' notation.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>PrefixLocalCallsWithThis</Name>
            <Namespace>Microsoft.StyleCop.CSharp.ReadabilityRules</Namespace>
            <RuleGroup>Member Access</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>384</ViolationID>
            <ID>384</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>385</ID>
          <Line>147</Line>
          <Message>The call to fMB1 must begin with the 'this.' prefix to indicate that the item is a member of the class.</Message>
          <SourceCodeFileID>9</SourceCodeFileID>
          <SourceCodeLine>      Assert.IsTrue(!fMB1.Equals(fMB2));</SourceCodeLine>
          <Rules>
            <CheckId>SA1101</CheckId>
            <Description>Verifies that calls to local members are prefixed with the 'this.' notation.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>PrefixLocalCallsWithThis</Name>
            <Namespace>Microsoft.StyleCop.CSharp.ReadabilityRules</Namespace>
            <RuleGroup>Member Access</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>385</ViolationID>
            <ID>385</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>386</ID>
          <Line>158</Line>
          <Message>The call to fMB1 must begin with the 'this.' prefix to indicate that the item is a member of the class.</Message>
          <SourceCodeFileID>9</SourceCodeFileID>
          <SourceCodeLine>      Assert.AreEqual(fMB1.GetHashCode(), equal.GetHashCode());</SourceCodeLine>
          <Rules>
            <CheckId>SA1101</CheckId>
            <Description>Verifies that calls to local members are prefixed with the 'this.' notation.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>PrefixLocalCallsWithThis</Name>
            <Namespace>Microsoft.StyleCop.CSharp.ReadabilityRules</Namespace>
            <RuleGroup>Member Access</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>386</ViolationID>
            <ID>386</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>387</ID>
          <Line>171</Line>
          <Message>The call to f12CHF must begin with the 'this.' prefix to indicate that the item is a member of the class.</Message>
          <SourceCodeFileID>9</SourceCodeFileID>
          <SourceCodeLine>      Assert.IsFalse(f12CHF.Equals(null));</SourceCodeLine>
          <Rules>
            <CheckId>SA1101</CheckId>
            <Description>Verifies that calls to local members are prefixed with the 'this.' notation.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>PrefixLocalCallsWithThis</Name>
            <Namespace>Microsoft.StyleCop.CSharp.ReadabilityRules</Namespace>
            <RuleGroup>Member Access</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>387</ViolationID>
            <ID>387</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>388</ID>
          <Line>173</Line>
          <Message>The call to f12CHF must begin with the 'this.' prefix to indicate that the item is a member of the class.</Message>
          <SourceCodeFileID>9</SourceCodeFileID>
          <SourceCodeLine>      Assert.IsTrue(f12CHF.Equals(f12CHF));</SourceCodeLine>
          <Rules>
            <CheckId>SA1101</CheckId>
            <Description>Verifies that calls to local members are prefixed with the 'this.' notation.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>PrefixLocalCallsWithThis</Name>
            <Namespace>Microsoft.StyleCop.CSharp.ReadabilityRules</Namespace>
            <RuleGroup>Member Access</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>388</ViolationID>
            <ID>388</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>389</ID>
          <Line>174</Line>
          <Message>The call to f12CHF must begin with the 'this.' prefix to indicate that the item is a member of the class.</Message>
          <SourceCodeFileID>9</SourceCodeFileID>
          <SourceCodeLine>      Assert.IsTrue(f12CHF.Equals(equalMoney));</SourceCodeLine>
          <Rules>
            <CheckId>SA1101</CheckId>
            <Description>Verifies that calls to local members are prefixed with the 'this.' notation.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>PrefixLocalCallsWithThis</Name>
            <Namespace>Microsoft.StyleCop.CSharp.ReadabilityRules</Namespace>
            <RuleGroup>Member Access</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>389</ViolationID>
            <ID>389</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>390</ID>
          <Line>175</Line>
          <Message>The call to f12CHF must begin with the 'this.' prefix to indicate that the item is a member of the class.</Message>
          <SourceCodeFileID>9</SourceCodeFileID>
          <SourceCodeLine>      Assert.IsFalse(f12CHF.Equals(f14CHF));</SourceCodeLine>
          <Rules>
            <CheckId>SA1101</CheckId>
            <Description>Verifies that calls to local members are prefixed with the 'this.' notation.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>PrefixLocalCallsWithThis</Name>
            <Namespace>Microsoft.StyleCop.CSharp.ReadabilityRules</Namespace>
            <RuleGroup>Member Access</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>390</ViolationID>
            <ID>390</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>391</ID>
          <Line>185</Line>
          <Message>The call to f12CHF must begin with the 'this.' prefix to indicate that the item is a member of the class.</Message>
          <SourceCodeFileID>9</SourceCodeFileID>
          <SourceCodeLine>      Assert.IsFalse(f12CHF.Equals(null));</SourceCodeLine>
          <Rules>
            <CheckId>SA1101</CheckId>
            <Description>Verifies that calls to local members are prefixed with the 'this.' notation.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>PrefixLocalCallsWithThis</Name>
            <Namespace>Microsoft.StyleCop.CSharp.ReadabilityRules</Namespace>
            <RuleGroup>Member Access</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>391</ViolationID>
            <ID>391</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>392</ID>
          <Line>187</Line>
          <Message>The call to f12CHF must begin with the 'this.' prefix to indicate that the item is a member of the class.</Message>
          <SourceCodeFileID>9</SourceCodeFileID>
          <SourceCodeLine>      Assert.AreEqual(f12CHF.GetHashCode(), equal.GetHashCode());</SourceCodeLine>
          <Rules>
            <CheckId>SA1101</CheckId>
            <Description>Verifies that calls to local members are prefixed with the 'this.' notation.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>PrefixLocalCallsWithThis</Name>
            <Namespace>Microsoft.StyleCop.CSharp.ReadabilityRules</Namespace>
            <RuleGroup>Member Access</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>392</ViolationID>
            <ID>392</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>393</ID>
          <Line>214</Line>
          <Message>The call to fMB1 must begin with the 'this.' prefix to indicate that the item is a member of the class.</Message>
          <SourceCodeFileID>9</SourceCodeFileID>
          <SourceCodeLine>      Assert.AreEqual(expected, fMB1.Subtract(f12CHF));</SourceCodeLine>
          <Rules>
            <CheckId>SA1101</CheckId>
            <Description>Verifies that calls to local members are prefixed with the 'this.' notation.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>PrefixLocalCallsWithThis</Name>
            <Namespace>Microsoft.StyleCop.CSharp.ReadabilityRules</Namespace>
            <RuleGroup>Member Access</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>393</ViolationID>
            <ID>393</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>394</ID>
          <Line>228</Line>
          <Message>The call to fMB1 must begin with the 'this.' prefix to indicate that the item is a member of the class.</Message>
          <SourceCodeFileID>9</SourceCodeFileID>
          <SourceCodeLine>      Assert.AreEqual(expected, fMB1.Subtract(ms1));</SourceCodeLine>
          <Rules>
            <CheckId>SA1101</CheckId>
            <Description>Verifies that calls to local members are prefixed with the 'this.' notation.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>PrefixLocalCallsWithThis</Name>
            <Namespace>Microsoft.StyleCop.CSharp.ReadabilityRules</Namespace>
            <RuleGroup>Member Access</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>394</ViolationID>
            <ID>394</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>395</ID>
          <Line>242</Line>
          <Message>The call to f12CHF must begin with the 'this.' prefix to indicate that the item is a member of the class.</Message>
          <SourceCodeFileID>9</SourceCodeFileID>
          <SourceCodeLine>      Assert.AreEqual(expected, f12CHF.Subtract(ms1));</SourceCodeLine>
          <Rules>
            <CheckId>SA1101</CheckId>
            <Description>Verifies that calls to local members are prefixed with the 'this.' notation.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>PrefixLocalCallsWithThis</Name>
            <Namespace>Microsoft.StyleCop.CSharp.ReadabilityRules</Namespace>
            <RuleGroup>Member Access</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>395</ViolationID>
            <ID>395</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>396</ID>
          <Line>252</Line>
          <Message>The call to f12CHF must begin with the 'this.' prefix to indicate that the item is a member of the class.</Message>
          <SourceCodeFileID>9</SourceCodeFileID>
          <SourceCodeLine>      Assert.AreEqual("[12 CHF]", f12CHF.ToString());</SourceCodeLine>
          <Rules>
            <CheckId>SA1101</CheckId>
            <Description>Verifies that calls to local members are prefixed with the 'this.' notation.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>PrefixLocalCallsWithThis</Name>
            <Namespace>Microsoft.StyleCop.CSharp.ReadabilityRules</Namespace>
            <RuleGroup>Member Access</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>396</ViolationID>
            <ID>396</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>397</ID>
          <Line>264</Line>
          <Message>The call to f12CHF must begin with the 'this.' prefix to indicate that the item is a member of the class.</Message>
          <SourceCodeFileID>9</SourceCodeFileID>
          <SourceCodeLine>      Assert.AreEqual(expected, f12CHF.Add(f14CHF));</SourceCodeLine>
          <Rules>
            <CheckId>SA1101</CheckId>
            <Description>Verifies that calls to local members are prefixed with the 'this.' notation.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>PrefixLocalCallsWithThis</Name>
            <Namespace>Microsoft.StyleCop.CSharp.ReadabilityRules</Namespace>
            <RuleGroup>Member Access</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>397</ViolationID>
            <ID>397</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>398</ID>
          <Line>277</Line>
          <Message>The call to f14CHF must begin with the 'this.' prefix to indicate that the item is a member of the class.</Message>
          <SourceCodeFileID>9</SourceCodeFileID>
          <SourceCodeLine>      Assert.AreEqual(expected, f14CHF.Add(fMB1));</SourceCodeLine>
          <Rules>
            <CheckId>SA1101</CheckId>
            <Description>Verifies that calls to local members are prefixed with the 'this.' notation.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>PrefixLocalCallsWithThis</Name>
            <Namespace>Microsoft.StyleCop.CSharp.ReadabilityRules</Namespace>
            <RuleGroup>Member Access</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>398</ViolationID>
            <ID>398</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>399</ID>
          <Line>289</Line>
          <Message>The call to f14CHF must begin with the 'this.' prefix to indicate that the item is a member of the class.</Message>
          <SourceCodeFileID>9</SourceCodeFileID>
          <SourceCodeLine>      Assert.AreEqual(expected, f14CHF.Multiply(2));</SourceCodeLine>
          <Rules>
            <CheckId>SA1101</CheckId>
            <Description>Verifies that calls to local members are prefixed with the 'this.' notation.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>PrefixLocalCallsWithThis</Name>
            <Namespace>Microsoft.StyleCop.CSharp.ReadabilityRules</Namespace>
            <RuleGroup>Member Access</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>399</ViolationID>
            <ID>399</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>400</ID>
          <Line>301</Line>
          <Message>The call to f14CHF must begin with the 'this.' prefix to indicate that the item is a member of the class.</Message>
          <SourceCodeFileID>9</SourceCodeFileID>
          <SourceCodeLine>      Assert.AreEqual(expected, f14CHF.Negate());</SourceCodeLine>
          <Rules>
            <CheckId>SA1101</CheckId>
            <Description>Verifies that calls to local members are prefixed with the 'this.' notation.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>PrefixLocalCallsWithThis</Name>
            <Namespace>Microsoft.StyleCop.CSharp.ReadabilityRules</Namespace>
            <RuleGroup>Member Access</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>400</ViolationID>
            <ID>400</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>401</ID>
          <Line>313</Line>
          <Message>The call to f14CHF must begin with the 'this.' prefix to indicate that the item is a member of the class.</Message>
          <SourceCodeFileID>9</SourceCodeFileID>
          <SourceCodeLine>      Assert.AreEqual(expected, f14CHF.Subtract(f12CHF));</SourceCodeLine>
          <Rules>
            <CheckId>SA1101</CheckId>
            <Description>Verifies that calls to local members are prefixed with the 'this.' notation.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>PrefixLocalCallsWithThis</Name>
            <Namespace>Microsoft.StyleCop.CSharp.ReadabilityRules</Namespace>
            <RuleGroup>Member Access</RuleGroup>
            <Warning>false</Warning>
            <ViolationID>401</ViolationID>
            <ID>401</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>402</ID>
          <Line>5</Line>
          <Message>The spacing around the symbol '=' is invalid.</Message>
          <SourceCodeFileID>9</SourceCodeFileID>
          <SourceCodeLine>using Assert=NUnit.Framework.Assert;</SourceCodeLine>
          <Rules>
            <CheckId>SA1003</CheckId>
            <Description>Validates the spacing before and after an operator symbol.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>SymbolsMustBeSpacedCorrectly</Name>
            <Namespace>Microsoft.StyleCop.CSharp.SpacingRules</Namespace>
            <Warning>false</Warning>
            <ViolationID>402</ViolationID>
            <ID>402</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>403</ID>
          <Line>137</Line>
          <Message>The comment must start with a single space. To ignore this error when commenting out a line of code, begin the comment with '////' rather than '//'.</Message>
          <SourceCodeFileID>9</SourceCodeFileID>
          <SourceCodeLine>      //NOTE: Normally we use Assert.AreEqual to test whether two</SourceCodeLine>
          <Rules>
            <CheckId>SA1005</CheckId>
            <Description>Verifies that the forward slashes at the beginning of a comment are followed by a single space.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>SingleLineCommentsMustBeginWithSingleSpace</Name>
            <Namespace>Microsoft.StyleCop.CSharp.SpacingRules</Namespace>
            <Warning>false</Warning>
            <ViolationID>403</ViolationID>
            <ID>403</ID>
          </Rules>
        </Violations>
        <Violations>
          <ID>404</ID>
          <Line>168</Line>
          <Message>The comment must start with a single space. To ignore this error when commenting out a line of code, begin the comment with '////' rather than '//'.</Message>
          <SourceCodeFileID>9</SourceCodeFileID>
          <SourceCodeLine>      //NOTE: Normally we use Assert.AreEqual to test whether two</SourceCodeLine>
          <Rules>
            <CheckId>SA1005</CheckId>
            <Description>Verifies that the forward slashes at the beginning of a comment are followed by a single space.</Description>
            <EnabledByDefault>true</EnabledByDefault>
            <Name>SingleLineCommentsMustBeginWithSingleSpace</Name>
            <Namespace>Microsoft.StyleCop.CSharp.SpacingRules</Namespace>
            <Warning>false</Warning>
            <ViolationID>404</ViolationID>
            <ID>404</ID>
          </Rules>
        </Violations>
      </SourceCodeFiles>
    </Projects>
  </Solutions>
</StyleCopReport>