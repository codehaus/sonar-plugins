/*
 * Sonar, open source software quality management tool.
 * Copyright (C) 2010 SQLi
 * mailto:contact AT sonarsource DOT com
 *
 * Sonar is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * Sonar is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with Sonar; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02
 */

package com.echosource.ada.gnat.metric;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.HashSet;
import java.util.Set;

import org.apache.commons.io.IOUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.sonar.api.BatchExtension;
import org.sonar.api.measures.CoreMetrics;
import org.sonar.api.measures.Metric;
import org.sonar.api.utils.SonarException;

import com.echosource.ada.ResourcesBag;
import com.echosource.ada.core.AdaFile;
import com.echosource.ada.gnat.metric.xml.FileNode;
import com.echosource.ada.gnat.metric.xml.GlobalNode;
import com.echosource.ada.gnat.metric.xml.MetricNode;
import com.echosource.ada.gnat.metric.xml.MetricNodeConverter;
import com.echosource.ada.gnat.metric.xml.UnitNode;
import com.thoughtworks.xstream.XStream;
import com.thoughtworks.xstream.XStreamException;

/**
 * The GnatMetricResultParser parses xml files generated by gnat metric tool.
 */
public class GnatMetricResultsParser implements BatchExtension {

  private static final Logger LOG = LoggerFactory.getLogger(GnatMetricResultsParser.class);

  /** Resources bag to store metrics and their values. */
  private ResourcesBag<AdaFile> resourcesBag;

  /** Default constructor */
  public GnatMetricResultsParser() {
    this.resourcesBag = new ResourcesBag<AdaFile>();
  }

  /**
   * @param path
   */
  public void parse(String path) {
    File file = new File(path);
    // If no files can be found, plugin will stop normally only logging the error
    if ( !file.exists()) {
      LOG.error("Result file not found : " + file.getAbsolutePath() + ". Plugin will stop");
      return;
    } else {
      parse(file);
    }
  }

  /** Parses the report file. */
  public void parse(File file) {
    try {
      LOG.info("Collecting measures...");
      // collectMeasures(file);
    } catch (Exception e) {
      LOG.error("Report file is invalid or can't be found, plugin will stop.", e);
      throw new SonarException(e);
    }
  }

  /** If the given value is not null, the metric, resource and value will be associated */
  private void addMeasure(AdaFile file, Metric metric, Double value) {
    if (value != null) {
      resourcesBag.add(value, metric, file);
    }
  }

  /**
   * Collect function measures.
   * 
   * @param file
   *          the file
   * @param unitNode
   *          the method node
   */
  private void collectMethodMeasures(UnitNode unitNode, AdaFile file) {
    // Adds one method to this file
    addMeasure(file, CoreMetrics.FUNCTIONS, 1.0);
    // addMeasure(file, CoreMetrics.COMPLEXITY, unitNode.getComplexity());
  }

  /**
   * Gets the metrics.
   * 
   * @return the metrics
   */
  private Set<Metric> getMetrics() {
    Set<Metric> metricsNode = new HashSet<Metric>();
    metricsNode.add(CoreMetrics.LINES);
    metricsNode.add(CoreMetrics.NCLOC);
    metricsNode.add(CoreMetrics.FUNCTIONS);
    metricsNode.add(CoreMetrics.COMMENT_LINES);
    metricsNode.add(CoreMetrics.FILES);
    metricsNode.add(CoreMetrics.COMPLEXITY);
    metricsNode.add(CoreMetrics.CLASSES);
    return metricsNode;
  }

  /**
   * Gets the metrics.
   * 
   * @param report
   *          the report
   * @return the metrics
   */
  GlobalNode getGlobalNode(File report) {
    InputStream inputStream = null;
    String reportFilename = report.getAbsolutePath();
    try {
      XStream xstream = new XStream();
      // Migration Sonar 2.2
      xstream.setClassLoader(getClass().getClassLoader());
      xstream.processAnnotations(GlobalNode.class);
      xstream.processAnnotations(FileNode.class);
      xstream.processAnnotations(UnitNode.class);
      xstream.processAnnotations(MetricNode.class);
      xstream.registerConverter(new MetricNodeConverter());
      inputStream = new FileInputStream(report);
      return (GlobalNode) xstream.fromXML(inputStream);
    } catch (XStreamException e) {
      throw new SonarException("Error while parsing file " + reportFilename, e);
    } catch (IOException e) {
      throw new SonarException("Error while reading file " + reportFilename, e);
    } finally {
      IOUtils.closeQuietly(inputStream);
    }
  }

}