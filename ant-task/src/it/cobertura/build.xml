<?xml version="1.0" encoding="UTF-8"?>
<project name="ant-cobertura" default="all" basedir="." xmlns:sonar="antlib:org.sonar.ant">

  <property name="src.dir" value="src"/>

  <property name="lib.dir" value="../ant-libs"/>

  <property name="lib.junit.dir" value="${lib.dir}/junit"/>
  <property name="lib.cobertura.dir" value="${lib.dir}/cobertura"/>

  <property name="build.dir" value="target"/>

  <property name="classes.dir" value="${build.dir}/classes"/>
  <property name="classes.instrumented.dir" value="${build.dir}/instrumented"/>

  <property name="reports.dir" value="${build.dir}/reports"/>
  <property name="reports.junit.xml.dir" value="${reports.dir}/junit/xml"/>
  <property name="reports.junit.html.dir" value="${reports.dir}/junit/html"/>

  <property name="reports.coverage.data.file" value="${reports.dir}/cobertura/cobertura.ser"/>
  <property name="reports.coverage.xml.dir" value="${reports.dir}/cobertura/xml"/>
  <property name="reports.coverage.html.dir" value="${reports.dir}/cobertura/html"/>

  <path id="classpath">
    <fileset dir="${lib.junit.dir}" includes="*.jar"/>
  </path>

  <path id="cobertura.classpath">
    <fileset dir="${lib.cobertura.dir}">
      <include name="*.jar" />
    </fileset>
  </path>

  <taskdef classpathref="cobertura.classpath" resource="tasks.properties" />

  <taskdef name="junit" classname="org.apache.tools.ant.taskdefs.optional.junit.JUnitTask">
    <classpath>
      <path refid="classpath"/>
    </classpath>
  </taskdef>

  <taskdef name="junitreport" classname="org.apache.tools.ant.taskdefs.optional.junit.XMLResultAggregator">
    <classpath>
      <path refid="classpath"/>
    </classpath>
  </taskdef>

  <target name="clean" description="Remove all files created by the build/test process.">
    <delete dir="${build.dir}" />
    <delete dir="${instrumented.dir}" />
    <delete dir="${reports.dir}" />
  </target>

  <target name="init">
    <mkdir dir="${build.dir}" />
    <mkdir dir="${classes.dir}" />
    <mkdir dir="${classes.instrumented.dir}" />
    <mkdir dir="${reports.dir}" />
    <mkdir dir="${reports.junit.xml.dir}" />
    <mkdir dir="${reports.junit.html.dir}" />
    <mkdir dir="${reports.coverage.xml.dir}" />
    <mkdir dir="${reports.coverage.html.dir}" />
  </target>

  <target name="compile" depends="init">
    <javac srcdir="${src.dir}" destdir="${classes.dir}" classpathref="classpath" fork="true" debug="true" includeAntRuntime="false" />
  </target>

  <target name="instrument" depends="init,compile">
    <!--
      Remove the coverage data file and any old instrumentation.
    -->
    <delete file="${reports.coverage.data.file}"/>
    <delete dir="${classes.instrumented.dir}" />

    <cobertura-instrument todir="${classes.instrumented.dir}" datafile="${reports.coverage.data.file}">
      <fileset dir="${classes.dir}">
        <!--
          Instrument all the application classes, but
          don't instrument the test classes.
        -->
        <include name="**/*.class" />
        <exclude name="**/*Test.class" />
      </fileset>
    </cobertura-instrument>
  </target>

  <target name="test" depends="compile">
    <junit fork="yes" dir="${basedir}" failureProperty="test.failed">
      <!--
        Specify the name of the coverage data file to use.
      -->
      <sysproperty key="net.sourceforge.cobertura.datafile" file="${reports.coverage.data.file}" />

      <!--
        Note the classpath order: instrumented classes are before the
        original (uninstrumented) classes.  This is important.
      -->
      <classpath location="${classes.instrumented.dir}" />
      <classpath location="${classes.dir}" />
      <!--
        The instrumented classes reference classes used by the
        Cobertura runtime, so Cobertura and its dependencies
        must be on your classpath.
      -->
      <classpath refid="cobertura.classpath" />
      <classpath refid="classpath" />

      <formatter type="xml" />
      <batchtest todir="${reports.junit.xml.dir}">
        <fileset dir="${src.dir}">
          <include name="**/*Test.java" />
        </fileset>
      </batchtest>
    </junit>

    <junitreport todir="${reports.junit.html.dir}">
      <fileset dir="${reports.junit.xml.dir}">
        <include name="TEST-*.xml" />
      </fileset>
      <report format="frames" todir="${reports.junit.html.dir}" />
    </junitreport>
  </target>

  <target name="coverage.xml">
    <!--
      Generate an XML file containing the coverage data using
      the "srcdir" attribute.
    -->
    <cobertura-report datafile="${reports.coverage.data.file}" srcdir="${src.dir}" destdir="${reports.coverage.xml.dir}" format="xml" />
  </target>

  <target name="coverage.html">
    <!--
      Generate a series of HTML files containing the coverage
      data in a user-readable form using nested source filesets.
    -->
    <cobertura-report datafile="${reports.coverage.data.file}" destdir="${reports.coverage.html.dir}">
      <fileset dir="${src.dir}">
        <include name="**/*.java"/>
      </fileset>
    </cobertura-report>
  </target>

  <target name="reports" depends="coverage.xml,coverage.html" />

  <target name="sonar">
    <!-- Import Sonar Ant tasks -->
    <taskdef uri="antlib:org.sonar.ant" resource="org/sonar/ant/antlib.xml">
      <!-- TODO remove hardcoded version -->
      <classpath path="../../../target/sonar-ant-task-0.1-SNAPSHOT.jar" />
    </taskdef>

    <mkdir dir="${build.dir}/sonar-boot" />

    <!-- Execute Sonar -->
    <sonar:sonar workDir="${build.dir}/sonar-boot">
      <project key="org.sonar.ant.tests:cobertura" version="0.1-SNAPSHOT">
        <property key="sonar.dynamicAnalysis" value="reuseReports" />
        <property key="sonar.core.codeCoveragePlugin" value="cobertura" />
        <property key="sonar.cobertura.reportPath" value="${reports.coverage.xml.dir}/coverage.xml" />

        <property key="sonar.surefire.reportsPath" value="${reports.junit.xml.dir}" />

        <sources>
          <path location="${src.dir}"/>
        </sources>
      </project>
    </sonar:sonar>
  </target>

  <target name="all"
          depends="clean,compile,instrument,test,reports,sonar"
          description="Compile, run the tests and generate JUnit and coverage reports." />

</project>
