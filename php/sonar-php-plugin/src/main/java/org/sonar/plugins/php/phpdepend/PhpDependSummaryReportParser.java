/*
 * Sonar PHP Plugin
 * Copyright (C) 2010 Codehaus Sonar Plugins
 * dev@sonar.codehaus.org
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02
 */
package org.sonar.plugins.php.phpdepend;

import com.thoughtworks.xstream.XStream;
import com.thoughtworks.xstream.XStreamException;
import org.apache.commons.io.IOUtils;
import org.apache.commons.lang.StringUtils;
import org.sonar.api.batch.SensorContext;
import org.sonar.api.measures.CoreMetrics;
import org.sonar.api.resources.File;
import org.sonar.api.resources.Project;
import org.sonar.api.resources.ResourceUtils;
import org.sonar.api.utils.SonarException;
import org.sonar.plugins.php.phpdepend.summaryxml.*;

import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.List;

/**
 * This parser is responsible for parsing summary-xml report generated by Php Depend
 * and saving software metrics found inside
 *
 * @since 1.1
 */
public class PhpDependSummaryReportParser extends PhpDependResultsParser {

  /**
   * Instantiates a new php depend results parser.
   *
   * @param project the project
   * @param context the context
   */
  public PhpDependSummaryReportParser(Project project, SensorContext context) {
    super(project, context);
  }

  @Override
  public void parse(java.io.File reportXml) {
    if (!reportXml.exists()) {
      throw new SonarException("PDepdend result file not found: " + reportXml.getAbsolutePath() + ".");
    }

    MetricsNode metricsNode = getMetrics(reportXml);
    metricsNode.findMatchingMetrics();
    List<FileNode> files = metricsNode.getFiles();
    for (FileNode fileNode : files) {

      File sonarFile = validProjectFile(fileNode);
      if (sonarFile == null) {
        continue;
      }

      getContext().saveMeasure(sonarFile, CoreMetrics.FILES, 1.0);
      getContext().saveMeasure(sonarFile, CoreMetrics.CLASSES, (double) fileNode.getClassNumber());
      getContext().saveMeasure(sonarFile, CoreMetrics.LINES, fileNode.getLinesNumber());
      getContext().saveMeasure(sonarFile, CoreMetrics.NCLOC, fileNode.getExecutableLinesNumber());
      getContext().saveMeasure(sonarFile, CoreMetrics.COMMENT_LINES, fileNode.getCommentLinesNumber());
      getContext().saveMeasure(sonarFile, CoreMetrics.FUNCTIONS, (double) fileNode.getFunctionNumber() + fileNode.getMethodNumber());
    }
  }

  private File validProjectFile(FileNode fileNode) {
    String fileName = fileNode.getFilename();
    if (StringUtils.isEmpty(fileName)) {
      return null;
    }

    File sonarFile = File.fromIOFile(new java.io.File(fileName), getProject());
    if (sonarFile != null && !ResourceUtils.isUnitTestClass(sonarFile)) {
      return sonarFile;
    } else {
      return null;
    }
  }
  /**
   * Gets the metrics.
   *
   * @param report
   *          the report
   * @return the metrics
   */
  private MetricsNode getMetrics(java.io.File report) {
    InputStream inputStream = null;
    try {
      XStream xstream = new XStream();
      // Migration Sonar 2.2
      xstream.setClassLoader(getClass().getClassLoader());
      xstream.processAnnotations(MetricsNode.class);
      xstream.processAnnotations(PackageNode.class);
      xstream.processAnnotations(ClassNode.class);
      xstream.processAnnotations(FileNode.class);
      xstream.processAnnotations(MethodNode.class);
      xstream.processAnnotations(FunctionNode.class);
      inputStream = new FileInputStream(report);
      return (MetricsNode) xstream.fromXML(inputStream);
    } catch (XStreamException e) {
      throw new SonarException("PDepend report isn't valid: " + report.getName(), e);
    } catch (IOException e) {
      throw new SonarException("Can't read report : " + report.getName(), e);
    } finally {
      IOUtils.closeQuietly(inputStream);
    }
  }
}
