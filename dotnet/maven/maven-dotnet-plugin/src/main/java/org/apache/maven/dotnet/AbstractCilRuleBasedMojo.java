package org.apache.maven.dotnet;

import java.io.File;
import java.util.ArrayList;
import java.util.List;

import org.apache.maven.dotnet.commons.project.VisualStudioProject;
import org.apache.maven.dotnet.commons.project.VisualStudioSolution;
import org.apache.maven.plugin.MojoFailureException;

public abstract class AbstractCilRuleBasedMojo extends AbstractDotNetMojo {

  /**
   * Location of the dotnet mscorlib.dll file to use when analyzing silverlight3
   * projects
   * 
   * @parameter expression="${silverlight.3.mscorlib.location}"
   */
  protected File silverlight_3_MscorlibLocation;

  /**
   * Location of the dotnet mscorlib.dll file to use when analyzing silverlight4
   * projects
   * 
   * @parameter expression="${silverlight.4.mscorlib.location}"
   */
  protected File silverlight_4_MscorlibLocation;

  /**
   * Version of Silverlight used in the analysed solution Possible values are 3
   * and 4
   * 
   * @parameter expression="${dotnet.tool.version}" default-value="4"
   */
  protected String silverlightVersion;

  /**
   * Enable/disable the verbose mode
   * 
   * @parameter expression="${verbose}"
   */
  protected boolean verbose;

  /**
   * @return the directory where to find silverlight mscorlib.dll
   * @throws MojoFailureException 
   */
  protected File getSilverlightMscorlibLocation() throws MojoFailureException {
    final File silverlightMscorlibLocation;
    if ("3".equals(silverlightVersion)) {
      silverlightMscorlibLocation = silverlight_3_MscorlibLocation;
    } else {
      silverlightMscorlibLocation = silverlight_4_MscorlibLocation;
    }
    
    if (silverlightMscorlibLocation == null
        || !silverlightMscorlibLocation.exists()
        || !silverlightMscorlibLocation.isDirectory()) {

      throw new MojoFailureException("incorrect silverlight "
          + silverlightVersion + " mscorlib path: "
          + silverlightMscorlibLocation);
    }

    return silverlightMscorlibLocation;
  }

  /**
   * @param solution
   *          the current solution
   * @return the assembly files generated by this solution (except test ones)
   * @throws MojoFailureException
   */
  private List<File> extractAssemblies(VisualStudioSolution solution,
      Boolean silverlightFilter) throws MojoFailureException {
    List<VisualStudioProject> projects = solution.getProjects();
    List<File> assemblies = new ArrayList<File>();
    // We skip all the test assemblies
    for (VisualStudioProject visualStudioProject : projects) {
      if (visualStudioProject.isTest()) {
        getLog().info(
            "Skipping the test project " + visualStudioProject.getName());

      } else if (visualStudioProject.isWebProject()) {
        // ASP project
        assemblies.addAll(visualStudioProject.getWebAssemblies());

      } else if (silverlightFilter == null
          || silverlightFilter.equals(visualStudioProject
              .isSilverlightProject())) {

        File assembly = getGeneratedAssembly(visualStudioProject);
        if (assembly.exists()) {
          assemblies.add(assembly);
        } else {
          getLog().info("Skipping the non generated assembly: " + assembly);
        }
      }
    }
    return assemblies;
  }

  /**
   * @param solution
   *          the current solution
   * @return the assembly files generated by this solution (except test ones)
   * @throws MojoFailureException
   */
  protected final List<File> extractAssemblies(VisualStudioSolution solution)
      throws MojoFailureException {
    return extractAssemblies(solution, null);
  }

  /**
   * @param solution
   *          the current solution
   * @return the assembly files generated by this solution (except test and non
   *         silverlight ones)
   * @throws MojoFailureException
   */
  protected final List<File> extractSilverlightAssemblies(
      VisualStudioSolution solution) throws MojoFailureException {

    return extractAssemblies(solution, true);
  }

  /**
   * @param solution
   *          the current solution
   * @return the assembly files generated by this solution (except test and
   *         silverlight ones)
   * @throws MojoFailureException
   */
  protected final List<File> extractNonSilverlightAssemblies(
      VisualStudioSolution solution) throws MojoFailureException {

    return extractAssemblies(solution, false);
  }

}
