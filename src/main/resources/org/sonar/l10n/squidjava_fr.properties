rule.squid.ArchitecturalConstraint.name=Contrainte d'architecture
rule.squid.ArchitecturalConstraint.param.fromClasses=Optionnel.Si cette propriété n'est pas définie, toutes les classes doivent respecter cette contrainte. Ex : **.web.**
rule.squid.ArchitecturalConstraint.param.toClasses=Obligatoire. Ex: java.util.Vector, java.util.Hashtable, java.util.Enumeration

rule.squid.AvoidBreakOutsideSwitch.name=Eviter l'utilisation de l'instruction 'break' en dehors d'un bloc 'switch'

rule.squid.AvoidContinueStatement.name=Eviter l'utilisation de l'instruction 'continue'

rule.squid.CallToDeprecatedMethod.name=Eviter l'utilisation de méthodes obsolétes

rule.squid.ClassCyclomaticComplexity.name=Eviter les classes trop complexes
rule.squid.ClassCyclomaticComplexity.param.max=Compléxité maximum autorisée.

rule.squid.EmptyFile.name=Fichier vide

rule.squid.MaximumInheritanceDepth.name=Eviter les arbres d'héritage trop profonds
rule.squid.MaximumInheritanceDepth.param.max=Profondeur maximum de l'arbre d'héritage.

rule.squid.MethodCyclomaticComplexity.name=Eviter les méthodes trop complexes
rule.squid.MethodCyclomaticComplexity.param.max=Compléxité maximum autorisée.

rule.squid.NoSonar.name=Eviter l'utilisation du marqueur //NOSONAR

rule.squid.UndocumentedApi.name=API non documentée
rule.squid.UndocumentedApi.param.forClasses=Optionnel. Si cette propriété n'est pas définie, toutes les classes doivent respecter cette contrainte. Ex : **.api.**

rule.squid.UnusedPrivateMethod.name=Méthode privée inutilisée

rule.squid.UnusedProtectedMethod.name=Méthode protégée inutilisée
