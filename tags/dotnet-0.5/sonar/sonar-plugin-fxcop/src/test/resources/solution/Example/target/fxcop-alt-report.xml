<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="c:\program files\microsoft fxcop 1.36\Xml\FxCopReport.xsl"?>
<FxCopReport Version="10.0">
 <Namespaces>
  <Namespace Name="Example.Core.Model">
   <Messages>
    <Message TypeName="AvoidNamespacesWithFewTypes" Category="Microsoft.Design" CheckId="CA1020" Status="Active" Created="2010-09-28 19:48:42Z" FixCategory="Breaking">
     <Issue Certainty="50" Level="Warning">Consider merging the types defined in 'Example.Core.Model' with another namespace.</Issue>
    </Message>
   </Messages>
  </Namespace>
 </Namespaces>
 <Targets>
  <Target Name="$(ProjectDir)/../../Example.Application/bin/Debug/Example.Application.exe">
   <Modules>
    <Module Name="example.application.exe">
     <Messages>
      <Message TypeName="AssembliesShouldHaveValidStrongNames" Category="Microsoft.Design" CheckId="CA2210" Status="Active" Created="2010-09-28 19:48:42Z" FixCategory="NonBreaking">
       <Issue Name="NoStrongName" Certainty="95" Level="CriticalError">Sign 'Example.Application.exe' with a strong name key.</Issue>
      </Message>
     </Messages>
    </Module>
   </Modules>
  </Target>
  <Target Name="$(ProjectDir)/../../Example.Core/bin/Debug/Example.Core.dll">
   <Modules>
    <Module Name="example.core.dll">
     <Messages>
      <Message TypeName="AssembliesShouldHaveValidStrongNames" Category="Microsoft.Design" CheckId="CA2210" Status="Active" Created="2010-09-28 19:48:42Z" FixCategory="NonBreaking">
       <Issue Name="NoStrongName" Certainty="95" Level="CriticalError">Sign 'Example.Core.dll' with a strong name key.</Issue>
      </Message>
     </Messages>
     <Namespaces>
      <Namespace Name="Example.Core">
       <Types>
        <Type Name="GoodMoney" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#AddMoneyBag(Example.Core.MoneyBag)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="MoneyBag" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2010-09-28 19:48:42Z" FixCategory="Breaking">
             <Issue Name="MemberShouldBeDiscreteTerm" Certainty="80" Level="Error" Path="c:\work\sonar-plugin-svn\dotnet\maven\dotnet-commons\src\test\resources\solution\Example\Example.Core" File="Money.cs" Line="301">The compound word 'MoneyBag' in member name 'GoodMoney.AddMoneyBag(MoneyBag)' exists as a discrete term. If your usage is intended to be single word, case it as 'Moneybag' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Equals(System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCastUnnecessarily" Category="Microsoft.Performance" CheckId="CA1800" Status="Active" Created="2010-09-28 19:48:42Z" FixCategory="NonBreaking">
             <Issue Name="Parameter" Certainty="95" Level="Warning" Path="c:\work\sonar-plugin-svn\dotnet\maven\dotnet-commons\src\test\resources\solution\Example\Example.Core" File="Money.cs" Line="321">'anObject', a parameter, is cast to type 'IMoney' multiple times in method 'GoodMoney.Equals(object)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.</Issue>
             <Issue Name="Parameter" Certainty="95" Level="Warning" Path="c:\work\sonar-plugin-svn\dotnet\maven\dotnet-commons\src\test\resources\solution\Example\Example.Core" File="Money.cs" Line="324">'anObject', a parameter, is cast to type 'Money' multiple times in method 'GoodMoney.Equals(object)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="IMoney" Kind="Interface" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#AddMoneyBag(Example.Core.MoneyBag)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="MoneyBag" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2010-09-28 19:48:42Z" FixCategory="Breaking">
             <Issue Name="MemberShouldBeDiscreteTerm" Certainty="80" Level="Error">The compound word 'MoneyBag' in member name 'IMoney.AddMoneyBag(MoneyBag)' exists as a discrete term. If your usage is intended to be single word, case it as 'Moneybag' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Money" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#AltEquals(System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCastUnnecessarily" Category="Microsoft.Performance" CheckId="CA1800" Status="Active" Created="2010-09-28 19:48:42Z" FixCategory="NonBreaking">
             <Issue Name="Parameter" Certainty="95" Level="Warning" Path="c:\work\sonar-plugin-svn\dotnet\maven\dotnet-commons\src\test\resources\solution\Example\Example.Core" File="Money.cs" Line="151">'anObject', a parameter, is cast to type 'IMoney' multiple times in method 'Money.AltEquals(object)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.</Issue>
             <Issue Name="Parameter" Certainty="95" Level="Warning" Path="c:\work\sonar-plugin-svn\dotnet\maven\dotnet-commons\src\test\resources\solution\Example\Example.Core" File="Money.cs" Line="154">'anObject', a parameter, is cast to type 'Money' multiple times in method 'Money.AltEquals(object)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.</Issue>
            </Message>
            <Message Id="object" TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720" Status="Active" Created="2010-09-28 19:48:42Z" FixCategory="Breaking">
             <Issue Name="LanguageIndependentMemberParameter" Certainty="75" Level="Error" Path="c:\work\sonar-plugin-svn\dotnet\maven\dotnet-commons\src\test\resources\solution\Example\Example.Core" File="Money.cs" Line="146">In member 'Money.AltEquals(object)', consider replacing the data type identifier 'Object' in parameter name 'anObject' with a more generic term, such as 'value'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Equals(System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCastUnnecessarily" Category="Microsoft.Performance" CheckId="CA1800" Status="Active" Created="2010-09-28 19:48:42Z" FixCategory="NonBreaking">
             <Issue Name="Parameter" Certainty="95" Level="Warning" Path="c:\work\sonar-plugin-svn\dotnet\maven\dotnet-commons\src\test\resources\solution\Example\Example.Core" File="Money.cs" Line="84">'anObject', a parameter, is cast to type 'IMoney' multiple times in method 'Money.Equals(object)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.</Issue>
             <Issue Name="Parameter" Certainty="95" Level="Warning" Path="c:\work\sonar-plugin-svn\dotnet\maven\dotnet-commons\src\test\resources\solution\Example\Example.Core" File="Money.cs" Line="87">'anObject', a parameter, is cast to type 'Money' multiple times in method 'Money.Equals(object)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.</Issue>
            </Message>
            <Message Id="0#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Status="Active" Created="2010-09-28 19:48:42Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="c:\work\sonar-plugin-svn\dotnet\maven\dotnet-commons\src\test\resources\solution\Example\Example.Core" File="Money.cs" Line="79">In member 'Money.Equals(object)', change parameter name 'anObject' to 'obj' in order to match the identifier as it has been declared in 'object.Equals(object)'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#TataEquals(System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCastUnnecessarily" Category="Microsoft.Performance" CheckId="CA1800" Status="Active" Created="2010-09-28 19:48:42Z" FixCategory="NonBreaking">
             <Issue Name="Parameter" Certainty="95" Level="Warning" Path="c:\work\sonar-plugin-svn\dotnet\maven\dotnet-commons\src\test\resources\solution\Example\Example.Core" File="Money.cs" Line="119">'anObject', a parameter, is cast to type 'IMoney' multiple times in method 'Money.TataEquals(object)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.</Issue>
             <Issue Name="Parameter" Certainty="95" Level="Warning" Path="c:\work\sonar-plugin-svn\dotnet\maven\dotnet-commons\src\test\resources\solution\Example\Example.Core" File="Money.cs" Line="122">'anObject', a parameter, is cast to type 'Money' multiple times in method 'Money.TataEquals(object)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.</Issue>
            </Message>
            <Message Id="object" TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720" Status="Active" Created="2010-09-28 19:48:42Z" FixCategory="Breaking">
             <Issue Name="LanguageIndependentMemberParameter" Certainty="75" Level="Error" Path="c:\work\sonar-plugin-svn\dotnet\maven\dotnet-commons\src\test\resources\solution\Example\Example.Core" File="Money.cs" Line="114">In member 'Money.TataEquals(object)', consider replacing the data type identifier 'Object' in parameter name 'anObject' with a more generic term, such as 'value'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#TotoEquals(System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCastUnnecessarily" Category="Microsoft.Performance" CheckId="CA1800" Status="Active" Created="2010-09-28 19:48:42Z" FixCategory="NonBreaking">
             <Issue Name="Parameter" Certainty="95" Level="Warning" Path="c:\work\sonar-plugin-svn\dotnet\maven\dotnet-commons\src\test\resources\solution\Example\Example.Core" File="Money.cs" Line="103">'anObject', a parameter, is cast to type 'IMoney' multiple times in method 'Money.TotoEquals(object)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.</Issue>
             <Issue Name="Parameter" Certainty="95" Level="Warning" Path="c:\work\sonar-plugin-svn\dotnet\maven\dotnet-commons\src\test\resources\solution\Example\Example.Core" File="Money.cs" Line="106">'anObject', a parameter, is cast to type 'Money' multiple times in method 'Money.TotoEquals(object)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.</Issue>
            </Message>
            <Message Id="object" TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720" Status="Active" Created="2010-09-28 19:48:42Z" FixCategory="Breaking">
             <Issue Name="LanguageIndependentMemberParameter" Certainty="75" Level="Error" Path="c:\work\sonar-plugin-svn\dotnet\maven\dotnet-commons\src\test\resources\solution\Example\Example.Core" File="Money.cs" Line="95">In member 'Money.TotoEquals(object)', consider replacing the data type identifier 'Object' in parameter name 'anObject' with a more generic term, such as 'value'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#TutuEquals(System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCastUnnecessarily" Category="Microsoft.Performance" CheckId="CA1800" Status="Active" Created="2010-09-28 19:48:42Z" FixCategory="NonBreaking">
             <Issue Name="Parameter" Certainty="95" Level="Warning" Path="c:\work\sonar-plugin-svn\dotnet\maven\dotnet-commons\src\test\resources\solution\Example\Example.Core" File="Money.cs" Line="135">'anObject', a parameter, is cast to type 'IMoney' multiple times in method 'Money.TutuEquals(object)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.</Issue>
             <Issue Name="Parameter" Certainty="95" Level="Warning" Path="c:\work\sonar-plugin-svn\dotnet\maven\dotnet-commons\src\test\resources\solution\Example\Example.Core" File="Money.cs" Line="138">'anObject', a parameter, is cast to type 'Money' multiple times in method 'Money.TutuEquals(object)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.</Issue>
            </Message>
            <Message Id="object" TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720" Status="Active" Created="2010-09-28 19:48:42Z" FixCategory="Breaking">
             <Issue Name="LanguageIndependentMemberParameter" Certainty="75" Level="Error" Path="c:\work\sonar-plugin-svn\dotnet\maven\dotnet-commons\src\test\resources\solution\Example\Example.Core" File="Money.cs" Line="130">In member 'Money.TutuEquals(object)', consider replacing the data type identifier 'Object' in parameter name 'anObject' with a more generic term, such as 'value'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="MoneyBag" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="MoneyBag" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2010-09-28 19:48:42Z" FixCategory="Breaking">
           <Issue Name="TypeShouldBeDiscreteTerm" Certainty="80" Level="Error">The compound word 'MoneyBag' in type name 'MoneyBag' exists as a discrete term. If your usage is intended to be single word, case it as 'Moneybag'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#Equals(System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCastUnnecessarily" Category="Microsoft.Performance" CheckId="CA1800" Status="Active" Created="2010-09-28 19:48:42Z" FixCategory="NonBreaking">
             <Issue Name="Parameter" Certainty="95" Level="Warning" Path="c:\work\sonar-plugin-svn\dotnet\maven\dotnet-commons\src\test\resources\solution\Example\Example.Core" File="MoneyBag.cs" Line="116">'anObject', a parameter, is cast to type 'IMoney' multiple times in method 'MoneyBag.Equals(object)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.</Issue>
             <Issue Name="Parameter" Certainty="95" Level="Warning" Path="c:\work\sonar-plugin-svn\dotnet\maven\dotnet-commons\src\test\resources\solution\Example\Example.Core" File="MoneyBag.cs" Line="120">'anObject', a parameter, is cast to type 'MoneyBag' multiple times in method 'MoneyBag.Equals(object)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.</Issue>
            </Message>
            <Message Id="0#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Status="Active" Created="2010-09-28 19:48:42Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="c:\work\sonar-plugin-svn\dotnet\maven\dotnet-commons\src\test\resources\solution\Example\Example.Core" File="MoneyBag.cs" Line="113">In member 'MoneyBag.Equals(object)', change parameter name 'anObject' to 'obj' in order to match the identifier as it has been declared in 'object.Equals(object)'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="Example.Core.Model">
       <Types>
        <Type Name="SubType" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="SubType" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2010-09-28 19:48:42Z" FixCategory="Breaking">
           <Issue Name="TypeShouldBeDiscreteTerm" Certainty="80" Level="Error">The compound word 'SubType' in type name 'SubType' exists as a discrete term. If your usage is intended to be single word, case it as 'Subtype'.</Issue>
          </Message>
         </Messages>
        </Type>
       </Types>
      </Namespace>
     </Namespaces>
    </Module>
   </Modules>
  </Target>
 </Targets>
 <Rules>
  <Rule TypeName="AssembliesShouldHaveValidStrongNames" Category="Microsoft.Design" CheckId="CA2210">
   <Name>Assemblies should have valid strong names</Name>
   <Description>Either the assembly has no strong name, an invalid one, or the strong name is valid only because of the computer configuration. The assembly should not be deployed in this state. The most common causes of this are: 1) The assembly's contents were modified after it was signed. 2) The signing process failed. 3) The assembly was delay-signed. 4) A registry key existed that allowed the check to pass (where it would not have otherwise).</Description>
   <Resolution Name="NoStrongName">Sign {0} with a strong name key.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182127(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalError</MessageLevel>
   <File Name="DesignRules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="AvoidNamespacesWithFewTypes" Category="Microsoft.Design" CheckId="CA1020">
   <Name>Avoid namespaces with few types</Name>
   <Description>A namespace should generally have more than five types.</Description>
   <Resolution Name="Default">Consider merging the types defined in '{0}' with another namespace.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182130(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="50">Warning</MessageLevel>
   <File Name="DesignRules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702">
   <Name>Compound words should be cased correctly</Name>
   <Description>Avoid creating compound words from terms which exist in the dictionary as discrete terms. Do not create a compound word such as 'StopWatch' or 'PopUp'. These terms are recognized in the dictionary and should be cased as 'Stopwatch' and 'Popup'.</Description>
   <Resolution Name="MemberShouldBeDiscreteTerm">The compound word '{0}' in member name {1} exists as a discrete term. If your usage is intended to be single word, case it as '{2}' or strip the first token entirely if it represents any sort of Hungarian notation.</Resolution>
   <Resolution Name="TypeShouldBeDiscreteTerm">The compound word '{0}' in type name {1} exists as a discrete term. If your usage is intended to be single word, case it as '{2}'.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/bb264474(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="80">Error</MessageLevel>
   <File Name="NamingRules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotCastUnnecessarily" Category="Microsoft.Performance" CheckId="CA1800">
   <Name>Do not cast unnecessarily</Name>
   <Description>Avoid duplicate casts where possible, since there is a cost associated with them.</Description>
   <Resolution Name="Parameter">{0}, a parameter, is cast to type {1} multiple times in method {2}. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant {3} instruction.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182271(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Warning</MessageLevel>
   <File Name="PerformanceRules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720">
   <Name>Identifiers should not contain type names</Name>
   <Description>Avoid using language-specific types name in parameters and members and data type identifiers in parameters. Types names might not be intuitive for all developers. It is recommended that you select a generic name, such as 'value', instead. If this is not sufficient, be sure to use the type name as it is defined in the .NET Framework Library and avoid language-specific type names completely. Some examples of C#-specific type names are 'float' (use 'Single' if a generic name is not sufficient), and 'ulong' (use 'UInt64' if a generic name is not sufficient).</Description>
   <Resolution Name="LanguageIndependentMemberParameter">In member {0}, consider replacing the data type identifier '{1}' in parameter name {2} with a more generic term, such as 'value'.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/bb531486(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Error</MessageLevel>
   <File Name="NamingRules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725">
   <Name>Parameter names should match base declaration</Name>
   <Description>For usability reasons, parameter names in overridden methods should match those of the base declaration.</Description>
   <Resolution Name="Default">In member {0}, change parameter name {1} to {2} in order to match the identifier as it has been declared in {3}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182251(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="NamingRules.dll" Version="10.0.0.0" />
  </Rule>
 </Rules>
 <Localized>
  <String Key="Category">Category</String>
  <String Key="Certainty">Certainty</String>
  <String Key="CollapseAll">Collapse All</String>
  <String Key="CheckId">Check Id</String>
  <String Key="Error">Error</String>
  <String Key="Errors">error(s)</String>
  <String Key="ExpandAll">Expand All</String>
  <String Key="Help">Help</String>
  <String Key="Line">Line</String>
  <String Key="Messages">message(s)</String>
  <String Key="LocationNotStoredInPdb">[Location not stored in Pdb]</String>
  <String Key="Project">Project</String>
  <String Key="Resolution">Resolution</String>
  <String Key="Rule">Rule</String>
  <String Key="RuleFile">Rule File</String>
  <String Key="RuleDescription">Rule Description</String>
  <String Key="Source">Source</String>
  <String Key="Status">Status</String>
  <String Key="Target">Target</String>
  <String Key="Warning">Warning</String>
  <String Key="Warnings">warning(s)</String>
  <String Key="ReportTitle">Code Analysis Report</String>
 </Localized>
</FxCopReport>
