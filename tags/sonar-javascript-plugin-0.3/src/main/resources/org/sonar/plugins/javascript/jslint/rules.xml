<!-- Sonar JavaScript Plugin Extension for Sonar, open source software quality 
  management tool. Copyright (C) 2011 Eriks Nukis mailto: eriks.nukis@gmail.com 
  Sonar JavaScript Plugin is free software; you can redistribute it and/or 
  modify it under the terms of the GNU Lesser General Public License as published 
  by the Free Software Foundation; either version 3 of the License, or (at 
  your option) any later version. Sonar JavaScript Plugin is distributed in 
  the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the 
  implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
  See the GNU Lesser General Public License for more details. You should have 
  received a copy of the GNU Lesser General Public License along with Sonar 
  JavaScript Plugin; if not, write to the Free Software Foundation, Inc., 51 
  Franklin Street, Fifth Floor, Boston, MA 02 -->

<rules>
  <rule>
    <key>DEBUG</key>
    <name>Do Not Tolerate debugger statements</name>
    <description>
      <![CDATA[Debugger statements should be allowed. Enable this option before going into production.]]>
    </description>
    <priority>MINOR</priority>
    <messages>
      <message>All 'debugger' statements should be removed.</message>
    </messages>
    <inverse>true</inverse>
  </rule>

  <rule>
    <key>EVIL</key>
    <name>Do Not Tolerate eval</name>
    <description>
      <![CDATA[The eval function (and its relatives, Function, setTimeout, and setInterval) provide access to the JavaScript compiler. This is sometimes necessary, but in most cases it indicates the presence of extremely bad coding. The eval function is the most misused feature of JavaScript.]]>
    </description>
    <priority>MINOR</priority>

    <messages>
      <message>The Function constructor is eval.</message>
      <message>document.write can be a form of eval.</message>
      <message>eval is evil.</message>
      <message>Implied eval is evil. Pass a function instead of a string.</message>
      <message>Unexpected space after '-'.</message>
    </messages>
    <inverse>true</inverse>
  </rule>

  <rule>
    <key>FORIN</key>
    <name>Do Not Tolerate unfiltered for in</name>
    <description>
      <![CDATA[The <i>for in</i> statement allows for looping through the names of all of the properties of an object. <a href="http://yuiblog.com/blog/2006/09/26/for-in-intrigue/">Unfortunately, it also loops through all of the members which were inherited through the prototype chain. This has the bad side effect of serving up method functions when the interest is in data members. If a program is written without awareness of this situation, then it can fail.</a>

The body of every for in statement should be wrapped in an if statement that does filtering. It can select for a particular type or range of values, or it can exclude functions, or it can exclude properties from the prototype. For example,
<pre>
for (name in object) {
    if (object.hasOwnProperty(name)) {
        ....
    }
}
</pre>]]>
    </description>
    <priority>MINOR</priority>

    <messages>
      <message>Bad for in variable '{a}'.</message>
    </messages>
    <inverse>true</inverse>
  </rule>

  <rule>
    <key>LAXBREAK</key>
    <name>
      Do Not Tolerate sloppy line breaking</name>
    <description>
      <![CDATA[Do Not Tolerate sloppy line breaking]]>
    </description>
    <priority>MINOR</priority>

    <messages>
      <message>Bad line breaking before '{a}'.</message>
    </messages>
    <inverse>true</inverse>
  </rule>

  <rule>
    <key>SUB</key>
    <name>
      Do Not Tolerate inefficient subscripting</name>
    <description>
      <![CDATA[Use <pre>o.foo</pre> instead of <pre>o['foo']</pre>]]>
    </description>
    <priority>MINOR</priority>

    <messages>
      <message>['{a}'] is better written in dot notation.</message>
    </messages>
    <inverse>true</inverse>
  </rule>

  <rule>
    <key>CSS</key>
    <name>
      Do Not Tolerate CSS workarounds</name>
    <description>
      <![CDATA[JSLint can inspect CSS files. It expects the first line of a CSS file to be
<pre>
@charset "UTF-8";
</pre>
This feature is experimental. Please report any problems or limitations. Enabling this option will not tolerate some of the non-standard-but-customary workarounds. ]]>
    </description>
    <priority>MINOR</priority>

    <messages>
      <message>Unrecognized style attribute '{a}'.</message>
    </messages>
    <inverse>true</inverse>
  </rule>

  <rule>
    <key>CAP</key>
    <name>
      Do Not Tolerate HTML case</name>
    <description>
      <![CDATA[Checks if all HTML tags are lower case. Expects <pre>&lt;html&gt;</pre> instead of <pre>&lt;Html&gt; or &lt;HTML&gt;</pre>]]>
    </description>
    <priority>MINOR</priority>

    <messages>
      <message>Attribute '{a}' not all lower case.</message>
    </messages>
    <inverse>true</inverse>
  </rule>

  <rule>
    <key>ON</key>
    <name>
      Do Not Tolerate HTML event handlers</name>
    <description>
      <![CDATA[Inline HTML event handlers should be avoided]]>
    </description>
    <priority>MINOR</priority>

    <messages>
      <message>Avoid HTML event handlers.</message>
    </messages>
    <inverse>true</inverse>
  </rule>

  <rule>
    <key>FRAGMENT</key>
    <name>
      Do Not Tolerate HTML fragments</name>
    <description>
      <![CDATA[Inspects if HTML fragment is well formatted.]]>
    </description>
    <priority>MINOR</priority>

    <messages>
      <message><![CDATA[A '<{a}>' must be within '<{b}>'.]]></message>
    </messages>
    <inverse>true</inverse>
  </rule>

  <rule>
    <key>ES5</key>
    <name>
      Do Not Tolerate EcmaScript 5 syntax</name>
    <description>
      <![CDATA[EcmaScript 5 syntax should not be allowed. It is likely that programs not using this option will produce syntax errors on EcmaScript 3 systems.]]>
    </description>
    <priority>MINOR</priority>

    <messages>
      <message>Expected an identifier and instead saw '{a}' (a reserved word).</message>
      <message>get/set are ES5 features.</message>
      <message>Extra comma.</message>
    </messages>
    <inverse>true</inverse>
  </rule>

  <rule>
    <key>ONEVAR</key>
    <name>
      Allow one var statement per function</name>
    <description>
      <![CDATA[In many languages, a block introduces a scope. Variables introduced in a block are not visible outside of the block.

In JavaScript, blocks do not introduce a scope. There is only function-scope. A variable introduced anywhere in a function is visible everywhere in the function. JavaScript's blocks confuse experienced programmers and lead to errors because the familiar syntax makes a false promise.

JSLint expects blocks with function, if, switch, while, for, do, and try statements and nowhere else.

In languages with block scope, it is usually recommended that variables be declared at the site of first use. But because JavaScript does not have block scope, it is wiser to declare all of a function's variables at the top of the function. It is recommended that a single var statement be used per function.]]>
    </description>
    <priority>MINOR</priority>

    <messages>
      <message>Too many var statements.</message>
    </messages>
  </rule>

  <rule>
    <key>UNDEF</key>
    <name>
      Disallow undefined variables</name>
    <description>
      <![CDATA[Variables must be declared before used.]]>
    </description>
    <priority>CRITICAL</priority>
    <param>
      <key>PREDEF</key>
      <description>Predefined allowed variables ( , separated)
      </description>
      <defaultValue></defaultValue>
    </param>
    <messages>
      <message>'{a}' is not defined.</message>
    </messages>
  </rule>

  <rule>
    <key>NOMEN</key>
    <name>
      Disallow dangling _ in identifiers</name>
    <description>
      <![CDATA[Do not use _ (underbar) as the first character of a name. It is sometimes used to indicate privacy, but it does not actually provide privacy. If privacy is important, use the forms that provide <a href="http://javascript.crockford.com/private.html">private members</a>.]]>
    </description>
    <priority>MINOR</priority>
    <messages>
      <message>Unexpected {a} in '{b}'.</message>
    </messages>
  </rule>

  <rule>
    <key>EQEQEQ</key>
    <name>
      Disallow == and !=</name>
    <description>
      <![CDATA[The == and != operators do type coercion before comparing. This is bad because it causes ' \t\r\n' == 0 to be true. This can mask type errors.

When comparing to any of the following values, use the === or !== operators (which do not do type coercion): 0 '' undefined null false true

If you only care that a value is truthy or falsy, then use the short form. Instead of
<pre>
(foo != 0)
</pre>
just say
<pre>
(foo)
</pre>
and instead of
<pre>
(foo == 0)
</pre>
say
<pre>
(!foo)
</pre>

Use the === and !== operators.]]>
    </description>
    <priority>MINOR</priority>
    <messages>
      <message>Use '{a}' to compare with '{b}'.</message>
    </messages>
  </rule>

  <rule>
    <key>PLUSPLUS</key>
    <name>Disallow ++ and --</name>
    <description>
      <![CDATA[The ++ (increment) and -- (decrement) operators have been known to contribute to bad code by encouraging excessive trickiness. They are second only to faulty architecture in enabling to viruses and other security menaces.
<br/>
<br/>
As warning messages that are used for JSLint warning mapping to rules for this rule is the same as for "Disallow bitwise operators", please enable or disable them together
      ]]>
    </description>
    <priority>MINOR</priority>

    <messages>
      <message>Unexpected use of '{a}'.</message>
    </messages>
  </rule>

  <rule>
    <key>BITWISE</key>
    <name>Disallow bitwise operators</name>
    <description>
      <![CDATA[JavaScript does not have an integer type, but it does have bitwise operators. The bitwise operators convert their operands from floating point to integers and back, so they are not as efficient as in C or other languages. They are rarely useful in browser applications. The similarity to the logical operators can mask some programming errors. This option prohibits the use of these operators: << >> >>> ~ & |.
<br/>
<br/>
As warning messages that are used for JSLint warning mapping to rules for this rule is the same as for "Disallow ++ and --", please enable or disable them together      
      ]]>
    </description>
    <priority>MINOR</priority>

    <messages>
      <message>Unexpected use of '{a}'.</message>
    </messages>
  </rule>

  <rule>
    <key>REGEXP</key>
    <name>Disallow insecure . and [^...] in /RegExp/</name>
    <description>
      <![CDATA[Regular expressions are written in a terse and cryptic notation. JSLint looks for problems that may cause portability problems. It also attempts to resolve visual ambiguities by recommending explicit escapement.

JavaScript's syntax for regular expression literals overloads the / character. To avoid ambiguity, JSLint expects that the character preceding a regular expression literal is a ( or = or : or , character.]]>
    </description>
    <priority>MINOR</priority>

    <messages>
      <message>Insecure '{a}'.</message>
    </messages>
  </rule>

  <rule>
    <key>NEWCAP</key>
    <name>Require Initial Caps for constructors</name>
    <description>
      <![CDATA[JSLint enforces the convention that constructor functions be given names with initial uppercase. JSLint does not expect to see a function invocation with an initial uppercase name unless it has the new prefix. JSLint does not expect to see the new prefix used with functions whose names do not start with initial uppercase.]]>
    </description>
    <priority>MINOR</priority>

    <messages>
      <message>A constructor name should start with an uppercase letter.</message>
      <message>Missing 'new' prefix when invoking a constructor.</message>
    </messages>
  </rule>

  <rule>
    <key>IMMED</key>
    <name>Require parens around immediate invocations</name>
    <description>
      <![CDATA[Require parens around immediate invocations]]>
    </description>
    <priority>MINOR</priority>

    <messages>
      <message>Do not wrap function literals in parens unless they are to be immediately invoked.</message>
      <message>Move the invocation into the parens that contain the function.</message>
      <message>Wrap an immediate function invocation in parentheses to assist the reader in understanding that the expression is the result of a function, and not the function itself.</message>
    </messages>
  </rule>

  <rule>
    <key>STRICT</key>
    <name>Require "use strict"</name>
    <description>
      <![CDATA[If the ES5 "use strict"; pragma is required. Do not use this option carelessly.]]>
    </description>
    <priority>MINOR</priority>

    <messages>
      <message>Missing "use strict" statement.</message>
    </messages>
  </rule>

  <rule>
    <key>WHITE</key>
    <name>Strict white space</name>
    <description>
      <![CDATA[Blank spaces should be used in the following circumstances:
<ol>
<li>A keyword followed by ( (left parenthesis) should be separated by a space</li>
<pre>
        while (true) {
</pre>
<li>A blank space should not be used between a function value and its ( (left parenthesis). This helps to distinguish between keywords and function invocations.</li>
<li>All binary operators except . (period) and ( (left parenthesis) and [ (left bracket) should be separated from their operands by a space.</li>
<li>No space should separate a unary operator and its operand except when the operator is a word such as typeof.</li>
<li>Each ; (semicolon) in the control part of a for statement should be followed with a space.</li>
<li>Whitespace should follow every , (comma).</li>]]>
    </description>
    <priority>MINOR</priority>

    <param>
      <key>INDENT</key>
      <description>Strict white space indentation</description>
      <defaultValue>4</defaultValue>
    </param>
    <messages>
      <message>Unexpected space after '{a}'.</message>
      <message>Missing space after '{a}'.</message>
      <message>Expected '{a}' to have an indentation at {b} instead at {c}.</message>
      <message>Unexpected space after '{a}'.</message>
      <message>Unexpected space before '{a}'.</message>
    </messages>
  </rule>

  <rule>
    <key>ADSAFE</key>
    <name>ADsafe rules should be enforced</name>
    <description>
      <![CDATA[If the safe subset rules are enforced. These rules are used by <a href="http://www.adsafe.org">ADsafe</a>. It enforces the safe subset rules but not the widget structure rules.]]>
    </description>
    <priority>MINOR</priority>

    <messages>
      <message>ADsafe string violation.</message>
      <message>ADsafe comment violation.</message>
      <message>ADsafe restriction.</message>
      <message>ADsafe violation.</message>
      <message>ADsafe violation: '{a}'.</message>
      <message>ADsafe violation: Missing ADSAFE.id or ADSAFE.go.</message>
      <message>ADsafe violation: id does not match.</message>
      <message>ADsafe lib violation.</message>
      <message>ADsafe URL violation.</message>
      <message>ADSAFE: Use the fragment option.</message>
      <message>ADsafe violation: Wrap the widget in a div.</message>
      <message>Use the fragment option.</message>
      <message>ADsafe violation: An id must have a '{a}' prefix</message>
      <message>ADSAFE violation: bad id.</message>
      <message>Use the fragment option.</message>
      <message>ADSAFE violation: missing ID_.</message>
      <message>ADsafe name violation.</message>
    </messages>
  </rule>

  <rule>
    <key>MAXLEN</key>
    <name>Line too long.</name>
    <description>
      <![CDATA[Checks the maximum number of characters in a line.]]>
    </description>
    <priority>MINOR</priority>

    <param>
      <key>MAXLEN</key>
      <description>Maximum line length</description>
      <defaultValue>80</defaultValue>
    </param>
    <messages>
      <message>Line too long.</message>
    </messages>
  </rule>

  <!-- JSLint messages as seperate rules -->
  <rule>
    <key>MIXED</key>
    <name>Mixed spaces and tabs.</name>
    <description>
      <![CDATA[Avoid using tabs in source code as they appear differently in different editors]]>
    </description>
    <priority>MINOR</priority>

    <messages>
      <message>Mixed spaces and tabs.</message>
    </messages>
  </rule>

  <rule>
    <key>OBJECT_LITERAL_NOTATION</key>
    <name>Use the object literal notation {}.</name>
    <description>
      <![CDATA[JSLint does not expect to see <pre>new Object</pre> use <pre>{}</pre> instead.
      Reference: <a href="http://yuiblog.com/blog/2006/11/13/javascript-we-hardly-new-ya/">http://yuiblog.com/blog/2006/11/13/javascript-we-hardly-new-ya/</a>]]>
    </description>
    <priority>MINOR</priority>

    <messages>
      <message>Use the object literal notation {}.</message>
    </messages>
  </rule>

  <rule>
    <key>MISSING_SEMICOLON</key>
    <name>Missing semicolon.</name>
    <description>
      <![CDATA[JavaScript uses a C-like syntax which requires the use of semicolons to delimit certain statements. JavaScript attempts to make those semicolons optional with a semicolon insertion mechanism. This is dangerous because it can mask errors.

Like C, JavaScript has ++ and -- and ( operators which can be prefixes or suffixes. The disambiguation is done by the semicolon.

In JavaScript, a linefeed can be whitespace or it can act as a semicolon. This replaces one ambiguity with another.

JSLint expects that every statement be followed by ; except for <i>for, function, if, switch, try,</i> and <i>while</i>. JSLint does not expect to see unnecessary semicolons or the empty statement.]]>
    </description>
    <priority>MINOR</priority>

    <messages>
      <message>Missing semicolon.</message>
    </messages>
  </rule>

  <rule>
    <key>ARRAY_LITERAL_NOTATION</key>
    <name>Use the array literal notation [].</name>
    <description>
      <![CDATA[JSLint does not expect to see <pre>new Array</pre> use <pre>[]</pre> instead.
      
Reference: <a href="http://yuiblog.com/blog/2006/11/13/javascript-we-hardly-new-ya/">http://yuiblog.com/blog/2006/11/13/javascript-we-hardly-new-ya/</a>]]>
    </description>
    <priority>MINOR</priority>

    <messages>
      <message>Use the array literal notation [].</message>
    </messages>
  </rule>

  <rule>
    <key>WRAPPER_FORMS</key>
    <name>Do not use wrapper forms</name>
    <description>
      <![CDATA[JSLint does not expect to see the wrapper forms <i>new Number, new String, new Boolean</i>
      
Reference: <a href="http://yuiblog.com/blog/2006/11/13/javascript-we-hardly-new-ya/">http://yuiblog.com/blog/2006/11/13/javascript-we-hardly-new-ya/</a>]]>
    </description>
    <priority>MINOR</priority>

    <messages>
      <message>Do not use {a} as a constructor.</message>
    </messages>
  </rule>

  <rule>
    <key>UNSAFE_CHARACHTER</key>
    <name>Unsafe character.</name>
    <description>
      <![CDATA[There are characters that are handled inconsistently in browsers, and so must be escaped when placed in strings.
<pre>
\u0000-\u001f
\u007f-\u009f
\u00ad
\u0600-\u0604
\u070f
\u17b4
\u17b5
\u200c-\u200f
\u2028-\u202f
\u2060-\u206f
\ufeff
\ufff0-\uffff
</pre>]]>
    </description>
    <priority>MAJOR</priority>

    <messages>
      <message>Unsafe character.</message>
    </messages>
  </rule>

  <rule>
    <key>UNUSED_NAMES</key>
    <name>Unused names</name>
    <description>
      <![CDATA[The variables that are declared in the function that are not used. This may be an indication of an error.]]>
    </description>
    <priority>MAJOR</priority>
  </rule>

  <rule>
    <key>CYCLOMATIC_COMPLEXITY</key>
    <name>Cyclomatic complexity</name>
    <description>
      <![CDATA[Checks function cyclomatic complexity against a specified limit. The complexity is measured by the number of "if", "while", "do", "for", "?:", "catch", "switch", "case", "&&" and "||" statements (plus one) in the body of the member. It is a measure of the minimum number of possible paths through the source and therefore the number of required tests. Generally 1-4 is considered good, 5-7 ok, 8-10 consider re-factoring, and 11+ re-factor now!]]>
    </description>
    <param>
      <key>MAX_COMPLEXITY</key>
      <description>the maximum threshold allowed. Default is 10.
      </description>
      <defaultValue>10</defaultValue>
    </param>
    <priority>MAJOR</priority>
  </rule>
  
  <rule>
    <key>OTHER_RULES</key>
    <name>Other Rules</name>
    <description>
      <![CDATA[Not all warning/error messages in JSLint can be enabled/disabled. This rule is used to report all warnings/errors that are not mapped to any other rule. It is recommended to keep this rule enabled at all times.]]>
    </description>
    <priority>MAJOR</priority>
  </rule>
</rules>