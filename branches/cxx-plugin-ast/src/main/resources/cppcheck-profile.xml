<?xml version="1.0" encoding="ASCII"?>
<profile>
  <name>Default C++ Profile</name>
  <language>c++</language>
  <rules>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>AssignmentAddressToInteger</key>
      <priority>MINOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>AssignmentIntegerToAddress</key>
      <priority>MINOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>autoVariables</key>
      <priority>MAJOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>returnAddressOfAutoVariable</key>
      <priority>MAJOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>returnLocalVariable</key>
      <priority>MAJOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>returnReference</key>
      <priority>MAJOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>returnTempReference</key>
      <priority>MAJOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>returnAutocstr</key>
      <priority>MAJOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>returnTempPointer</key>
      <priority>MAJOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>autovarInvalidDeallocation</key>
      <priority>MAJOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>arrayIndexOutOfBounds</key>
      <priority>MAJOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>bufferAccessOutOfBounds</key>
      <priority>MAJOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>outOfBounds</key>
      <priority>MAJOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>terminateStrncpy</key>
      <priority>MINOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>negativeIndex</key>
      <priority>MAJOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>insecureCmdLineArgs</key>
      <priority>MAJOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>pointerOutOfBounds</key>
      <priority>MINOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>arrayIndexThenCheck</key>
      <priority>MINOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>noConstructor</key>
      <priority>MINOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>uninitVar</key>
      <priority>MINOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>operatorEqVarError</key>
      <priority>MINOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>unusedPrivateFunction</key>
      <priority>MINOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>memsetClass</key>
      <priority>MAJOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>operatorEq</key>
      <priority>MINOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>thisSubtraction</key>
      <priority>MINOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>operatorEqRetRefThis</key>
      <priority>MINOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>operatorEqToSelf</key>
      <priority>MINOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>exceptThrowInDestructor</key>
      <priority>MAJOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>exceptDeallocThrow</key>
      <priority>MINOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>exceptRethrowCopy</key>
      <priority>MINOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>catchExceptionByValue</key>
      <priority>MINOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>assignIfError</key>
      <priority>MINOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>comparisonError</key>
      <priority>MINOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>multiCondition</key>
      <priority>MINOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>memleak</key>
      <priority>MAJOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>resourceLeak</key>
      <priority>MAJOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>deallocDealloc</key>
      <priority>MAJOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>deallocuse</key>
      <priority>MAJOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>mismatchSize</key>
      <priority>MAJOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>mismatchAllocDealloc</key>
      <priority>MAJOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>memleakOnRealloc</key>
      <priority>MAJOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>nonreentrantFunctionsasctime</key>
      <priority>MINOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>nonreentrantFunctionscrypt</key>
      <priority>MINOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>nonreentrantFunctionsctermid</key>
      <priority>MINOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>nonreentrantFunctionsctime</key>
      <priority>MINOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>nonreentrantFunctionsecvt</key>
      <priority>MINOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>nonreentrantFunctionsfcvt</key>
      <priority>MINOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>nonreentrantFunctionsfgetgrent</key>
      <priority>MINOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>nonreentrantFunctionsfgetpwent</key>
      <priority>MINOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>nonreentrantFunctionsfgetspent</key>
      <priority>MINOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>nonreentrantFunctionsgcvt</key>
      <priority>MINOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>nonreentrantFunctionsgetgrent</key>
      <priority>MINOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>nonreentrantFunctionsgetgrgid</key>
      <priority>MINOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>nonreentrantFunctionsgetgrnam</key>
      <priority>MINOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>nonreentrantFunctionsgethostbyaddr</key>
      <priority>MINOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>nonreentrantFunctionsgethostbyname</key>
      <priority>MINOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>nonreentrantFunctionsgethostbyname2</key>
      <priority>MINOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>nonreentrantFunctionsgethostent</key>
      <priority>MINOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>nonreentrantFunctionsgetlogin</key>
      <priority>MINOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>nonreentrantFunctionsgetnetbyaddr</key>
      <priority>MINOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>nonreentrantFunctionsgetnetbyname</key>
      <priority>MINOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>nonreentrantFunctionsgetnetgrent</key>
      <priority>MINOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>nonreentrantFunctionsgetprotobyname</key>
      <priority>MINOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>nonreentrantFunctionsgetpwent</key>
      <priority>MINOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>nonreentrantFunctionsgetpwnam</key>
      <priority>MINOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>nonreentrantFunctionsgetpwuid</key>
      <priority>MINOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>nonreentrantFunctionsgetrpcbyname</key>
      <priority>MINOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>nonreentrantFunctionsgetrpcbynumber</key>
      <priority>MINOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>nonreentrantFunctionsgetrpcent</key>
      <priority>MINOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>nonreentrantFunctionsgetservbyname</key>
      <priority>MINOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>nonreentrantFunctionsgetservbyport</key>
      <priority>MINOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>nonreentrantFunctionsgetservent</key>
      <priority>MINOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>nonreentrantFunctionsgetspent</key>
      <priority>MINOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>nonreentrantFunctionsgetspnam</key>
      <priority>MINOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>nonreentrantFunctionsgmtime</key>
      <priority>MINOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>nonreentrantFunctionslocaltime</key>
      <priority>MINOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>nonreentrantFunctionsrand</key>
      <priority>MINOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>nonreentrantFunctionsreaddir</key>
      <priority>MINOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>nonreentrantFunctionsstrtok</key>
      <priority>MINOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>nonreentrantFunctionstempnam</key>
      <priority>MINOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>nonreentrantFunctionstmpnam</key>
      <priority>MINOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>nonreentrantFunctionsttyname</key>
      <priority>MINOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>nullPointer</key>
      <priority>MAJOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>obsoleteFunctionsbcmp</key>
      <priority>MINOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>obsoleteFunctionsbcopy</key>
      <priority>MINOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>obsoleteFunctionsbsd_signal</key>
      <priority>MINOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>obsoleteFunctionsbzero</key>
      <priority>MINOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>obsoleteFunctionsecvt</key>
      <priority>MINOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>obsoleteFunctionsfcvt</key>
      <priority>MINOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>obsoleteFunctionsftime</key>
      <priority>MINOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>obsoleteFunctionsgcvt</key>
      <priority>MINOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>obsoleteFunctionsgetcontext</key>
      <priority>MINOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>obsoleteFunctionsgethostbyaddr</key>
      <priority>MINOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>obsoleteFunctionsgethostbyname</key>
      <priority>MINOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>obsoleteFunctionsgets</key>
      <priority>MINOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>obsoleteFunctionsgetwd</key>
      <priority>MINOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>obsoleteFunctionsindex</key>
      <priority>MINOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>obsoleteFunctionsmakecontext</key>
      <priority>MINOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>obsoleteFunctionspthread_attr_getstackaddr</key>
      <priority>MINOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>obsoleteFunctionspthread_attr_setstackaddr</key>
      <priority>MINOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>obsoleteFunctionsrindex</key>
      <priority>MINOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>obsoleteFunctionsscalbln</key>
      <priority>MINOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>obsoleteFunctionsswapcontext</key>
      <priority>MINOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>obsoleteFunctionsualarm</key>
      <priority>MINOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>obsoleteFunctionsusleep</key>
      <priority>MINOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>obsoleteFunctionsvfork</key>
      <priority>MINOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>obsoleteFunctionswcswcs</key>
      <priority>MINOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>assignBoolToPointer</key>
      <priority>MAJOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>sprintfOverlappingData</key>
      <priority>MAJOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>staticStringCompare</key>
      <priority>MINOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>udivError</key>
      <priority>MAJOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>zerodiv</key>
      <priority>MAJOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>wrongmathcall</key>
      <priority>MAJOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>fflushOnInputStream</key>
      <priority>MAJOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>functionConst</key>
      <priority>MINOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>unusedScopedObject</key>
      <priority>MAJOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>sizeofwithsilentarraypointer</key>
      <priority>MAJOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>sizeofwithnumericparameter</key>
      <priority>MINOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>cstyleCast</key>
      <priority>MINOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>dangerousUsageStrtol</key>
      <priority>MAJOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>passedByValue</key>
      <priority>MINOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>constStatement</key>
      <priority>MINOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>charArrayIndex</key>
      <priority>MINOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>charBitOp</key>
      <priority>MINOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>variableScope</key>
      <priority>MINOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>strPlusChar</key>
      <priority>MAJOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>sizeofsizeof</key>
      <priority>MINOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>sizeofCalculation</key>
      <priority>MINOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>redundantAssignInSwitch</key>
      <priority>MINOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>switchCaseFallThrough</key>
      <priority>MINOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>selfAssignment</key>
      <priority>MINOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>assignmentInAssert</key>
      <priority>MINOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>invalidscanf</key>
      <priority>MINOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>incorrectLogicOperator</key>
      <priority>MINOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>memsetZeroBytes</key>
      <priority>MINOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>clarifyCalculation</key>
      <priority>MINOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>clarifyCondition</key>
      <priority>MINOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>incorrectStringCompare</key>
      <priority>MINOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>incrementboolean</key>
      <priority>MINOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>comparisonOfBoolWithInt</key>
      <priority>MINOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>conditionAlwaysTrueFalse</key>
      <priority>MINOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>duplicateIf</key>
      <priority>MINOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>duplicateBranch</key>
      <priority>MINOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>duplicateExpression</key>
      <priority>MINOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>duplicateBreak</key>
      <priority>MINOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>unsignedLessThanZero</key>
      <priority>MINOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>unsignedPositive</key>
      <priority>MINOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>invalidIterator1</key>
      <priority>MAJOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>iterators</key>
      <priority>MAJOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>mismatchingContainers</key>
      <priority>MAJOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>eraseDereference</key>
      <priority>MAJOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>stlOutOfBounds</key>
      <priority>MAJOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>erase</key>
      <priority>MAJOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>invalidIterator2</key>
      <priority>MAJOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>invalidPointer</key>
      <priority>MAJOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>stlBoundries</key>
      <priority>MAJOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>stlIfFind</key>
      <priority>MINOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>stlIfStrFind</key>
      <priority>MINOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>stlcstr</key>
      <priority>MAJOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>stlSize</key>
      <priority>MINOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>redundantIfRemove</key>
      <priority>MINOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>useAutoPointerCopy</key>
      <priority>MINOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>useAutoPointerContainer</key>
      <priority>MAJOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>useAutoPointerArray</key>
      <priority>MAJOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>uninitstring</key>
      <priority>MAJOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>uninitdata</key>
      <priority>MAJOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>uninitvar</key>
      <priority>MAJOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>unusedFunction</key>
      <priority>MINOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>unusedVariable</key>
      <priority>MINOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>unusedAllocatedMemory</key>
      <priority>MINOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>unreadVariable</key>
      <priority>MINOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>unassignedVariable</key>
      <priority>MINOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>unusedStructMember</key>
      <priority>MINOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>postfixOperator</key>
      <priority>MINOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>syntaxError</key>
      <priority>MAJOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>cppcheckError</key>
      <priority>MAJOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>unnecessaryForwardDeclaration</key>
      <priority>MINOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>variableHidingEnum</key>
      <priority>MINOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>variableHidingTypedef</key>
      <priority>MINOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>unnecessaryQualification</key>
      <priority>MINOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>missingInclude</key>
      <priority>MINOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>preprocessorErrorDirective</key>
      <priority>MAJOR</priority>
    </rule>

    <!-- ########### New in cppcheck 1.51 ########### -->
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>initializerList</key>
      <priority>MINOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>possibleBufferAccessOutOfBounds</key>
      <priority>MINOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>returnAddressOfFunctionParameter</key>
      <priority>MAJOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>secondAlwaysTrueFalseWhenFirstTrue</key>
      <priority>MINOR</priority>
    </rule>

    <!-- ########### New in cppcheck 1.52 ########### -->
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>boostForeachError</key>
      <priority>MAJOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>compareBoolExpressionWithInt</key>
      <priority>MINOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>coutCerrMisusage</key>
      <priority>MAJOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>incorrectStringBooleanError</key>
      <priority>MINOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>stringCompare</key>
      <priority>MINOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>unreachableCode</key>
      <priority>MINOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>uselessCallsCompare</key>
      <priority>MINOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>uselessCallsSwap</key>
      <priority>MINOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>uselessCallsSubstr</key>
      <priority>MINOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>wrongcctypecall</key>
      <priority>MAJOR</priority>
    </rule>

    <!-- ########### New in cppcheck 1.53 ########### -->
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>doubleFree</key>
      <priority>MAJOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>invalidPrintfArgType_s</key>
      <priority>MINOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>invalidPrintfArgType_n</key>
      <priority>MINOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>invalidPrintfArgType_p</key>
      <priority>MINOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>invalidPrintfArgType_int</key>
      <priority>MINOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>invalidPrintfArgType_float</key>
      <priority>MINOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>invalidScanfArgType</key>
      <priority>MINOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>obsoleteFunctionsasctime</key>
      <priority>MINOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>obsoleteFunctionsasctime_r</key>
      <priority>MINOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>obsoleteFunctionsctime</key>
      <priority>MINOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>obsoleteFunctionsrand_r</key>
      <priority>MINOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>obsoleteFunctionstmpnam</key>
      <priority>MINOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>obsoleteFunctionstmpnam_r</key>
      <priority>MINOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>obsoleteFunctionsutime</key>
      <priority>MINOR</priority>
    </rule>
    <rule>
      <repositoryKey>cppcheck</repositoryKey>
      <key>wrongPrintfScanfArgNum</key>
      <priority>MAJOR</priority>
    </rule>
  </rules>
</profile>
