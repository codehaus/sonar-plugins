<rules>
  <rule key="com.adobe.ac.pmd.rules.architecture.ViewComponentReferencedInModelRule" priority="MAJOR">
    <name><![CDATA[A view component should not be referenced in a model class]]></name>
    <configKey><![CDATA[com.adobe.ac.pmd.rules.architecture.ViewComponentReferencedInModelRule]]></configKey>
    <category name="Maintainability"/>
    <description><![CDATA[<pre>package com.adobe.ac
{
   import mx.controls.ComboBox; // VIOLATION

   public class MyModelClass
   {
   }
}</pre>]]></description>
  </rule>
  <rule key="com.adobe.ac.pmd.rules.architecture.MonkeyPatchingRule" priority="BLOCKER">
    <name><![CDATA[This class looks to be duplicated with a SDK class]]></name>
    <configKey><![CDATA[com.adobe.ac.pmd.rules.architecture.MonkeyPatchingRule]]></configKey>
    <category name="Maintainability"/>
    <description><![CDATA[<p>Monkey patching can be a risky undertaking because it is not using intended extensibility points and thus may have unintended consequences or make migration to newer versions of the SDK more difficult</p>]]></description>
  </rule>
  <rule key="com.adobe.ac.pmd.rules.architecture.UseInternalClassOutsideApiClass" priority="BLOCKER">
    <name><![CDATA[This class imports an internal class ({0}) from another function area ({1})]]></name>
    <configKey><![CDATA[com.adobe.ac.pmd.rules.architecture.UseInternalClassOutsideApiClass]]></configKey>
    <category name="Maintainability"/>
    <description><![CDATA[<p>If you have different functionalities, you probably don't want every class of each to be accessible from any other functional areas.
So you probably want to use this packaging:
[org].[project].func1.api
[org].[project].func1.restricted
[org].[project].func2.api
[org].[project].func2.restricted
This rule makes sure that no restricted classes is accessed from outside its own function area.</p>
    <pre>package functional
{
	import functional.func1.api.Func1ExposedClass;
	import functional.func1.restricted.Func1RestrictedClass; // VIOLATION
	import functional.func2.api.Func2ExposedClass;
	import functional.func2.restricted.Func2RestrictedClass; // VIOLATION
	
	public class FunctionClient
	{
	}
}
package functional.func1.api

{
	import functional.func1.restricted.Func1RestrictedClass; 
	import functional.func2.api.Func2ExposedClass;
	import functional.func2.restricted.Func2RestrictedClass; // VIOLATION
	
	public class Func1ExposedClass
	{
	}
}
package functional.func1.restricted
{
	import functional.func1.api.Func1ExposedClass;
	import functional.func2.api.Func2ExposedClass;
	import functional.func2.restricted.Func2RestrictedClass; // VIOLATION
	
	public class Func1RestrictedClass
	{
	}
}
package functional.func2.api
{
	import functional.func1.api.Func1ExposedClass;
	import functional.func1.restricted.Func1RestrictedClass; // VIOLATION
	import functional.func2.restricted.Func2RestrictedClass;
	
	public class Func2ExposedClass
	{
	}
}
package functional.func2.restricted
{
	import functional.func1.api.Func1ExposedClass;
	import functional.func1.restricted.Func1RestrictedClass; // VIOLATION
	import functional.func2.api.Func2ExposedClass;
	
	public class Func2RestrictedClass
	{
	}
}</pre>]]></description>
  </rule>
  <rule key="com.adobe.ac.pmd.rules.mxml.MoreThanOneEntryPointInMxmlRule" priority="INFO">
    <name><![CDATA[There are more than 1 public variable in this MXML component]]></name>
    <configKey><![CDATA[com.adobe.ac.pmd.rules.mxml.MoreThanOneEntryPointInMxmlRule]]></configKey>
    <category name="Maintainability"/>
    <description/>
  </rule>
  <rule key="com.adobe.ac.pmd.rules.mxml.MoreThanTwoEntryPointsInMxmlRule" priority="MAJOR">
    <name><![CDATA[There are more than 2 public variables in this MXML component]]></name>
    <configKey><![CDATA[com.adobe.ac.pmd.rules.mxml.MoreThanTwoEntryPointsInMxmlRule]]></configKey>
    <category name="Maintainability"/>
    <description/>
  </rule>
  <rule key="com.adobe.ac.pmd.rules.mxml.TooLongScriptBlockRule" priority="MAJOR">
    <name><![CDATA[This script block is too long ({0} maximum, but {1} actually)]]></name>
    <configKey><![CDATA[com.adobe.ac.pmd.rules.mxml.TooLongScriptBlockRule]]></configKey>
    <category name="Maintainability"/>
    <param key="maximum" type="i">
      <description><![CDATA[The maximum value. Default is 50.]]></description>
    </param>
    <description/>
  </rule>
  <rule key="com.adobe.ac.pmd.rules.mxml.CodeBehindInMxmlRule" priority="INFO">
    <name><![CDATA[Avoid using code behind files]]></name>
    <configKey><![CDATA[com.adobe.ac.pmd.rules.mxml.CodeBehindInMxmlRule]]></configKey>
    <category name="Maintainability"/>
    <description><![CDATA[<p>Code behind files are tightly coupled with the view, not unit-testable, not easy to navigate the code code base and not reusable. Try using presentation model pattern, or observer pattern</p>]]></description>
  </rule>
  <rule key="com.adobe.ac.pmd.rules.binding.BindingUtilsRule" priority="BLOCKER">
    <name><![CDATA[BindingUtils class uses hard coded strings, which won't be picked up by the compiler if you rename this attribute. You should probably consider refactoring using events]]></name>
    <configKey><![CDATA[com.adobe.ac.pmd.rules.binding.BindingUtilsRule]]></configKey>
    <category name="Maintainability"/>
    <description><![CDATA[<pre>public class Controller extends FrontController
{
   public function Controller()
   {
   	 BindingUtils.bindSetter(setContent, value, "content"); // VIOLATION
   }
}</pre>]]></description>
  </rule>
  <rule key="com.adobe.ac.pmd.rules.binding.ChangeWatcherRule" priority="BLOCKER">
    <name><![CDATA[ChangeWatcher class uses hard coded strings to specify the attribute name, to listen to. Prefer listening to events or setters]]></name>
    <configKey><![CDATA[com.adobe.ac.pmd.rules.binding.ChangeWatcherRule]]></configKey>
    <category name="Maintainability"/>
    <description><![CDATA[<pre>public final class Title 
{
	private var watcher : ChangeWatcher; // VIOLATION
}</pre>]]></description>
  </rule>
  <rule key="com.adobe.ac.pmd.rules.binding.TooLongBindingExpressionRule" priority="MAJOR">
    <name><![CDATA[This binding expression is too long ({0} dots maximum, but {1} actually)]]></name>
    <configKey><![CDATA[com.adobe.ac.pmd.rules.binding.TooLongBindingExpressionRule]]></configKey>
    <category name="Maintainability"/>
    <param key="maximum" type="i">
      <description><![CDATA[Maximum value. Default is 3.]]></description>
    </param>
    <description><![CDATA[<p>A Binding expression is executed as soon as one of the bindable attributes changed. If a binding expression contains too many expression, there could be some performance issue.</p>
    <pre>
<mx:Label text="{ vfrfr.frfr.frf.lala }"/> <!-- Violation-->
		</pre>]]></description>
  </rule>
  <rule key="com.adobe.ac.pmd.rules.cairngorm.BindableModelLocatorRule" priority="BLOCKER">
    <name><![CDATA[A modelLocator must not be Bindable at a class level]]></name>
    <configKey><![CDATA[com.adobe.ac.pmd.rules.cairngorm.BindableModelLocatorRule]]></configKey>
    <category name="Maintainability"/>
    <description><![CDATA[<p>A bindable ModelLocator could leads to performance issues due to bindings</p>
    <pre>[Bindable]
public class BindableModelLocator // VIOLATION 
{      
}</pre>]]></description>
  </rule>
  <rule key="com.adobe.ac.pmd.rules.cairngorm.ReferenceModelLocatorOutsideTheMainApplicationRule" priority="MAJOR">
    <name><![CDATA[The ModelLocator should be only accessible from the main application file]]></name>
    <configKey><![CDATA[com.adobe.ac.pmd.rules.cairngorm.ReferenceModelLocatorOutsideTheMainApplicationRule]]></configKey>
    <category name="Maintainability"/>
    <description><![CDATA[<p>The ModelLocator should be only accessible from the main application file. Then sub-models should be injected to the nested views.</p>
    <pre>package business
{
   import model.MyModelLocator; // VIOLATION
   
   public class MyBusinessClass 
   {
   } 
}</pre>]]></description>
  </rule>
  <rule key="com.adobe.ac.pmd.rules.cairngorm.FatControllerRule" priority="MAJOR">
    <name><![CDATA[A FrontController must nor add all its commands within the Controller constructor]]></name>
    <configKey><![CDATA[com.adobe.ac.pmd.rules.cairngorm.FatControllerRule]]></configKey>
    <category name="Maintainability"/>
    
    <description><![CDATA[
	    <p>Try split them into methods where you add commands depending on their functional area.</p>
	    <pre>package control
{
   import control.GetItems1Command;
   import control.GetItems1Event;
   import control.GetItems2Command;
   import control.GetItems2Event;
   // A lot of other imports
   
   public class MyFrontController // VIOLATION
   {
      public function MyFrontController()
      {
         addCommand( 
            GetItems1Event.EVENT_NAME,
            GetItems1Command );

         addCommand( 
            GetItems2Event.EVENT_NAME,
            GetItems2Command );

         // A lot of other addCommand
      }
   } 
}</pre>
    ]]></description>
  </rule>
  <rule key="com.adobe.ac.pmd.rules.cairngorm.BadCairngormEventNameFormatRule" priority="MAJOR">
    <name><![CDATA[A Cairngorm event name should contain the function area name before the actual event name]]></name>
    <configKey><![CDATA[com.adobe.ac.pmd.rules.cairngorm.BadCairngormEventNameFormatRule]]></configKey>
    <category name="Maintainability"/>
    <description><![CDATA[
	    <p>You would have something like 'productManagement.getProducts' as an event name.</p>
	    <pre>public class UncorrectConstructorEvent extends CairngormEvent
						{
						   public function UncorrectConstructorEvent( model : IModel )
						   {
						      super( "eventName", model ); // VIOLATION. It should be "functionalArea.eventName" instead
						   }
						}
						public class UncorrectConstantEvent extends CairngormEnterpriseEvent
						{
						   public static const EVENT_NAME : String = "eventName";
						   
						   public function UncorrectConstantEvent( model : IModel )
						   {
						      super( EVENT_NAME, model ); // VIOLATION
						   }
						}</pre>
    ]]></description>
  </rule>
  <rule key="com.adobe.ac.pmd.rules.cairngorm.CairngormEventDispatcherCallExplicitlyRule" priority="MAJOR">
    <name><![CDATA[CairngormEventDispatcher is called explicitly. {0}]]></name>
    <configKey><![CDATA[com.adobe.ac.pmd.rules.cairngorm.CairngormEventDispatcherCallExplicitlyRule]]></configKey>
    <category name="Maintainability"/>
    <description><![CDATA[
	    <p></p>
	    <pre>
	    	public function foo() : void
				{
				   CairngormEventDispatcher.getInstance().dispatchEvent(new Event(CONSTANT)); // VIOLATION <- use cairngormEvent.dispatch();
				   CairngormEventDispatcher.getInstance().addEventListener(CONSTANT, onHearing); // VIOLATION <- MVC broken
				}  
			</pre>
    ]]></description>
  </rule>
  <rule key="com.adobe.ac.pmd.rules.cairngorm.ModelLocatorReferencedMoreThanOncePerClassRule" priority="MAJOR">
    <name><![CDATA[Only one reference of ModelLocator is allowed per class]]></name>
    <configKey><![CDATA[com.adobe.ac.pmd.rules.cairngorm.ModelLocatorReferencedMoreThanOncePerClassRule]]></configKey>
    <category name="Maintainability"/>
    <description/>
  </rule>
  <rule key="com.adobe.ac.pmd.rules.component.UpdateChildrenNumberInUpdateDisplayListRule" priority="BLOCKER">
    <name><![CDATA[Flex specific - Do not add or remove displayable children from updateDisplayList]]></name>
    <configKey><![CDATA[com.adobe.ac.pmd.rules.component.UpdateChildrenNumberInUpdateDisplayListRule]]></configKey>
    <category name="Maintainability"/>
    <description><![CDATA[
	    <p>UpdateDisplayList is called everytime a child is invalidated. So calling addChild or removeChild in this function could be really CPU consuming</p>
    ]]></description>
  </rule>
  <rule key="com.adobe.ac.pmd.rules.component.CallLaterDirectlyRule" priority="BLOCKER">
    <name><![CDATA[Flex specific - Don't call 'callLater' explicitly]]></name>
    <configKey><![CDATA[com.adobe.ac.pmd.rules.component.CallLaterDirectlyRule]]></configKey>
    <category name="Maintainability"/>
    <description><![CDATA[
	    <p>If you needed to call 'callLater' explicitly, then you probably did not extend the correct component life cycle.</p>
    ]]></description>
  </rule>
  <rule key="com.adobe.ac.pmd.rules.css.StyleBlockInMxmlRule" priority="MAJOR">
    <name><![CDATA[The style block is embed in the MXML file]]></name>
    <configKey><![CDATA[com.adobe.ac.pmd.rules.css.StyleBlockInMxmlRule]]></configKey>
    <category name="Maintainability"/>
    <description><![CDATA[
	    <p>It is not a good practice to embed style blocks inside the MXML component. Prefer using external CSS files.</p>
    ]]></description>
  </rule>
  <rule key="com.adobe.ac.pmd.rules.css.UseCssInsteadOfEmbedMetaDataRule" priority="INFO">
    <name><![CDATA[Embed metadata detected in source code where a stylesheet may be cleaner]]></name>
    <configKey><![CDATA[com.adobe.ac.pmd.rules.css.UseCssInsteadOfEmbedMetaDataRule]]></configKey>
    <category name="Maintainability"/>
    <description/>
  </rule>
  <rule key="com.adobe.ac.pmd.rules.empty.EmptyCatchStatementRule" priority="MAJOR">
    <name><![CDATA[This catch statement is empty]]></name>
    <configKey><![CDATA[com.adobe.ac.pmd.rules.empty.EmptyCatchStatementRule]]></configKey>
    <category name="Maintainability"/>
    <description><![CDATA[
	    <p></p>
	    <pre>public class Foo 
						{
						   public function bar( x : int ) : void
						   {
						      try
						      {
						      }
						      catch( e : Exception )         // VIOLATION
						      {
						      }
						   }
						}
			</pre>
    ]]></description>
  </rule>
  <rule key="com.adobe.ac.pmd.rules.empty.EmptyIfStmtRule" priority="MAJOR">
    <name><![CDATA[No statements in this if statement]]></name>
    <configKey><![CDATA[com.adobe.ac.pmd.rules.empty.EmptyIfStmtRule]]></configKey>
    <category name="Maintainability"/>
    <description><![CDATA[
	    <p>Empty If Statement finds instances where a condition is checked but nothing is done about it.</p>
	    <pre>public class Foo 
						{
						   public function bar( x : int ) : void
						   {
						      if ( x == 0 ) 
						      {
						         // VIOLATION
						      }
						   }
						}
		</pre>
    ]]></description>
  </rule>
  <rule key="com.adobe.ac.pmd.rules.event.EventMissingCloneFunctionRule" priority="BLOCKER">
    <name><![CDATA[The clone event must be overiden in a custom event]]></name>
    <configKey><![CDATA[com.adobe.ac.pmd.rules.event.EventMissingCloneFunctionRule]]></configKey>
    <category name="Maintainability"/>
    <description><![CDATA[
	    <p>Why do you need to override clone? Well, the clone method creates a copy of your event (or object - whatever object has the clone event; this isn't limited to Event objects). The default clone method inherited by the Event class or whatever class your custom class extends, will return an event object of the type of that class, not your custom event subclass. In the situations where a clone is needed, it is needed to be of the same type of your class, not the class it extends.</p>
	    <pre>
	    public class FirstCustomEvent   // VIOLATION - clone method is missing
			{
			   public var lala : String;
			   
			   public function FirstCustomEvent()
			   {         
			   }
			}
	    </pre>
    ]]></description>
  </rule>
  <rule key="com.adobe.ac.pmd.rules.event.PublicVariableInCustomEventRule" priority="MAJOR">
    <name><![CDATA[No public variables should be inside a custom event. This variable ({0}) is public]]></name>
    <configKey><![CDATA[com.adobe.ac.pmd.rules.event.PublicVariableInCustomEventRule]]></configKey>
    <category name="Maintainability"/>
    <description><![CDATA[
	    <p>In order to improve encapsulation in your custom event, it is better not to have public variable in your event. Prefer having read-only attributes, set by the event constructor.</p>
	    <pre>
	    public class FirstCustomEvent   
			{
			   public var lala : String; // VIOLATION
			   
			   public function FirstCustomEvent()
			   {         
			   }
			}
	    </pre>
    ]]></description>
  </rule>
  <rule key="com.adobe.ac.pmd.rules.event.ConstructorDispatchingEventRule" priority="BLOCKER">
    <name><![CDATA[An event is dispatched in a constructor]]></name>
    <configKey><![CDATA[com.adobe.ac.pmd.rules.event.ConstructorDispatchingEventRule]]></configKey>
    <category name="Maintainability"/>
    <description><![CDATA[
	    <p>This is pointless, since event listeners cannot be attached to an object before it has been constructed, so nothing can ever hear the event</p>
	    <pre>
	    public class BigModel   
			{
			   public function BigModel()
			   {    
			      dispatchEvent( new Event( "pointlessEvent" ) );     
			   }
			}
	    </pre>
    ]]></description>
  </rule>
  <rule key="com.adobe.ac.pmd.rules.event.DefaultEventNameRule" priority="MAJOR">
    <name><![CDATA[Event name should be set explicitly]]></name>
    <configKey><![CDATA[com.adobe.ac.pmd.rules.event.DefaultEventNameRule]]></configKey>
    <category name="Maintainability"/>
    <description><![CDATA[
	    <p></p>
	    <pre>
				public class DefaultNameEvent extends Event	
				{
					public function DefaultNameEvent( type : String = "" )
					{
						super( type );
					}
				}	    
	    </pre>
    ]]></description>
  </rule>
  <rule key="com.adobe.ac.pmd.rules.event.DispatchHardCodedEventNameRule" priority="BLOCKER">
    <name><![CDATA[DispatchEvent function must dispatch constant strings]]></name>
    <configKey><![CDATA[com.adobe.ac.pmd.rules.event.DispatchHardCodedEventNameRule]]></configKey>
    <category name="Maintainability"/>
     <description><![CDATA[
	    <p>You should not dispatch a plain string. If you rename this string, you need to replace the string listener as well. Use constants instead</p>
	    <pre>
				public class Foo 
				{
				   public function bar() : void
				   {
				      dispatch( new Event( "myHardCodedEvent" ) ); // VIOLATION
				   }
				}	    
	    </pre>
    ]]></description>
  </rule>
  <rule key="com.adobe.ac.pmd.rules.event.ListenForHardCodedEventNameRule" priority="BLOCKER">
    <name><![CDATA[addEventListener must not contain hard coded strings]]></name>
    <configKey><![CDATA[com.adobe.ac.pmd.rules.event.ListenForHardCodedEventNameRule]]></configKey>
    <category name="Maintainability"/>
    <description><![CDATA[
	    <p>You should not listen for a plain string. If you rename this string, you need to replace the string listener as well. Use constants instead</p>
	    <pre>
				public class Foo 
				{
				   public function bar() : void
				   {
				      addEventListener( "myHardCodedEvent", handleMyHardCodedEvent ); // VIOLATION
				   }
				}	    
	    </pre>
    ]]></description>
  </rule>
  <rule key="com.adobe.ac.pmd.rules.event.UnboundTypeInMetadataRule" priority="BLOCKER">
    <name><![CDATA[This type ({0}) is not found in the source path]]></name>
    <configKey><![CDATA[com.adobe.ac.pmd.rules.event.UnboundTypeInMetadataRule]]></configKey>
    <category name="Maintainability"/>
    <description><![CDATA[
	    <pre>
					Event(name="myTypeEvent",type="UnknownType")] // VIOLATION
					public class UnboundMetadata
					{
					}	    
	    </pre>
    ]]></description>
  </rule>
  <rule key="com.adobe.ac.pmd.rules.event.UntypedEventMetadataRule" priority="MAJOR">
    <name><![CDATA[This event type is not specified]]></name>
    <configKey><![CDATA[com.adobe.ac.pmd.rules.event.UntypedEventMetadataRule]]></configKey>
    <category name="Maintainability"/>
    <description><![CDATA[
	    <p>Specifying a type will allow Flash builder and the class to have this event exposed in its API</p>
	    <pre>
				Event(name="myTypeEvent")] // VIOLATION
				public class UnTypedMetadata
				{
				}	    
	    </pre>
    ]]></description>
  </rule>
  <rule key="com.adobe.ac.pmd.rules.maintanability.AlertShowRule" priority="BLOCKER">
    <name><![CDATA[Do not call Alert.show directly]]></name>
    <configKey><![CDATA[com.adobe.ac.pmd.rules.maintanability.AlertShowRule]]></configKey>
    <category name="Maintainability"/>
    <description><![CDATA[
	    <p>You should not Alert.show() directly. If an error occurred in the system, you should probably use an ErrorManager to have a consistent way to manage those errors.</p>
    ]]></description>
  </rule>
  <rule key="com.adobe.ac.pmd.rules.maintanability.ExcessiveImportRule" priority="MAJOR">
    <name><![CDATA[A high number of imports can indicate a high degree of coupling within an object. ({0} maximum but {1} actually)]]></name>
    <configKey><![CDATA[com.adobe.ac.pmd.rules.maintanability.ExcessiveImportRule]]></configKey>
    <category name="Maintainability"/>
    <param key="maximum" type="i">
      <description><![CDATA[Minimum value. Default is 15.]]></description>
    </param>
    <description><![CDATA[
	    <p>A high number of imports can indicate a high degree of coupling within an object. Rule counts the number of unique imports and reports a violation if the count is above the user defined threshold.</p>
	    <pre>
				import blah.blah.Baz;
				import blah.blah.Bif;
				// 18 others from the same package elided
				public class Foo 
				{
				   public function doWork() : void 
				   {
				   }
				}	    
	    </pre>
    ]]></description>
  </rule>
  <rule key="com.adobe.ac.pmd.rules.maintanability.TrueFalseConditionRule" priority="MAJOR">
    <name><![CDATA[This test contains a hard coded boolean value. You could remove it by having '{0}']]></name>
    <configKey><![CDATA[com.adobe.ac.pmd.rules.maintanability.TrueFalseConditionRule]]></configKey>
    <category name="Maintainability"/>
    <description><![CDATA[
	    <pre>
				if ( true ) // VIOLATION
				{
				   if ( myCondition == false ) // VIOLATION
				   {
				   }
				}	    
	    </pre>
    ]]></description>
  </rule>
  <rule key="com.adobe.ac.pmd.rules.maintanability.AvoidUsingPublicStaticFieldRule" priority="MAJOR">
    <name><![CDATA[If this field ({0}) was meant to be a constant, make it constant. Otherwise, if it is used as a global variable, you may want to redesign this class]]></name>
    <configKey><![CDATA[com.adobe.ac.pmd.rules.maintanability.AvoidUsingPublicStaticFieldRule]]></configKey>
    <category name="Maintainability"/>
    <description/>
  </rule>
  <rule key="com.adobe.ac.pmd.rules.maintanability.DynamicClassRule" priority="BLOCKER">
    <name><![CDATA[A class must not be dynamic]]></name>
    <configKey><![CDATA[com.adobe.ac.pmd.rules.maintanability.DynamicClassRule]]></configKey>
    <category name="Maintainability"/>
     <description><![CDATA[
	    <p>When using dynamic classes, you cannot control how the developer will use your class. It makes refactoring really difficult.</p>
	    <pre>
				dynamic public class DynamicObject // VIOLATION
				{
				}	    
	    </pre>
    ]]></description>
  </rule>
  <rule key="com.adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectTypeRule" priority="BLOCKER">
    <name><![CDATA[Do not use Object class]]></name>
    <configKey><![CDATA[com.adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectTypeRule]]></configKey>
    <category name="Maintainability"/>
    <description><![CDATA[
	    <p>It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring.</p>
	    <pre>
				public class Foo
				{
				   public var bar : Object; // VIOLATION      
				}	    
	    </pre>
    ]]></description>
  </rule>
  <rule key="com.adobe.ac.pmd.rules.maintanability.forbiddentypes.UseDictionaryTypeRule" priority="BLOCKER">
    <name><![CDATA[Do not use Dictionnary class]]></name>
    <configKey><![CDATA[com.adobe.ac.pmd.rules.maintanability.forbiddentypes.UseDictionaryTypeRule]]></configKey>
    <category name="Maintainability"/>
    <description><![CDATA[
	    <p>It is a bad practice to use the dynamic class Dictionary. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</p>
	    <pre>
				public class Foo
				{
				   public var bar : Dictionnary; // VIOLATION      
				}	    
	    </pre>
    ]]></description>
  </rule>
  <rule key="com.adobe.ac.pmd.rules.maintanability.NonStaticConstantFieldRule" priority="BLOCKER">
    <name><![CDATA[A constant field should be static ({0})]]></name>
    <configKey><![CDATA[com.adobe.ac.pmd.rules.maintanability.NonStaticConstantFieldRule]]></configKey>
    <category name="Maintainability"/>
    <description><![CDATA[
	    <pre>
				public class MyObject {
				   public static const MY_STATIC_CONSTANT : String = "myStaticConstant";
				   public const MY_NON_STATIC_CONSTANT : String = "myStaticConstant"; // VIOLATION
				}	    
	    </pre>
    ]]></description>
  </rule>
  <rule key="com.adobe.ac.pmd.rules.maintanability.forbiddentypes.UseGenericTypeRule" priority="BLOCKER">
    <name><![CDATA[Use strongly typed objects instead of *]]></name>
    <configKey><![CDATA[com.adobe.ac.pmd.rules.maintanability.forbiddentypes.UseGenericTypeRule]]></configKey>
    <category name="Maintainability"/>
    <description><![CDATA[
	    <pre>
				public class Foo
				{
				   public var bar : *; // VIOLATION      
				}	    
	    </pre>
    ]]></description>
  </rule>
  <rule key="com.adobe.ac.pmd.rules.maintanability.UselessOverridenFunctionRule" priority="MAJOR">
    <name><![CDATA[This method is empty. This should be removed ({0})]]></name>
    <configKey><![CDATA[com.adobe.ac.pmd.rules.maintanability.UselessOverridenFunctionRule]]></configKey>
    <category name="Maintainability"/>
    <description><![CDATA[
	    <p>This function is not needed.</p>
	    <pre>
				override protected function createChildren() : void
				{
				   super.createChildren();
				}	    
	    </pre>
    ]]></description>
  </rule>
  <rule key="com.adobe.ac.pmd.rules.maintanability.AvoidProtectedFieldInFinalClassRule" priority="MAJOR">
    <name><![CDATA[Protected accessors are useless in a final class. Make it private ({0})]]></name>
    <configKey><![CDATA[com.adobe.ac.pmd.rules.maintanability.AvoidProtectedFieldInFinalClassRule]]></configKey>
    <category name="Maintainability"/>
    <description><![CDATA[
	    <pre>
				final public class Foo
				{
				   protected var bar : int; // VIOLATION      
				}	    
	    </pre>
    ]]></description>
  </rule>
  <rule key="com.adobe.ac.pmd.rules.maintanability.AvoidUsingWithKeyWordRule" priority="MAJOR">
    <name><![CDATA[You should not use the with keyword. It does not help readability]]></name>
    <configKey><![CDATA[com.adobe.ac.pmd.rules.maintanability.AvoidUsingWithKeyWordRule]]></configKey>
    <category name="Maintainability"/>
    <description/>
  </rule>
  <rule key="com.adobe.ac.pmd.rules.maintanability.ArrayFieldWithNoArrayElementTypeRule" priority="MAJOR">
    <name><![CDATA[ArrayElementType metadata is not specified for this array-type field ({0})]]></name>
    <configKey><![CDATA[com.adobe.ac.pmd.rules.maintanability.ArrayFieldWithNoArrayElementTypeRule]]></configKey>
    <category name="Maintainability"/>
    <description><![CDATA[
	    <pre>
				public class ArrayVO {
				   public var items:Array; //VIOLATION
				
				   [ArrayElementType("model.vo.MenuItemVO")]
				   public var menuItems : Array;
				}	    
	    </pre>
    ]]></description>
  </rule>
  <rule key="com.adobe.ac.pmd.rules.maintanability.ClassAndExtensionAreIdenticalRule" priority="MAJOR">
    <name><![CDATA[The extension name is the same as the class name]]></name>
    <configKey><![CDATA[com.adobe.ac.pmd.rules.maintanability.ClassAndExtensionAreIdenticalRule]]></configKey>
    <category name="Maintainability"/>
    <description><![CDATA[
	    <pre>
				package com.MyCompany
				{
				   public class SomeClass extends mx.SomeClass // VIOLATION
				   {
				   }
				}	    
	    </pre>
    ]]></description>
  </rule>
  <rule key="com.adobe.ac.pmd.rules.maintanability.ProtectedStaticMethodRule" priority="MAJOR">
    <name><![CDATA[This method ({0}) should be private]]></name>
    <configKey><![CDATA[com.adobe.ac.pmd.rules.maintanability.ProtectedStaticMethodRule]]></configKey>
    <category name="Maintainability"/>
    <description><![CDATA[
	    <pre>
					protected static function foo() : void // VIOLATION
					{
					}	    
	    </pre>
    ]]></description>
  </rule>
  <rule key="com.adobe.ac.pmd.rules.maintanability.EmptyStatementRule" priority="INFO">
    <name><![CDATA[This statement is empty]]></name>
    <configKey><![CDATA[com.adobe.ac.pmd.rules.maintanability.EmptyStatementRule]]></configKey>
    <category name="Maintainability"/>
    <description><![CDATA[
	    <pre>
					protected function foo() : void
					{
					   var i : int = 0;
					   
					   ; // VIOLATION
					}	    
	    </pre>
    ]]></description>
  </rule>
  <rule key="com.adobe.ac.pmd.rules.naming.TooShortVariableRule" priority="INFO">
    <name><![CDATA[This variable name is too short ({0} characters minimum, but {1} actually)]]></name>
    <configKey><![CDATA[com.adobe.ac.pmd.rules.naming.TooShortVariableRule]]></configKey>
    <category name="Maintainability"/>
    <param key="minimum" type="i">
      <description><![CDATA[Minimum value. Default is 3.]]></description>
    </param>
    <description><![CDATA[
	    <p>Detects when a field, local, or parameter has a very short name.</p>
	    <pre>
				public class Something 
				{
				   private var q : int = 15; // VIOLATION - Field
				
				   public function foo( as : String ) : void // VIOLATION - Formal 
				   {
				      var r : int = 20 + q; // VIOLATION - Local
				   }
				}	    
	    </pre>
    ]]></description>
  </rule>
  <rule key="com.adobe.ac.pmd.rules.naming.PackageCaseRule" priority="MAJOR">
    <name><![CDATA[A package name should be lower case ({0})]]></name>
    <configKey><![CDATA[com.adobe.ac.pmd.rules.naming.PackageCaseRule]]></configKey>
    <category name="Maintainability"/>
    <description><![CDATA[
	    <p>Detects when a package definition contains upper case characters.</p>
	    <pre>
				package com.MyCompany  // VIOLATION <- should be lower case name
				{
				   public class SomeClass 
				   {
				   }
				}
	    </pre>
    ]]></description>
  </rule>
  <rule key="com.adobe.ac.pmd.rules.naming.VariableNameEndingWithNumericRule" priority="MAJOR">
    <name><![CDATA[Using digits at the end of a symbol does not help understanging the meaning of it]]></name>
    <configKey><![CDATA[com.adobe.ac.pmd.rules.naming.VariableNameEndingWithNumericRule]]></configKey>
    <category name="Maintainability"/>
    <description><![CDATA[
	    <pre>
				public class SomeClass 
				{
				   public var correctField1 : int = 0; // VIOLATION <- numeric suffix is forbidden
				}		
	    </pre>
    ]]></description>
  </rule>
  <rule key="com.adobe.ac.pmd.rules.naming.PropertyHiddenByLocalVariableRule" priority="MAJOR">
    <name><![CDATA[A class property is hidden by this local variable ({0})]]></name>
    <configKey><![CDATA[com.adobe.ac.pmd.rules.naming.PropertyHiddenByLocalVariableRule]]></configKey>
    <category name="Maintainability"/>
    <description><![CDATA[
	    <pre>
				public class SomeClass 
				{
				   public var myField : int = 0;
				   
				   public function foo() : void
				   {
				   	var myField : int = 9; // VIOLATION
				   }
				}	    
	    </pre>
    ]]></description>
  </rule>
  <rule key="com.adobe.ac.pmd.rules.naming.UncorrectClassCase" priority="MAJOR">
    <name><![CDATA[A class name must start by a majuscule character]]></name>
    <configKey><![CDATA[com.adobe.ac.pmd.rules.naming.UncorrectClassCase]]></configKey>
    <category name="Maintainability"/>
    <description><![CDATA[
	    <pre>
				public class foo // VIOLATION
				{
				}	    
	    </pre>
    ]]></description>
  </rule>
  <rule key="com.adobe.ac.pmd.rules.naming.WronglyNamedVariableRule" priority="MAJOR">
    <name><![CDATA[This variable ({0}) seems to be incorrectly named. Let your creativity flow]]></name>
    <configKey><![CDATA[com.adobe.ac.pmd.rules.naming.WronglyNamedVariableRule]]></configKey>
    <category name="Maintainability"/>
    <description><![CDATA[
	    <pre>
				public class SomeClass 
				{
				   public var myField : int = 0; // VIOLATION <- my prefix is forbidden
				   
				   public function tmpFoo() : void // VIOLATION <- tmp prefix is forbidden
				   {
				   	var tempFoo : int = 9; // VIOLATION <- temp prefix is forbidden
				   }
				}		
	    </pre>
    ]]></description>
  </rule>
  <rule key="com.adobe.ac.pmd.rules.performance.DynamicFiltersUsedInPopup" priority="MAJOR">
    <name><![CDATA[A popup should not use dynamic filters]]></name>
    <configKey><![CDATA[com.adobe.ac.pmd.rules.performance.DynamicFiltersUsedInPopup]]></configKey>
    <category name="Maintainability"/>
    <description>Prefer using embed filters in assets</description>
  </rule>
  <rule key="com.adobe.ac.pmd.rules.performance.CyclomaticComplexityRule" priority="MAJOR">
    <name><![CDATA[This method is too complex. Maximum complexity is {0}, but its cyclomatic complexity was {1}]]></name>
    <configKey><![CDATA[com.adobe.ac.pmd.rules.performance.CyclomaticComplexityRule]]></configKey>
    <category name="Maintainability"/>
    <param key="maximum" type="i">
      <description><![CDATA[Maximum value. Default is 10.]]></description>
    </param>
    <description/>
  </rule>
  <rule key="com.adobe.ac.pmd.rules.performance.HeavyConstructorRule" priority="MAJOR">
    <name><![CDATA[Constructor must be as lightweight as possible. No control statement allowed, whereas a cyclomatic complexe of {0} has been detected]]></name>
    <configKey><![CDATA[com.adobe.ac.pmd.rules.performance.HeavyConstructorRule]]></configKey>
    <category name="Maintainability"/>
    <description>The Just-In-Time compiler does not compile constructors. Make them as lightweight as possible, or move the complexity of the code to a method called by the constructor. Then the complexity will be compiled by the JIT.</description>
  </rule>
  <rule key="com.adobe.ac.pmd.rules.performance.CreationPolicySetToAllRule" priority="BLOCKER">
    <name><![CDATA[creationPolicy to ALL impacts the performance significantly]]></name>
    <configKey><![CDATA[com.adobe.ac.pmd.rules.performance.CreationPolicySetToAllRule]]></configKey>
    <category name="Maintainability"/>
    <description/>
  </rule>
  <rule key="com.adobe.ac.pmd.rules.performance.BindableClassRule" priority="MAJOR">
    <name><![CDATA[Globally bindable classes can lead to unexpected behaviour especially when you have a setter to a property, and hits the performance of the application]]></name>
    <configKey><![CDATA[com.adobe.ac.pmd.rules.performance.BindableClassRule]]></configKey>
    <category name="Maintainability"/>
    <description/>
  </rule>
  <rule key="com.adobe.ac.pmd.rules.performance.AvoidInstanciationInLoopRule" priority="MAJOR">
    <name><![CDATA[Instanciating a variable in a loop can be expensive]]></name>
    <configKey><![CDATA[com.adobe.ac.pmd.rules.performance.AvoidInstanciationInLoopRule]]></configKey>
    <category name="Maintainability"/>
    <description/>
  </rule>
  <rule key="com.adobe.ac.pmd.rules.performance.DeeplyNestedIfRule" priority="MAJOR">
    <name><![CDATA[Nested if statements are not a good design]]></name>
    <configKey><![CDATA[com.adobe.ac.pmd.rules.performance.DeeplyNestedIfRule]]></configKey>
    <category name="Maintainability"/>
    <description/>
  </rule>
  <rule key="com.adobe.ac.pmd.rules.performance.RecursiveStyleManagerRule" priority="MAJOR">
    <name><![CDATA[Detect calls to the StyleManager that don’t pass “false” as the second parameter]]></name>
    <configKey><![CDATA[com.adobe.ac.pmd.rules.performance.RecursiveStyleManagerRule]]></configKey>
    <category name="Maintainability"/>
    <description>A recursive style manager call can be a very expensive operation, causing parts of the UI to flicker visibly. Instead it is preferable to defer the creation of parts of the UI that depend on a runtime CSS SWF until after the SWF has been loaded. In this case a recursive call is not required.</description>
  </rule>
  <rule key="com.adobe.ac.pmd.rules.sizing.TooManyFunctionRule" priority="MAJOR">
    <name><![CDATA[Too many methods detected ({0} maximum, but {1} actually)]]></name>
    <configKey><![CDATA[com.adobe.ac.pmd.rules.sizing.TooManyFunctionRule]]></configKey>
    <category name="Maintainability"/>
    <param key="maximum" type="i">
      <description><![CDATA[Maximum value. Default is 10.]]></description>
    </param>
    <description><![CDATA[
	    <p>A class with too many methods is probably a good suspect for refactoring, in order to reduce its complexity and find a way to have more fine grained objects.</p>
	    <pre>
					public class Foo 
					   {
					      public function doWork() : void {}
					      public function doMoreWork() : void {}
					      public function doWorkAgain() : void {}
					      // [... more more public methods ...]
					   }	    
	    </pre>
    ]]></description>
  </rule>
  <rule key="com.adobe.ac.pmd.rules.sizing.TooLongFunctionRule" priority="MAJOR">
    <name><![CDATA[This function is far too long ({0} maximum, but {1} actually)]]></name>
    <configKey><![CDATA[com.adobe.ac.pmd.rules.sizing.TooLongFunctionRule]]></configKey>
    <category name="Maintainability"/>
    <param key="maximum" type="i">
      <description><![CDATA[Maximum value. Default is 20.]]></description>
    </param>
    <description><![CDATA[
	    <p>Violations of this rule usually indicate that the method has too much responsibility. Try to reduce the method size by creating helper methods and removing any copy/pasted code.</p>
	    <pre>
				public class Foo 
				   {
				      public function doSomething() : void
				      {
				         System.out.println("Hello world!");
				         System.out.println("Hello world!");
				         // 98 copies omitted for brevity.
				      }
				   }	    
	    </pre>
    ]]></description>
  </rule>
  <rule key="com.adobe.ac.pmd.rules.sizing.TooLongSwitchCaseRule" priority="MAJOR">
    <name><![CDATA[Long switch case detected ({0} lines maximum, but {1} actually)]]></name>
    <configKey><![CDATA[com.adobe.ac.pmd.rules.sizing.TooLongSwitchCaseRule]]></configKey>
    <category name="Maintainability"/>
    <param key="maximum" type="i">
      <description><![CDATA[Maximum value. Default is 3.]]></description>
    </param>
    <description><![CDATA[
	    <p>A switch case statement should be either empty, or contain a break, or call another method.</p>
	    <pre>
				public class Bar   
				   {
				      public function foo() : void
				      {
				          var i : int = 4;
				          
				          switch( i )
				          {
				             case 1:
				                handleFirstCase();
				                break;
				             case 2: // VIOLATION
				                googleResquest.url = "";
				                handleSecondCaseFirstPart();
				                handleSecondCaseSecondPart();
				                break;
				          }
				      }
				   }	    
	    </pre>
    ]]></description>
  </rule>
  <rule key="com.adobe.ac.pmd.rules.sizing.TooManyParametersRule" priority="MAJOR">
    <name><![CDATA[Long parameter list detected ({0} maximum, but {1} actually)]]></name>
    <configKey><![CDATA[com.adobe.ac.pmd.rules.sizing.TooManyParametersRule]]></configKey>
    <category name="Maintainability"/>
    <param key="maximum" type="i">
      <description><![CDATA[Maximum value. Default is 4.]]></description>
    </param>
    <description><![CDATA[
	    <p>Long parameter lists can indicate that a new object should be created to wrap the numerous parameters.  Basically, try to group the parameters together.</p>
	    <pre>
				public class Foo 
				   {
				      public function addData( p0 : int, p1 : int, p2 : int, p3 : int, p4 : int, p5 : int,
				                                             p6 : int, p7 : int, p8 : int, p9 : int, p10 : int ) : void 
				      {
				      }
				   }	    
	    </pre>
    ]]></description>
  </rule>
  <rule key="com.adobe.ac.pmd.rules.sizing.TooManyPublicRule" priority="MAJOR">
    <name><![CDATA[Too much public fields or functions detected ({0} maximum, but {1} actually)]]></name>
    <configKey><![CDATA[com.adobe.ac.pmd.rules.sizing.TooManyPublicRule]]></configKey>
    <category name="Maintainability"/>
    <param key="maximum" type="i">
      <description><![CDATA[Maximum value. Default is 10.]]></description>
    </param>
    <description><![CDATA[
	    <p>A large number of public methods and attributes declared in a class can indicate the class may need to be broken up as increased effort will be required to thoroughly test it.</p>
	    <pre>
				public class Foo 
				   {
				      public var value : String;
				      public var something : Bar;
				      public var variable : Variable;
				
				      // [... more more public attributes ...]
				
				      public function doWork() : void {}
				      public function doMoreWork() : void {}
				      public function doWorkAgain() : void {}
				
				      // [... more more public methods ...]
				   }	    
	    </pre>
    ]]></description>
  </rule>
  <rule key="com.adobe.ac.pmd.rules.sizing.TooManyFieldsRule" priority="MAJOR">
    <name><![CDATA[Too many field detected ({0} maximum, but {1} actually)]]></name>
    <configKey><![CDATA[com.adobe.ac.pmd.rules.sizing.TooManyFieldsRule]]></configKey>
    <category name="Maintainability"/>
    <param key="maximum" type="i">
      <description><![CDATA[Maximum value. Default is 5.]]></description>
    </param>
    <description><![CDATA[
	    <p>Classes that have too many fields could be redesigned to have fewer fields, possibly  through some nested object grouping of some of the information.  For example, a class with  city/state/zipcode fields could instead have one Address field.</p>
	    <pre>
				public class Person 
				   {
				      private var one : String;
				      private var two : int;
				      private var three : int;
				
				      [... many more public fields ...]
				
				   }	    
	    </pre>
    ]]></description>
  </rule>
  <rule key="com.adobe.ac.pmd.rules.sizing.TooManyFieldInVORule" priority="MAJOR">
    <name><![CDATA[Too many field detected ({0} maximum, but {1} actually)]]></name>
    <configKey><![CDATA[com.adobe.ac.pmd.rules.sizing.TooManyFieldInVORule]]></configKey>
    <category name="Maintainability"/>
    <description/>
  </rule>
  <rule key="com.adobe.ac.pmd.rules.style.ConstructorNonEmptyReturnTypeRule" priority="INFO">
    <name><![CDATA[A constructor should not have a return type]]></name>
    <configKey><![CDATA[com.adobe.ac.pmd.rules.style.ConstructorNonEmptyReturnTypeRule]]></configKey>
    <category name="Maintainability"/>
    <description><![CDATA[
	    <p>Even if this is syntactically correct, there should not be a return type for a constructor.</p>
	    <pre>
				public class VoidConstructor   
				   {
				      public function VoidConstructor() : void // VIOLATION
				      {         
				      }      
				   }	    
	    </pre>
    ]]></description>
  </rule>
  <rule key="com.adobe.ac.pmd.rules.style.OverLongLineRule" priority="INFO">
    <name><![CDATA[Too long line ({0} maximum, but {1} actually)]]></name>
    <configKey><![CDATA[com.adobe.ac.pmd.rules.style.OverLongLineRule]]></configKey>
    <category name="Maintainability"/>
    <param key="maximum" type="i">
      <description><![CDATA[Maximum value. Default is 200.]]></description>
    </param>
    <description/>
  </rule>
  <rule key="com.adobe.ac.pmd.rules.style.ImportFromSamePackageRule" priority="INFO">
    <name><![CDATA[Imports from the same package are not necessary]]></name>
    <configKey><![CDATA[com.adobe.ac.pmd.rules.style.ImportFromSamePackageRule]]></configKey>
    <category name="Maintainability"/>
    <description><![CDATA[
	    <pre>
					package com.adobe.ac
					{
					   import com.adobe.ac.MyModel; // VIOLATION HERE
					
					   public class BigModel   
					   {
					      public var model : MyModel = null;
					   }
					}	    
	    </pre>]]>
    </description>
  </rule>
  <rule key="com.adobe.ac.pmd.rules.style.CopyrightMissingRule" priority="INFO">
    <name><![CDATA[The copyright header is missing in this file]]></name>
    <configKey><![CDATA[com.adobe.ac.pmd.rules.style.CopyrightMissingRule]]></configKey>
    <category name="Maintainability"/>
    <description/>
  </rule>
  <rule key="com.adobe.ac.pmd.rules.style.BadFormatLoggerRule" priority="INFO">
    <name><![CDATA[The logger is not correctly formatted because {0}]]></name>
    <configKey><![CDATA[com.adobe.ac.pmd.rules.style.BadFormatLoggerRule]]></configKey>
    <category name="Maintainability"/>
    <description/>
  </rule>
  <rule key="com.adobe.ac.pmd.rules.switchrules.SwitchStatementsShouldHaveDefaultRule" priority="BLOCKER">
    <name><![CDATA[A switch statement does not contain a default statement]]></name>
    <configKey><![CDATA[com.adobe.ac.pmd.rules.switchrules.SwitchStatementsShouldHaveDefaultRule]]></configKey>
    <category name="Maintainability"/>
    <description><![CDATA[
	    <p>Switch statements should have a default label in order to detect corner cases.</p>
	    <pre>
				public class Foo 
				   {
				      public funciton bar() : void 
				      {
				         var  x : int = 2;
				         switch (x) 
				         {
				            case 2: var j : int = 8;
				         }
				      }
				   }	    
	    </pre>
    ]]></description>
  </rule>
  <rule key="com.adobe.ac.pmd.rules.switchrules.NestedSwitchRule" priority="MAJOR">
    <name><![CDATA[Switch must not be nested]]></name>
    <configKey><![CDATA[com.adobe.ac.pmd.rules.switchrules.NestedSwitchRule]]></configKey>
    <category name="Maintainability"/>
    <description><![CDATA[
	    <p>As a general practice, switch statement should not be used. Prefer using inheritance. It is even harder to read when switch statements are nested.</p>
	    <pre>
				public function foo( a : Number, b : Number ) : void
				      {
				          switch( a )
				          {
				             case 1:
				                break;
				             case 2:                   
				                switch ( b ) 
				                {
				                  case 3 :
				                     break;
				                  case 4 :
				                     break;
				                }
				                break;                     
				          }
				      }	    
	    </pre>
    ]]></description>
  </rule>
  <rule key="com.adobe.ac.pmd.rules.switchrules.TooFewBrancheInSwitchStatementRule" priority="INFO">
    <name><![CDATA[There are too few branches in this switch statement ({0} minimum, but {1} actual)]]></name>
    <configKey><![CDATA[com.adobe.ac.pmd.rules.switchrules.TooFewBrancheInSwitchStatementRule]]></configKey>
    <category name="Maintainability"/>
    <param key="maximum" type="i">
      <description><![CDATA[Minimum value. Default is 3.]]></description>
    </param>
    <description>Switch statements are designed for complex branches, and allow branches to share treatment. Using a switch for only 2 branches is ill advised, as switches are not as easy to understand as if. In this case, it's most likely is a good idea to use a if statement</description>
  </rule>
  <rule key="com.adobe.ac.pmd.rules.switchrules.IdenticalSwitchCasesRule" priority="BLOCKER">
    <name><![CDATA[Two switch cases should not be identical]]></name>
    <configKey><![CDATA[com.adobe.ac.pmd.rules.switchrules.IdenticalSwitchCasesRule]]></configKey>
    <category name="Maintainability"/>
    <description/>
  </rule>
  <rule key="com.adobe.ac.pmd.rules.flexunit.EmptyUnitTest" priority="MAJOR">
    <name><![CDATA[A test should contain at least one assertion]]></name>
    <configKey><![CDATA[com.adobe.ac.pmd.rules.flexunit.EmptyUnitTest]]></configKey>
    <category name="Maintainability"/>
    <description/>
  </rule>
  <rule key="com.adobe.ac.pmd.rules.unused.UnusedParameterRule" priority="BLOCKER">
    <name><![CDATA[This parameter ({0}) of this function is not used]]></name>
    <configKey><![CDATA[com.adobe.ac.pmd.rules.unused.UnusedParameterRule]]></configKey>
    <category name="Maintainability"/>
    <description><![CDATA[
	    <pre>
public function foo( param1 : Number, param2 : Number, param3 : Number, param4 : Number, param5 : Number ) : void // 4 violations
      {
         var i : int = param1;
      }	    
	    </pre>
    ]]></description>
  </rule>
  <rule key="com.adobe.ac.pmd.rules.unused.UnusedLocalVariableRule" priority="MAJOR">
    <name><![CDATA[This variable ({0}) is not used]]></name>
    <configKey><![CDATA[com.adobe.ac.pmd.rules.unused.UnusedLocalVariableRule]]></configKey>
    <category name="Maintainability"/>
    <description><![CDATA[
	    <p></p>
	    <pre>
				public function foo() : void
				      {
				         var i : int = 0;// 1 violation
				      }	    
	    </pre>]]>
    </description>
  </rule>
  <rule key="com.adobe.ac.pmd.rules.unused.UnusedPrivateMethodRule" priority="BLOCKER">
    <name><![CDATA[This private method ({0}) does not seem to be used]]></name>
    <configKey><![CDATA[com.adobe.ac.pmd.rules.unused.UnusedPrivateMethodRule]]></configKey>
    <category name="Maintainability"/>
    <description/>
  </rule>
  <rule key="com.adobe.ac.pmd.rules.unused.UnusedFieldRule" priority="BLOCKER">
    <name><![CDATA[This private attribute ({0}) does not seem to be used]]></name>
    <configKey><![CDATA[com.adobe.ac.pmd.rules.unused.UnusedFieldRule]]></configKey>
    <category name="Maintainability"/>
    <description/>
  </rule>
  <rule key="com.adobe.ac.pmd.rules.unused.EmptyPrivateMethodRule" priority="BLOCKER">
    <name><![CDATA[This private method ({0}) is used but its content is empty]]></name>
    <configKey><![CDATA[com.adobe.ac.pmd.rules.unused.EmptyPrivateMethodRule]]></configKey>
    <category name="Maintainability"/>
    <description/>
  </rule>
</rules>